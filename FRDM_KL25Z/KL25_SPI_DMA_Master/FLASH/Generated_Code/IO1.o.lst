   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"IO1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	24
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              		.section	.text.IO1_Init,"ax",%progbits
  24              		.align	2
  25              		.global	IO1_Init
  26              		.code	16
  27              		.thumb_func
  29              	IO1_Init:
  30              	.LFB0:
  31              		.file 1 "../Generated_Code/IO1.c"
   1:../Generated_Code/IO1.c **** /* ###################################################################
   2:../Generated_Code/IO1.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/IO1.c **** **     Filename    : IO1.c
   4:../Generated_Code/IO1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/IO1.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/IO1.c **** **     Component   : Serial_LDD
   7:../Generated_Code/IO1.c **** **     Version     : Component 01.168, Driver 01.11, CPU db: 3.00.000
   8:../Generated_Code/IO1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/IO1.c **** **     Date/Time   : 2015-09-29, 14:34, # CodeGen: 6
  10:../Generated_Code/IO1.c **** **     Abstract    :
  11:../Generated_Code/IO1.c **** **         This component "Serial_LDD" implements an asynchronous serial
  12:../Generated_Code/IO1.c **** **         communication. The component supports different settings of
  13:../Generated_Code/IO1.c **** **         parity, word width, stop-bit and communication speed,
  14:../Generated_Code/IO1.c **** **         user can select interrupt or polling handler.
  15:../Generated_Code/IO1.c **** **         Communication speed can be changed also in runtime.
  16:../Generated_Code/IO1.c **** **         The component requires one on-chip asynchronous serial communication channel.
  17:../Generated_Code/IO1.c **** **     Settings    :
  18:../Generated_Code/IO1.c **** **          Component name                                 : IO1
  19:../Generated_Code/IO1.c **** **          Device                                         : UART0
  20:../Generated_Code/IO1.c **** **          Interrupt service/event                        : Disabled
  21:../Generated_Code/IO1.c **** **          Settings                                       : 
  22:../Generated_Code/IO1.c **** **            Data width                                   : 8 bits
  23:../Generated_Code/IO1.c **** **            Parity                                       : None
  24:../Generated_Code/IO1.c **** **            Stop bits                                    : 1
  25:../Generated_Code/IO1.c **** **            Loop mode                                    : Normal
  26:../Generated_Code/IO1.c **** **            Baud rate                                    : 38400 baud
  27:../Generated_Code/IO1.c **** **            Wakeup condition                             : Idle line wakeup
  28:../Generated_Code/IO1.c **** **            Stop in wait mode                            : no
  29:../Generated_Code/IO1.c **** **            Idle line mode                               : Starts after start bit
  30:../Generated_Code/IO1.c **** **            Transmitter output                           : Not inverted
  31:../Generated_Code/IO1.c **** **            Receiver input                               : Not inverted
  32:../Generated_Code/IO1.c **** **            Break generation length                      : 10/11 bits
  33:../Generated_Code/IO1.c **** **            Receiver                                     : Enabled
  34:../Generated_Code/IO1.c **** **              RxD                                        : PTA15/SPI0_SCK/UART0_RX
  35:../Generated_Code/IO1.c **** **              RxD pin signal                             : 
  36:../Generated_Code/IO1.c **** **            Transmitter                                  : Enabled
  37:../Generated_Code/IO1.c **** **              TxD                                        : PTA14/SPI0_PCS0/UART0_TX
  38:../Generated_Code/IO1.c **** **              TxD pin signal                             : 
  39:../Generated_Code/IO1.c **** **            Flow control                                 : None
  40:../Generated_Code/IO1.c **** **          Initialization                                 : 
  41:../Generated_Code/IO1.c **** **            Enabled in init. code                        : yes
  42:../Generated_Code/IO1.c **** **            Auto initialization                          : yes
  43:../Generated_Code/IO1.c **** **            Event mask                                   : 
  44:../Generated_Code/IO1.c **** **              OnBlockSent                                : Disabled
  45:../Generated_Code/IO1.c **** **              OnBlockReceived                            : Disabled
  46:../Generated_Code/IO1.c **** **              OnTxComplete                               : Disabled
  47:../Generated_Code/IO1.c **** **              OnError                                    : Disabled
  48:../Generated_Code/IO1.c **** **              OnBreak                                    : Disabled
  49:../Generated_Code/IO1.c **** **          CPU clock/configuration selection              : 
  50:../Generated_Code/IO1.c **** **            Clock configuration 0                        : This component enabled
  51:../Generated_Code/IO1.c **** **            Clock configuration 1                        : This component enabled
  52:../Generated_Code/IO1.c **** **            Clock configuration 2                        : This component enabled
  53:../Generated_Code/IO1.c **** **            Clock configuration 3                        : This component enabled
  54:../Generated_Code/IO1.c **** **            Clock configuration 4                        : This component enabled
  55:../Generated_Code/IO1.c **** **            Clock configuration 5                        : This component enabled
  56:../Generated_Code/IO1.c **** **            Clock configuration 6                        : This component enabled
  57:../Generated_Code/IO1.c **** **            Clock configuration 7                        : This component enabled
  58:../Generated_Code/IO1.c **** **     Contents    :
  59:../Generated_Code/IO1.c **** **         Init - LDD_TDeviceData* IO1_Init(LDD_TUserData *UserDataPtr);
  60:../Generated_Code/IO1.c **** **         Main - void IO1_Main(LDD_TDeviceData *DeviceDataPtr);
  61:../Generated_Code/IO1.c **** **
  62:../Generated_Code/IO1.c **** **     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
  63:../Generated_Code/IO1.c **** **     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
  64:../Generated_Code/IO1.c **** **     
  65:../Generated_Code/IO1.c **** **     http      : www.freescale.com
  66:../Generated_Code/IO1.c **** **     mail      : support@freescale.com
  67:../Generated_Code/IO1.c **** ** ###################################################################*/
  68:../Generated_Code/IO1.c **** /*!
  69:../Generated_Code/IO1.c **** ** @file IO1.c
  70:../Generated_Code/IO1.c **** ** @version 01.11
  71:../Generated_Code/IO1.c **** ** @brief
  72:../Generated_Code/IO1.c **** **         This component "Serial_LDD" implements an asynchronous serial
  73:../Generated_Code/IO1.c **** **         communication. The component supports different settings of
  74:../Generated_Code/IO1.c **** **         parity, word width, stop-bit and communication speed,
  75:../Generated_Code/IO1.c **** **         user can select interrupt or polling handler.
  76:../Generated_Code/IO1.c **** **         Communication speed can be changed also in runtime.
  77:../Generated_Code/IO1.c **** **         The component requires one on-chip asynchronous serial communication channel.
  78:../Generated_Code/IO1.c **** */         
  79:../Generated_Code/IO1.c **** /*!
  80:../Generated_Code/IO1.c **** **  @addtogroup IO1_module IO1 module documentation
  81:../Generated_Code/IO1.c **** **  @{
  82:../Generated_Code/IO1.c **** */         
  83:../Generated_Code/IO1.c **** 
  84:../Generated_Code/IO1.c **** /* MODULE IO1. */
  85:../Generated_Code/IO1.c **** /*lint -save  -e926 -e927 -e928 -e929 -e572 Disable MISRA rule (11.4,12.8) checking. */
  86:../Generated_Code/IO1.c **** 
  87:../Generated_Code/IO1.c **** /* {Default RTOS Adapter} No RTOS includes */
  88:../Generated_Code/IO1.c **** #include "IO1.h"
  89:../Generated_Code/IO1.c **** #include "UART0_PDD.h"
  90:../Generated_Code/IO1.c **** 
  91:../Generated_Code/IO1.c **** #ifdef __cplusplus
  92:../Generated_Code/IO1.c **** extern "C" {
  93:../Generated_Code/IO1.c **** #endif
  94:../Generated_Code/IO1.c **** 
  95:../Generated_Code/IO1.c **** /*! The mask of available events used to enable/disable events during runtime. */
  96:../Generated_Code/IO1.c **** #define AVAILABLE_EVENTS_MASK 0x00U
  97:../Generated_Code/IO1.c **** 
  98:../Generated_Code/IO1.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
  99:../Generated_Code/IO1.c **** static IO1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 100:../Generated_Code/IO1.c **** 
 101:../Generated_Code/IO1.c **** /*
 102:../Generated_Code/IO1.c **** ** ===================================================================
 103:../Generated_Code/IO1.c **** **     Method      :  IO1_Init (component Serial_LDD)
 104:../Generated_Code/IO1.c **** */
 105:../Generated_Code/IO1.c **** /*!
 106:../Generated_Code/IO1.c **** **     @brief
 107:../Generated_Code/IO1.c **** **         Initializes the device. Allocates memory for the device data
 108:../Generated_Code/IO1.c **** **         structure, allocates interrupt vectors and sets interrupt
 109:../Generated_Code/IO1.c **** **         priority, sets pin routing, sets timing, etc. If the "Enable
 110:../Generated_Code/IO1.c **** **         in init. code" is set to "yes" value then the device is also
 111:../Generated_Code/IO1.c **** **         enabled(see the description of the Enable() method). In this
 112:../Generated_Code/IO1.c **** **         case the Enable() method is not necessary and needn't to be
 113:../Generated_Code/IO1.c **** **         generated. 
 114:../Generated_Code/IO1.c **** **     @param
 115:../Generated_Code/IO1.c **** **         UserDataPtr     - Pointer to the user or
 116:../Generated_Code/IO1.c **** **                           RTOS specific data. This pointer will be
 117:../Generated_Code/IO1.c **** **                           passed as an event or callback parameter.
 118:../Generated_Code/IO1.c **** **     @return
 119:../Generated_Code/IO1.c **** **                         - Device data structure pointer.
 120:../Generated_Code/IO1.c **** */
 121:../Generated_Code/IO1.c **** /* ===================================================================*/
 122:../Generated_Code/IO1.c **** LDD_TDeviceData* IO1_Init(LDD_TUserData *UserDataPtr)
 123:../Generated_Code/IO1.c **** {
  32              		.loc 1 123 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
 124:../Generated_Code/IO1.c ****   /* Allocate device structure */
 125:../Generated_Code/IO1.c ****   IO1_TDeviceDataPtr DeviceDataPrv;
 126:../Generated_Code/IO1.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 127:../Generated_Code/IO1.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  46              		.loc 1 127 0
  47 0008 4F4B     		ldr	r3, .L3
  48 000a FB60     		str	r3, [r7, #12]
 128:../Generated_Code/IO1.c **** 
 129:../Generated_Code/IO1.c ****   /* Clear the receive counters and pointer */
 130:../Generated_Code/IO1.c ****   DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
  49              		.loc 1 130 0
  50 000c FB68     		ldr	r3, [r7, #12]
  51 000e 0022     		mov	r2, #0
  52 0010 5A80     		strh	r2, [r3, #2]
 131:../Generated_Code/IO1.c ****   DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlo
  53              		.loc 1 131 0
  54 0012 FB68     		ldr	r3, [r7, #12]
  55 0014 0022     		mov	r2, #0
  56 0016 1A81     		strh	r2, [r3, #8]
 132:../Generated_Code/IO1.c ****   DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
  57              		.loc 1 132 0
  58 0018 FB68     		ldr	r3, [r7, #12]
  59 001a 0022     		mov	r2, #0
  60 001c 5A60     		str	r2, [r3, #4]
 133:../Generated_Code/IO1.c ****   /* Clear the transmit counters and pointer */
 134:../Generated_Code/IO1.c ****   DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
  61              		.loc 1 134 0
  62 001e FB68     		ldr	r3, [r7, #12]
  63 0020 0022     		mov	r2, #0
  64 0022 5A81     		strh	r2, [r3, #10]
 135:../Generated_Code/IO1.c ****   DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock(
  65              		.loc 1 135 0
  66 0024 FB68     		ldr	r3, [r7, #12]
  67 0026 0022     		mov	r2, #0
  68 0028 1A82     		strh	r2, [r3, #16]
 136:../Generated_Code/IO1.c ****   DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  69              		.loc 1 136 0
  70 002a FB68     		ldr	r3, [r7, #12]
  71 002c 0022     		mov	r2, #0
  72 002e DA60     		str	r2, [r3, #12]
 137:../Generated_Code/IO1.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  73              		.loc 1 137 0
  74 0030 FB68     		ldr	r3, [r7, #12]
  75 0032 7A68     		ldr	r2, [r7, #4]
  76 0034 5A61     		str	r2, [r3, #20]
 138:../Generated_Code/IO1.c ****   /* SIM_SCGC4: UART0=1 */
 139:../Generated_Code/IO1.c ****   SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;                                   
  77              		.loc 1 139 0
  78 0036 454A     		ldr	r2, .L3+4
  79 0038 4449     		ldr	r1, .L3+4
  80 003a 454B     		ldr	r3, .L3+8
  81 003c CB58     		ldr	r3, [r1, r3]
  82 003e 8021     		mov	r1, #128
  83 0040 C900     		lsl	r1, r1, #3
  84 0042 1943     		orr	r1, r3
  85 0044 424B     		ldr	r3, .L3+8
  86 0046 D150     		str	r1, [r2, r3]
 140:../Generated_Code/IO1.c ****   /* PORTA_PCR15: ISF=0,MUX=3 */
 141:../Generated_Code/IO1.c ****   PORTA_PCR15 = (uint32_t)((PORTA_PCR15 & (uint32_t)~(uint32_t)(
  87              		.loc 1 141 0
  88 0048 424B     		ldr	r3, .L3+12
  89 004a 424A     		ldr	r2, .L3+12
  90 004c D16B     		ldr	r1, [r2, #60]
  91 004e 424A     		ldr	r2, .L3+16
  92 0050 0A40     		and	r2, r1
  93 0052 C021     		mov	r1, #192
  94 0054 8900     		lsl	r1, r1, #2
  95 0056 0A43     		orr	r2, r1
  96 0058 DA63     		str	r2, [r3, #60]
 142:../Generated_Code/IO1.c ****                  PORT_PCR_ISF_MASK |
 143:../Generated_Code/IO1.c ****                  PORT_PCR_MUX(0x04)
 144:../Generated_Code/IO1.c ****                 )) | (uint32_t)(
 145:../Generated_Code/IO1.c ****                  PORT_PCR_MUX(0x03)
 146:../Generated_Code/IO1.c ****                 ));                                  
 147:../Generated_Code/IO1.c ****   /* PORTA_PCR14: ISF=0,MUX=3 */
 148:../Generated_Code/IO1.c ****   PORTA_PCR14 = (uint32_t)((PORTA_PCR14 & (uint32_t)~(uint32_t)(
  97              		.loc 1 148 0
  98 005a 3E4B     		ldr	r3, .L3+12
  99 005c 3D4A     		ldr	r2, .L3+12
 100 005e 916B     		ldr	r1, [r2, #56]
 101 0060 3D4A     		ldr	r2, .L3+16
 102 0062 0A40     		and	r2, r1
 103 0064 C021     		mov	r1, #192
 104 0066 8900     		lsl	r1, r1, #2
 105 0068 0A43     		orr	r2, r1
 106 006a 9A63     		str	r2, [r3, #56]
 149:../Generated_Code/IO1.c ****                  PORT_PCR_ISF_MASK |
 150:../Generated_Code/IO1.c ****                  PORT_PCR_MUX(0x04)
 151:../Generated_Code/IO1.c ****                 )) | (uint32_t)(
 152:../Generated_Code/IO1.c ****                  PORT_PCR_MUX(0x03)
 153:../Generated_Code/IO1.c ****                 ));                                  
 154:../Generated_Code/IO1.c ****   UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
 107              		.loc 1 154 0
 108 006c 3B4B     		ldr	r3, .L3+20
 109 006e 3B4A     		ldr	r2, .L3+20
 110 0070 D278     		ldrb	r2, [r2, #3]
 111 0072 D2B2     		uxtb	r2, r2
 112 0074 0821     		mov	r1, #8
 113 0076 8A43     		bic	r2, r1
 114 0078 D2B2     		uxtb	r2, r2
 115 007a DA70     		strb	r2, [r3, #3]
 155:../Generated_Code/IO1.c ****   UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
 116              		.loc 1 155 0
 117 007c 374B     		ldr	r3, .L3+20
 118 007e 374A     		ldr	r2, .L3+20
 119 0080 D278     		ldrb	r2, [r2, #3]
 120 0082 D2B2     		uxtb	r2, r2
 121 0084 0421     		mov	r1, #4
 122 0086 8A43     		bic	r2, r1
 123 0088 D2B2     		uxtb	r2, r2
 124 008a DA70     		strb	r2, [r3, #3]
 156:../Generated_Code/IO1.c ****   DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
 125              		.loc 1 156 0
 126 008c FB68     		ldr	r3, [r7, #12]
 127 008e 0022     		mov	r2, #0
 128 0090 1A80     		strh	r2, [r3]
 157:../Generated_Code/IO1.c ****   /* UART0_C1: LOOPS=0,DOZEEN=0,RSRC=0,M=0,WAKE=0,ILT=0,PE=0,PT=0 */
 158:../Generated_Code/IO1.c ****   UART0_C1 = 0x00U;                    /*  Set the C1 register */
 129              		.loc 1 158 0
 130 0092 324B     		ldr	r3, .L3+20
 131 0094 0022     		mov	r2, #0
 132 0096 9A70     		strb	r2, [r3, #2]
 159:../Generated_Code/IO1.c ****   /* UART0_C3: R8T9=0,R9T8=0,TXDIR=0,TXINV=0,ORIE=0,NEIE=0,FEIE=0,PEIE=0 */
 160:../Generated_Code/IO1.c ****   UART0_C3 = 0x00U;                    /*  Set the C3 register */
 133              		.loc 1 160 0
 134 0098 304B     		ldr	r3, .L3+20
 135 009a 0022     		mov	r2, #0
 136 009c 9A71     		strb	r2, [r3, #6]
 161:../Generated_Code/IO1.c ****   /* UART0_C4: MAEN1=0,MAEN2=0,M10=0,OSR=0 */
 162:../Generated_Code/IO1.c ****   UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
 137              		.loc 1 162 0
 138 009e 2F4B     		ldr	r3, .L3+20
 139 00a0 0022     		mov	r2, #0
 140 00a2 9A72     		strb	r2, [r3, #10]
 163:../Generated_Code/IO1.c ****   /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
 164:../Generated_Code/IO1.c ****   UART0_S2 = 0x00U;                    /*  Set the S2 register */
 141              		.loc 1 164 0
 142 00a4 2D4B     		ldr	r3, .L3+20
 143 00a6 0022     		mov	r2, #0
 144 00a8 5A71     		strb	r2, [r3, #5]
 165:../Generated_Code/IO1.c ****   UART0_PDD_SetClockSource(UART0_BASE_PTR, UART0_PDD_PLL_FLL_CLOCK);
 145              		.loc 1 165 0
 146 00aa 284A     		ldr	r2, .L3+4
 147 00ac 2749     		ldr	r1, .L3+4
 148 00ae 2C4B     		ldr	r3, .L3+24
 149 00b0 C958     		ldr	r1, [r1, r3]
 150 00b2 2C4B     		ldr	r3, .L3+28
 151 00b4 0B40     		and	r3, r1
 152 00b6 8021     		mov	r1, #128
 153 00b8 C904     		lsl	r1, r1, #19
 154 00ba 1943     		orr	r1, r3
 155 00bc 284B     		ldr	r3, .L3+24
 156 00be D150     		str	r1, [r2, r3]
 166:../Generated_Code/IO1.c ****   UART0_PDD_SetBaudRate(UART0_BASE_PTR, 313U); /* Set the baud rate register. */
 157              		.loc 1 166 0
 158 00c0 264B     		ldr	r3, .L3+20
 159 00c2 264A     		ldr	r2, .L3+20
 160 00c4 1278     		ldrb	r2, [r2]
 161 00c6 D2B2     		uxtb	r2, r2
 162 00c8 D2B2     		uxtb	r2, r2
 163 00ca 1F21     		mov	r1, #31
 164 00cc 8A43     		bic	r2, r1
 165 00ce D2B2     		uxtb	r2, r2
 166 00d0 0121     		mov	r1, #1
 167 00d2 0A43     		orr	r2, r1
 168 00d4 D2B2     		uxtb	r2, r2
 169 00d6 D2B2     		uxtb	r2, r2
 170 00d8 1A70     		strb	r2, [r3]
 171 00da 204B     		ldr	r3, .L3+20
 172 00dc 3922     		mov	r2, #57
 173 00de 5A70     		strb	r2, [r3, #1]
 167:../Generated_Code/IO1.c ****   UART0_PDD_SetOversamplingRatio(UART0_BASE_PTR, 3U);
 174              		.loc 1 167 0
 175 00e0 1E4B     		ldr	r3, .L3+20
 176 00e2 1E4A     		ldr	r2, .L3+20
 177 00e4 927A     		ldrb	r2, [r2, #10]
 178 00e6 D2B2     		uxtb	r2, r2
 179 00e8 D2B2     		uxtb	r2, r2
 180 00ea 1F21     		mov	r1, #31
 181 00ec 8A43     		bic	r2, r1
 182 00ee D2B2     		uxtb	r2, r2
 183 00f0 0321     		mov	r1, #3
 184 00f2 0A43     		orr	r2, r1
 185 00f4 D2B2     		uxtb	r2, r2
 186 00f6 D2B2     		uxtb	r2, r2
 187 00f8 9A72     		strb	r2, [r3, #10]
 168:../Generated_Code/IO1.c ****   UART0_PDD_EnableSamplingOnBothEdges(UART0_BASE_PTR, PDD_ENABLE);
 188              		.loc 1 168 0
 189 00fa 184B     		ldr	r3, .L3+20
 190 00fc 174A     		ldr	r2, .L3+20
 191 00fe D27A     		ldrb	r2, [r2, #11]
 192 0100 D2B2     		uxtb	r2, r2
 193 0102 D2B2     		uxtb	r2, r2
 194 0104 0221     		mov	r1, #2
 195 0106 0A43     		orr	r2, r1
 196 0108 D2B2     		uxtb	r2, r2
 197 010a D2B2     		uxtb	r2, r2
 198 010c DA72     		strb	r2, [r3, #11]
 169:../Generated_Code/IO1.c ****   UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_ENABLE); /* Enable transmitter */
 199              		.loc 1 169 0
 200 010e 134B     		ldr	r3, .L3+20
 201 0110 124A     		ldr	r2, .L3+20
 202 0112 D278     		ldrb	r2, [r2, #3]
 203 0114 D2B2     		uxtb	r2, r2
 204 0116 D2B2     		uxtb	r2, r2
 205 0118 0821     		mov	r1, #8
 206 011a 0A43     		orr	r2, r1
 207 011c D2B2     		uxtb	r2, r2
 208 011e D2B2     		uxtb	r2, r2
 209 0120 DA70     		strb	r2, [r3, #3]
 170:../Generated_Code/IO1.c ****   UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
 210              		.loc 1 170 0
 211 0122 0E4B     		ldr	r3, .L3+20
 212 0124 0D4A     		ldr	r2, .L3+20
 213 0126 D278     		ldrb	r2, [r2, #3]
 214 0128 D2B2     		uxtb	r2, r2
 215 012a D2B2     		uxtb	r2, r2
 216 012c 0421     		mov	r1, #4
 217 012e 0A43     		orr	r2, r1
 218 0130 D2B2     		uxtb	r2, r2
 219 0132 D2B2     		uxtb	r2, r2
 220 0134 DA70     		strb	r2, [r3, #3]
 171:../Generated_Code/IO1.c ****   /* Registration of the device structure */
 172:../Generated_Code/IO1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_IO1_ID,DeviceDataPrv);
 221              		.loc 1 172 0
 222 0136 0C4B     		ldr	r3, .L3+32
 223 0138 FA68     		ldr	r2, [r7, #12]
 224 013a 1A60     		str	r2, [r3]
 173:../Generated_Code/IO1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv);
 225              		.loc 1 173 0
 226 013c FB68     		ldr	r3, [r7, #12]
 174:../Generated_Code/IO1.c **** }
 227              		.loc 1 174 0
 228 013e 181C     		mov	r0, r3
 229 0140 BD46     		mov	sp, r7
 230 0142 04B0     		add	sp, sp, #16
 231              		@ sp needed for prologue
 232 0144 80BD     		pop	{r7, pc}
 233              	.L4:
 234 0146 C046     		.align	2
 235              	.L3:
 236 0148 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 237 014c 00700440 		.word	1074032640
 238 0150 34100000 		.word	4148
 239 0154 00900440 		.word	1074040832
 240 0158 FFF8FFFE 		.word	-16779009
 241 015c 00A00640 		.word	1074176000
 242 0160 04100000 		.word	4100
 243 0164 FFFFFFF3 		.word	-201326593
 244 0168 00000000 		.word	PE_LDD_DeviceDataList
 245              		.cfi_endproc
 246              	.LFE0:
 248              		.section	.text.InterruptRx,"ax",%progbits
 249              		.align	2
 250              		.code	16
 251              		.thumb_func
 253              	InterruptRx:
 254              	.LFB1:
 175:../Generated_Code/IO1.c **** 
 176:../Generated_Code/IO1.c **** /*
 177:../Generated_Code/IO1.c **** ** ===================================================================
 178:../Generated_Code/IO1.c **** **     Method      :  InterruptRx (component Serial_LDD)
 179:../Generated_Code/IO1.c **** **
 180:../Generated_Code/IO1.c **** **     Description :
 181:../Generated_Code/IO1.c **** **         The method services the receive interrupt of the selected 
 182:../Generated_Code/IO1.c **** **         peripheral(s) and eventually invokes the bean's event(s).
 183:../Generated_Code/IO1.c **** **         This method is internal. It is used by Processor Expert only.
 184:../Generated_Code/IO1.c **** ** ===================================================================
 185:../Generated_Code/IO1.c **** */
 186:../Generated_Code/IO1.c **** static void InterruptRx(IO1_TDeviceDataPtr DeviceDataPrv)
 187:../Generated_Code/IO1.c **** {
 255              		.loc 1 187 0
 256              		.cfi_startproc
 257 0000 90B5     		push	{r4, r7, lr}
 258              	.LCFI3:
 259              		.cfi_def_cfa_offset 12
 260              		.cfi_offset 4, -12
 261              		.cfi_offset 7, -8
 262              		.cfi_offset 14, -4
 263 0002 83B0     		sub	sp, sp, #12
 264              	.LCFI4:
 265              		.cfi_def_cfa_offset 24
 266 0004 00AF     		add	r7, sp, #0
 267              	.LCFI5:
 268              		.cfi_def_cfa_register 7
 269 0006 7860     		str	r0, [r7, #4]
 188:../Generated_Code/IO1.c ****   register uint16_t Data;              /* Temporary variable for data */
 189:../Generated_Code/IO1.c **** 
 190:../Generated_Code/IO1.c ****   Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver
 270              		.loc 1 190 0
 271 0008 104B     		ldr	r3, .L7
 272 000a DB79     		ldrb	r3, [r3, #7]
 273 000c DBB2     		uxtb	r3, r3
 274 000e 1C1C     		mov	r4, r3
 191:../Generated_Code/IO1.c ****   if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
 275              		.loc 1 191 0
 276 0010 7B68     		ldr	r3, [r7, #4]
 277 0012 1B89     		ldrh	r3, [r3, #8]
 278 0014 002B     		cmp	r3, #0
 279 0016 15D0     		beq	.L5
 192:../Generated_Code/IO1.c ****     *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer
 280              		.loc 1 192 0
 281 0018 7B68     		ldr	r3, [r7, #4]
 282 001a 5B68     		ldr	r3, [r3, #4]
 283 001c E2B2     		uxtb	r2, r4
 284 001e 1A70     		strb	r2, [r3]
 285 0020 5A1C     		add	r2, r3, #1
 286 0022 7B68     		ldr	r3, [r7, #4]
 287 0024 5A60     		str	r2, [r3, #4]
 193:../Generated_Code/IO1.c ****     DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
 288              		.loc 1 193 0
 289 0026 7B68     		ldr	r3, [r7, #4]
 290 0028 5B88     		ldrh	r3, [r3, #2]
 291 002a 0133     		add	r3, r3, #1
 292 002c 9AB2     		uxth	r2, r3
 293 002e 7B68     		ldr	r3, [r7, #4]
 294 0030 5A80     		strh	r2, [r3, #2]
 194:../Generated_Code/IO1.c ****     if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number
 295              		.loc 1 194 0
 296 0032 7B68     		ldr	r3, [r7, #4]
 297 0034 5A88     		ldrh	r2, [r3, #2]
 298 0036 7B68     		ldr	r3, [r7, #4]
 299 0038 1B89     		ldrh	r3, [r3, #8]
 300 003a 9A42     		cmp	r2, r3
 301 003c 02D1     		bne	.L5
 195:../Generated_Code/IO1.c ****       DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters to 
 302              		.loc 1 195 0
 303 003e 7B68     		ldr	r3, [r7, #4]
 304 0040 0022     		mov	r2, #0
 305 0042 1A81     		strh	r2, [r3, #8]
 306              	.L5:
 196:../Generated_Code/IO1.c ****     }
 197:../Generated_Code/IO1.c ****   }
 198:../Generated_Code/IO1.c **** }
 307              		.loc 1 198 0
 308 0044 BD46     		mov	sp, r7
 309 0046 03B0     		add	sp, sp, #12
 310              		@ sp needed for prologue
 311 0048 90BD     		pop	{r4, r7, pc}
 312              	.L8:
 313 004a C046     		.align	2
 314              	.L7:
 315 004c 00A00640 		.word	1074176000
 316              		.cfi_endproc
 317              	.LFE1:
 319              		.section	.text.InterruptTx,"ax",%progbits
 320              		.align	2
 321              		.code	16
 322              		.thumb_func
 324              	InterruptTx:
 325              	.LFB2:
 199:../Generated_Code/IO1.c **** 
 200:../Generated_Code/IO1.c **** /*
 201:../Generated_Code/IO1.c **** ** ===================================================================
 202:../Generated_Code/IO1.c **** **     Method      :  InterruptTx (component Serial_LDD)
 203:../Generated_Code/IO1.c **** **
 204:../Generated_Code/IO1.c **** **     Description :
 205:../Generated_Code/IO1.c **** **         The method services the receive interrupt of the selected 
 206:../Generated_Code/IO1.c **** **         peripheral(s) and eventually invokes the bean's event(s).
 207:../Generated_Code/IO1.c **** **         This method is internal. It is used by Processor Expert only.
 208:../Generated_Code/IO1.c **** ** ===================================================================
 209:../Generated_Code/IO1.c **** */
 210:../Generated_Code/IO1.c **** static void InterruptTx(IO1_TDeviceDataPtr DeviceDataPrv)
 211:../Generated_Code/IO1.c **** {
 326              		.loc 1 211 0
 327              		.cfi_startproc
 328 0000 80B5     		push	{r7, lr}
 329              	.LCFI6:
 330              		.cfi_def_cfa_offset 8
 331              		.cfi_offset 7, -8
 332              		.cfi_offset 14, -4
 333 0002 82B0     		sub	sp, sp, #8
 334              	.LCFI7:
 335              		.cfi_def_cfa_offset 16
 336 0004 00AF     		add	r7, sp, #0
 337              	.LCFI8:
 338              		.cfi_def_cfa_register 7
 339 0006 7860     		str	r0, [r7, #4]
 212:../Generated_Code/IO1.c **** 
 213:../Generated_Code/IO1.c ****   if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characte
 340              		.loc 1 213 0
 341 0008 7B68     		ldr	r3, [r7, #4]
 342 000a 5A89     		ldrh	r2, [r3, #10]
 343 000c 7B68     		ldr	r3, [r7, #4]
 344 000e 1B8A     		ldrh	r3, [r3, #16]
 345 0010 9A42     		cmp	r2, r3
 346 0012 17D2     		bcs	.L10
 214:../Generated_Code/IO1.c ****     UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to
 347              		.loc 1 214 0
 348 0014 104A     		ldr	r2, .L12
 349 0016 7B68     		ldr	r3, [r7, #4]
 350 0018 DB68     		ldr	r3, [r3, #12]
 351 001a 1978     		ldrb	r1, [r3]
 352 001c D171     		strb	r1, [r2, #7]
 353 001e 5A1C     		add	r2, r3, #1
 354 0020 7B68     		ldr	r3, [r7, #4]
 355 0022 DA60     		str	r2, [r3, #12]
 215:../Generated_Code/IO1.c ****     DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
 356              		.loc 1 215 0
 357 0024 7B68     		ldr	r3, [r7, #4]
 358 0026 5B89     		ldrh	r3, [r3, #10]
 359 0028 0133     		add	r3, r3, #1
 360 002a 9AB2     		uxth	r2, r3
 361 002c 7B68     		ldr	r3, [r7, #4]
 362 002e 5A81     		strh	r2, [r3, #10]
 216:../Generated_Code/IO1.c ****     if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
 363              		.loc 1 216 0
 364 0030 7B68     		ldr	r3, [r7, #4]
 365 0032 5A89     		ldrh	r2, [r3, #10]
 366 0034 7B68     		ldr	r3, [r7, #4]
 367 0036 1B8A     		ldrh	r3, [r3, #16]
 368 0038 9A42     		cmp	r2, r3
 369 003a 0AD1     		bne	.L9
 217:../Generated_Code/IO1.c ****       DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBl
 370              		.loc 1 217 0
 371 003c 7B68     		ldr	r3, [r7, #4]
 372 003e 0022     		mov	r2, #0
 373 0040 1A82     		strh	r2, [r3, #16]
 374 0042 06E0     		b	.L9
 375              	.L10:
 218:../Generated_Code/IO1.c ****     }
 219:../Generated_Code/IO1.c ****   } else {
 220:../Generated_Code/IO1.c ****     DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)ENABLED_TX_INT); /* Clear the flag ENABLED_TX_I
 376              		.loc 1 220 0
 377 0044 7B68     		ldr	r3, [r7, #4]
 378 0046 1B88     		ldrh	r3, [r3]
 379 0048 0122     		mov	r2, #1
 380 004a 9343     		bic	r3, r2
 381 004c 9AB2     		uxth	r2, r3
 382 004e 7B68     		ldr	r3, [r7, #4]
 383 0050 1A80     		strh	r2, [r3]
 384              	.L9:
 221:../Generated_Code/IO1.c ****   }
 222:../Generated_Code/IO1.c **** }
 385              		.loc 1 222 0
 386 0052 BD46     		mov	sp, r7
 387 0054 02B0     		add	sp, sp, #8
 388              		@ sp needed for prologue
 389 0056 80BD     		pop	{r7, pc}
 390              	.L13:
 391              		.align	2
 392              	.L12:
 393 0058 00A00640 		.word	1074176000
 394              		.cfi_endproc
 395              	.LFE2:
 397              		.section	.text.IO1_Main,"ax",%progbits
 398              		.align	2
 399              		.global	IO1_Main
 400              		.code	16
 401              		.thumb_func
 403              	IO1_Main:
 404              	.LFB3:
 223:../Generated_Code/IO1.c **** 
 224:../Generated_Code/IO1.c **** /*
 225:../Generated_Code/IO1.c **** ** ===================================================================
 226:../Generated_Code/IO1.c **** **     Method      :  IO1_Main (component Serial_LDD)
 227:../Generated_Code/IO1.c **** */
 228:../Generated_Code/IO1.c **** /*!
 229:../Generated_Code/IO1.c **** **     @brief
 230:../Generated_Code/IO1.c **** **         This method is available only in the polling mode (Interrupt
 231:../Generated_Code/IO1.c **** **         service/event = 'no'). If interrupt service is disabled this
 232:../Generated_Code/IO1.c **** **         method replaces the interrupt handler. This method should be
 233:../Generated_Code/IO1.c **** **         called if Receive/SendBlock was invoked before in order to
 234:../Generated_Code/IO1.c **** **         run the reception/transmission. The end of the
 235:../Generated_Code/IO1.c **** **         receiving/transmitting is indicated by OnBlockSent or
 236:../Generated_Code/IO1.c **** **         OnBlockReceived event. 
 237:../Generated_Code/IO1.c **** **     @param
 238:../Generated_Code/IO1.c **** **         DeviceDataPtr   - Device data structure
 239:../Generated_Code/IO1.c **** **                           pointer returned by <Init> method.
 240:../Generated_Code/IO1.c **** */
 241:../Generated_Code/IO1.c **** /* ===================================================================*/
 242:../Generated_Code/IO1.c **** void IO1_Main(LDD_TDeviceData *DeviceDataPtr)
 243:../Generated_Code/IO1.c **** {
 405              		.loc 1 243 0
 406              		.cfi_startproc
 407 0000 90B5     		push	{r4, r7, lr}
 408              	.LCFI9:
 409              		.cfi_def_cfa_offset 12
 410              		.cfi_offset 4, -12
 411              		.cfi_offset 7, -8
 412              		.cfi_offset 14, -4
 413 0002 85B0     		sub	sp, sp, #20
 414              	.LCFI10:
 415              		.cfi_def_cfa_offset 32
 416 0004 00AF     		add	r7, sp, #0
 417              	.LCFI11:
 418              		.cfi_def_cfa_register 7
 419 0006 7860     		str	r0, [r7, #4]
 244:../Generated_Code/IO1.c ****   IO1_TDeviceDataPtr DeviceDataPrv = (IO1_TDeviceDataPtr)DeviceDataPtr;
 420              		.loc 1 244 0
 421 0008 7B68     		ldr	r3, [r7, #4]
 422 000a FB60     		str	r3, [r7, #12]
 245:../Generated_Code/IO1.c ****   register uint16_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status regi
 423              		.loc 1 245 0
 424 000c 154B     		ldr	r3, .L18
 425 000e 1B79     		ldrb	r3, [r3, #4]
 426 0010 DBB2     		uxtb	r3, r3
 427 0012 1C1C     		mov	r4, r3
 246:../Generated_Code/IO1.c **** 
 247:../Generated_Code/IO1.c ****   if (StatReg & (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK)) { /* I
 428              		.loc 1 247 0
 429 0014 221C     		mov	r2, r4
 430 0016 0F23     		mov	r3, #15
 431 0018 1340     		and	r3, r2
 432 001a 09D0     		beq	.L15
 248:../Generated_Code/IO1.c ****     UART0_PDD_ClearInterruptFlags(UART0_BASE_PTR, (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_F
 433              		.loc 1 248 0
 434 001c 114B     		ldr	r3, .L18
 435 001e 0F22     		mov	r2, #15
 436 0020 1A71     		strb	r2, [r3, #4]
 249:../Generated_Code/IO1.c ****     (void)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Dummy read 8-bit character from receiver */
 437              		.loc 1 249 0
 438 0022 104B     		ldr	r3, .L18
 439 0024 DB79     		ldrb	r3, [r3, #7]
 250:../Generated_Code/IO1.c ****     StatReg &= (uint16_t)(~(uint16_t)UART0_S1_RDRF_MASK); /* Clear the receive data flag to discard
 440              		.loc 1 250 0
 441 0026 2023     		mov	r3, #32
 442 0028 221C     		mov	r2, r4
 443 002a 9A43     		bic	r2, r3
 444 002c 131C     		mov	r3, r2
 445 002e 9CB2     		uxth	r4, r3
 446              	.L15:
 251:../Generated_Code/IO1.c ****   }
 252:../Generated_Code/IO1.c ****   if (StatReg & UART0_S1_RDRF_MASK) {  /* Is the receiver's interrupt flag set? */
 447              		.loc 1 252 0
 448 0030 221C     		mov	r2, r4
 449 0032 2023     		mov	r3, #32
 450 0034 1340     		and	r3, r2
 451 0036 03D0     		beq	.L16
 253:../Generated_Code/IO1.c ****     InterruptRx(DeviceDataPrv);        /* If yes, then invoke the internal service routine. This ro
 452              		.loc 1 253 0
 453 0038 FB68     		ldr	r3, [r7, #12]
 454 003a 181C     		mov	r0, r3
 455 003c FFF7FEFF 		bl	InterruptRx
 456              	.L16:
 254:../Generated_Code/IO1.c ****   }
 255:../Generated_Code/IO1.c ****   if (DeviceDataPrv->SerFlag & ENABLED_TX_INT) { /* Is the transmitter interrupt enabled? */
 457              		.loc 1 255 0
 458 0040 FB68     		ldr	r3, [r7, #12]
 459 0042 1B88     		ldrh	r3, [r3]
 460 0044 1A1C     		mov	r2, r3
 461 0046 0123     		mov	r3, #1
 462 0048 1340     		and	r3, r2
 463 004a 07D0     		beq	.L14
 256:../Generated_Code/IO1.c ****     if (StatReg & UART0_S1_TDRE_MASK) { /* Is the transmitter empty? */
 464              		.loc 1 256 0
 465 004c 221C     		mov	r2, r4
 466 004e 8023     		mov	r3, #128
 467 0050 1340     		and	r3, r2
 468 0052 03D0     		beq	.L14
 257:../Generated_Code/IO1.c ****       InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This ro
 469              		.loc 1 257 0
 470 0054 FB68     		ldr	r3, [r7, #12]
 471 0056 181C     		mov	r0, r3
 472 0058 FFF7FEFF 		bl	InterruptTx
 473              	.L14:
 258:../Generated_Code/IO1.c ****     }
 259:../Generated_Code/IO1.c ****   }
 260:../Generated_Code/IO1.c **** }
 474              		.loc 1 260 0
 475 005c BD46     		mov	sp, r7
 476 005e 05B0     		add	sp, sp, #20
 477              		@ sp needed for prologue
 478 0060 90BD     		pop	{r4, r7, pc}
 479              	.L19:
 480 0062 C046     		.align	2
 481              	.L18:
 482 0064 00A00640 		.word	1074176000
 483              		.cfi_endproc
 484              	.LFE3:
 486              		.text
 487              	.Letext0:
 488              		.file 2 "E:/Freescale/CW MCU v10.5/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 489              		.file 3 "../Generated_Code/PE_Types.h"
 490              		.file 4 "../Generated_Code/IO_Map.h"
 491              		.file 5 "../Generated_Code/IO1.h"
DEFINED SYMBOLS
                            *ABS*:00000000 IO1.c
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:24     .text.IO1_Init:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:29     .text.IO1_Init:00000000 IO1_Init
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:236    .text.IO1_Init:00000148 $d
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:249    .text.InterruptRx:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:253    .text.InterruptRx:00000000 InterruptRx
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:315    .text.InterruptRx:0000004c $d
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:320    .text.InterruptTx:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:324    .text.InterruptTx:00000000 InterruptTx
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:393    .text.InterruptTx:00000058 $d
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:398    .text.IO1_Main:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:403    .text.IO1_Main:00000000 IO1_Main
C:\Users\lab\AppData\Local\Temp\ccZzf831.s:482    .text.IO1_Main:00000064 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList

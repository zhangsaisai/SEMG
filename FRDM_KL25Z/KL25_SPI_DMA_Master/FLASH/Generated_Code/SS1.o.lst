   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"SS1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	28
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              		.section	.bss.INT_SPI1__DEFAULT_RTOS_ISRPARAM,"aw",%nobits
  24              		.align	2
  27              	INT_SPI1__DEFAULT_RTOS_ISRPARAM:
  28 0000 00000000 		.space	4
  29              		.section	.text.SS1_Init,"ax",%progbits
  30              		.align	2
  31              		.global	SS1_Init
  32              		.code	16
  33              		.thumb_func
  35              	SS1_Init:
  36              	.LFB0:
  37              		.file 1 "../Generated_Code/SS1.c"
   1:../Generated_Code/SS1.c **** /* ###################################################################
   2:../Generated_Code/SS1.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/SS1.c **** **     Filename    : SS1.c
   4:../Generated_Code/SS1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/SS1.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/SS1.c **** **     Component   : SPISlave_LDD
   7:../Generated_Code/SS1.c **** **     Version     : Component 01.047, Driver 01.02, CPU db: 3.00.000
   8:../Generated_Code/SS1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/SS1.c **** **     Date/Time   : 2015-09-29, 14:34, # CodeGen: 6
  10:../Generated_Code/SS1.c **** **     Abstract    :
  11:../Generated_Code/SS1.c **** **         This component "SPISlave_LDD" implements SLAVE part of synchronous
  12:../Generated_Code/SS1.c **** **         serial master-slave communication.
  13:../Generated_Code/SS1.c **** **     Settings    :
  14:../Generated_Code/SS1.c **** **          Component name                                 : SS1
  15:../Generated_Code/SS1.c **** **          Device                                         : SPI1
  16:../Generated_Code/SS1.c **** **          Interrupt service/event                        : Enabled
  17:../Generated_Code/SS1.c **** **            Input interrupt                              : INT_SPI1
  18:../Generated_Code/SS1.c **** **            Input interrupt priority                     : medium priority
  19:../Generated_Code/SS1.c **** **            Output interrupt                             : INT_SPI1
  20:../Generated_Code/SS1.c **** **            Output interrupt priority                    : medium priority
  21:../Generated_Code/SS1.c **** **          Settings                                       : 
  22:../Generated_Code/SS1.c **** **            Input pin                                    : Enabled
  23:../Generated_Code/SS1.c **** **              Pin                                        : PTE3/SPI1_MISO/SPI1_MOSI
  24:../Generated_Code/SS1.c **** **              Pin signal                                 : 
  25:../Generated_Code/SS1.c **** **            Output pin                                   : Enabled
  26:../Generated_Code/SS1.c **** **              Pin                                        : PTE1/SPI1_MOSI/UART1_RX/SPI1_MISO/I2C1
  27:../Generated_Code/SS1.c **** **              Pin signal                                 : 
  28:../Generated_Code/SS1.c **** **            Clock pin                                    : 
  29:../Generated_Code/SS1.c **** **              Pin                                        : PTE2/SPI1_SCK
  30:../Generated_Code/SS1.c **** **              Pin signal                                 : 
  31:../Generated_Code/SS1.c **** **            Slave select                                 : 
  32:../Generated_Code/SS1.c **** **              Pin                                        : PTE4/SPI1_PCS0
  33:../Generated_Code/SS1.c **** **              Pin signal                                 : 
  34:../Generated_Code/SS1.c **** **              Active level                               : Low
  35:../Generated_Code/SS1.c **** **            Attribute set                                : 
  36:../Generated_Code/SS1.c **** **              Width                                      : 8 bits
  37:../Generated_Code/SS1.c **** **              MSB first                                  : yes
  38:../Generated_Code/SS1.c **** **              Clock polarity                             : Low
  39:../Generated_Code/SS1.c **** **              Clock phase                                : Capture on leading edge
  40:../Generated_Code/SS1.c **** **              Parity                                     : None
  41:../Generated_Code/SS1.c **** **            HW input buffer size                         : Max buffer size
  42:../Generated_Code/SS1.c **** **            HW input watermark                           : 1
  43:../Generated_Code/SS1.c **** **            Receiver DMA                                 : Disabled
  44:../Generated_Code/SS1.c **** **            HW output buffer size                        : Max buffer size
  45:../Generated_Code/SS1.c **** **            HW output watermark                          : 1
  46:../Generated_Code/SS1.c **** **            Transmitter DMA                              : Disabled
  47:../Generated_Code/SS1.c **** **          Initialization                                 : 
  48:../Generated_Code/SS1.c **** **            Enabled in init. code                        : yes
  49:../Generated_Code/SS1.c **** **            Auto initialization                          : no
  50:../Generated_Code/SS1.c **** **            Event mask                                   : 
  51:../Generated_Code/SS1.c **** **              OnBlockSent                                : Enabled
  52:../Generated_Code/SS1.c **** **              OnBlockReceived                            : Enabled
  53:../Generated_Code/SS1.c **** **              OnError                                    : Disabled
  54:../Generated_Code/SS1.c **** **     Contents    :
  55:../Generated_Code/SS1.c **** **         Init                   - LDD_TDeviceData* SS1_Init(LDD_TUserData *UserDataPtr);
  56:../Generated_Code/SS1.c **** **         Deinit                 - void SS1_Deinit(LDD_TDeviceData *DeviceDataPtr);
  57:../Generated_Code/SS1.c **** **         SendBlock              - LDD_TError SS1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TD
  58:../Generated_Code/SS1.c **** **         ReceiveBlock           - LDD_TError SS1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD
  59:../Generated_Code/SS1.c **** **         GetSentDataNum         - uint16_t SS1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr);
  60:../Generated_Code/SS1.c **** **         GetReceivedDataNum     - uint16_t SS1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr)
  61:../Generated_Code/SS1.c **** **         GetBlockSentStatus     - bool SS1_GetBlockSentStatus(LDD_TDeviceData *DeviceDataPtr);
  62:../Generated_Code/SS1.c **** **         GetBlockReceivedStatus - bool SS1_GetBlockReceivedStatus(LDD_TDeviceData *DeviceDataPtr)
  63:../Generated_Code/SS1.c **** **
  64:../Generated_Code/SS1.c **** **     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
  65:../Generated_Code/SS1.c **** **     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
  66:../Generated_Code/SS1.c **** **     
  67:../Generated_Code/SS1.c **** **     http      : www.freescale.com
  68:../Generated_Code/SS1.c **** **     mail      : support@freescale.com
  69:../Generated_Code/SS1.c **** ** ###################################################################*/
  70:../Generated_Code/SS1.c **** /*!
  71:../Generated_Code/SS1.c **** ** @file SS1.c
  72:../Generated_Code/SS1.c **** ** @version 01.02
  73:../Generated_Code/SS1.c **** ** @brief
  74:../Generated_Code/SS1.c **** **         This component "SPISlave_LDD" implements SLAVE part of synchronous
  75:../Generated_Code/SS1.c **** **         serial master-slave communication.
  76:../Generated_Code/SS1.c **** */         
  77:../Generated_Code/SS1.c **** /*!
  78:../Generated_Code/SS1.c **** **  @addtogroup SS1_module SS1 module documentation
  79:../Generated_Code/SS1.c **** **  @{
  80:../Generated_Code/SS1.c **** */         
  81:../Generated_Code/SS1.c **** 
  82:../Generated_Code/SS1.c **** /* MODULE SS1. */
  83:../Generated_Code/SS1.c **** /*lint -save  -e926 -e927 -e928 -e929 Disable MISRA rule (11.4) checking. */
  84:../Generated_Code/SS1.c **** 
  85:../Generated_Code/SS1.c **** #include "Events.h"
  86:../Generated_Code/SS1.c **** #include "SS1.h"
  87:../Generated_Code/SS1.c **** /* {Default RTOS Adapter} No RTOS includes */
  88:../Generated_Code/SS1.c **** 
  89:../Generated_Code/SS1.c **** #ifdef __cplusplus
  90:../Generated_Code/SS1.c **** extern "C" {
  91:../Generated_Code/SS1.c **** #endif 
  92:../Generated_Code/SS1.c **** 
  93:../Generated_Code/SS1.c **** #define AVAILABLE_EVENTS_MASK (LDD_SPISLAVE_ON_BLOCK_RECEIVED | LDD_SPISLAVE_ON_BLOCK_SENT)
  94:../Generated_Code/SS1.c **** 
  95:../Generated_Code/SS1.c **** /* These constants contain pins masks */
  96:../Generated_Code/SS1.c **** #define SS1_AVAILABLE_PIN_MASK (LDD_SPISLAVE_INPUT_PIN | LDD_SPISLAVE_OUTPUT_PIN | LDD_SPISLAVE_CLK
  97:../Generated_Code/SS1.c **** #define BLOCK_SENT      0x01U          /* Data block sent flag */
  98:../Generated_Code/SS1.c **** #define BLOCK_RECEIVED  0x02U          /* Data block received flag */
  99:../Generated_Code/SS1.c **** 
 100:../Generated_Code/SS1.c **** typedef struct {
 101:../Generated_Code/SS1.c ****   LDD_SPISLAVE_TError ErrFlag;         /* Error flags */
 102:../Generated_Code/SS1.c ****   uint16_t InpRecvDataNum;             /* The counter of received characters */
 103:../Generated_Code/SS1.c ****   uint8_t *InpDataPtr;                 /* The buffer pointer for received characters */
 104:../Generated_Code/SS1.c ****   uint16_t InpDataNumReq;              /* The counter of characters to receive by ReceiveBlock() */
 105:../Generated_Code/SS1.c ****   uint16_t OutSentDataNum;             /* The counter of sent characters */
 106:../Generated_Code/SS1.c ****   uint8_t *OutDataPtr;                 /* The buffer pointer for data to be transmitted */
 107:../Generated_Code/SS1.c ****   uint16_t OutDataNumReq;              /* The counter of characters to be send by SendBlock() */
 108:../Generated_Code/SS1.c ****   uint8_t SerFlag;                     /* Flags for serial communication */
 109:../Generated_Code/SS1.c ****   LDD_TUserData *UserData;             /* User device data structure */
 110:../Generated_Code/SS1.c **** } SS1_TDeviceData;                     /* Device data structure type */
 111:../Generated_Code/SS1.c **** 
 112:../Generated_Code/SS1.c **** typedef SS1_TDeviceData* SS1_TDeviceDataPtr; /* Pointer to the device data structure */
 113:../Generated_Code/SS1.c **** 
 114:../Generated_Code/SS1.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 115:../Generated_Code/SS1.c **** static SS1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 116:../Generated_Code/SS1.c **** /* {Default RTOS Adapter} Global variable used for passing a parameter into ISR */
 117:../Generated_Code/SS1.c **** static SS1_TDeviceDataPtr INT_SPI1__DEFAULT_RTOS_ISRPARAM;
 118:../Generated_Code/SS1.c **** /* Internal method prototypes */
 119:../Generated_Code/SS1.c **** 
 120:../Generated_Code/SS1.c **** /*
 121:../Generated_Code/SS1.c **** ** ===================================================================
 122:../Generated_Code/SS1.c **** **     Method      :  SS1_Init (component SPISlave_LDD)
 123:../Generated_Code/SS1.c **** */
 124:../Generated_Code/SS1.c **** /*!
 125:../Generated_Code/SS1.c **** **     @brief
 126:../Generated_Code/SS1.c **** **         Initializes the device. Allocates memory for the device data
 127:../Generated_Code/SS1.c **** **         structure, allocates interrupt vectors and sets interrupt
 128:../Generated_Code/SS1.c **** **         priority, sets pin routing, sets timing, etc.
 129:../Generated_Code/SS1.c **** **         If the "Enable in init. code" is set to "yes" value then the
 130:../Generated_Code/SS1.c **** **         device is also enabled(see the description of the Enable()
 131:../Generated_Code/SS1.c **** **         method). In this case the Enable() method is not necessary
 132:../Generated_Code/SS1.c **** **         and needn't to be generated. 
 133:../Generated_Code/SS1.c **** **         This method can be called only once. Before the second call
 134:../Generated_Code/SS1.c **** **         of Init() the Deinit() must be called first.
 135:../Generated_Code/SS1.c **** **     @param
 136:../Generated_Code/SS1.c **** **         UserDataPtr     - Pointer to the user or
 137:../Generated_Code/SS1.c **** **                           RTOS specific data. This pointer will be
 138:../Generated_Code/SS1.c **** **                           passed as an event or callback parameter.
 139:../Generated_Code/SS1.c **** **     @return
 140:../Generated_Code/SS1.c **** **                         - Device data structure pointer.
 141:../Generated_Code/SS1.c **** */
 142:../Generated_Code/SS1.c **** /* ===================================================================*/
 143:../Generated_Code/SS1.c **** LDD_TDeviceData* SS1_Init(LDD_TUserData *UserDataPtr)
 144:../Generated_Code/SS1.c **** {
  38              		.loc 1 144 0
  39              		.cfi_startproc
  40 0000 80B5     		push	{r7, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  45 0002 84B0     		sub	sp, sp, #16
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 24
  48 0004 00AF     		add	r7, sp, #0
  49              	.LCFI2:
  50              		.cfi_def_cfa_register 7
  51 0006 7860     		str	r0, [r7, #4]
 145:../Generated_Code/SS1.c ****   /* Allocate LDD device structure */
 146:../Generated_Code/SS1.c ****   SS1_TDeviceDataPtr DeviceDataPrv;
 147:../Generated_Code/SS1.c **** 
 148:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 149:../Generated_Code/SS1.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  52              		.loc 1 149 0
  53 0008 3E4B     		ldr	r3, .L3
  54 000a FB60     		str	r3, [r7, #12]
 150:../Generated_Code/SS1.c ****   DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */
  55              		.loc 1 150 0
  56 000c FB68     		ldr	r3, [r7, #12]
  57 000e 7A68     		ldr	r2, [r7, #4]
  58 0010 9A61     		str	r2, [r3, #24]
 151:../Generated_Code/SS1.c ****   /* Interrupt vector(s) allocation */
 152:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the glo
 153:../Generated_Code/SS1.c ****   INT_SPI1__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
  59              		.loc 1 153 0
  60 0012 3D4B     		ldr	r3, .L3+4
  61 0014 FA68     		ldr	r2, [r7, #12]
  62 0016 1A60     		str	r2, [r3]
 154:../Generated_Code/SS1.c ****   DeviceDataPrv->ErrFlag = 0x00U;      /* Clear error flags */
  63              		.loc 1 154 0
  64 0018 FB68     		ldr	r3, [r7, #12]
  65 001a 0022     		mov	r2, #0
  66 001c 1A60     		str	r2, [r3]
 155:../Generated_Code/SS1.c ****   /* Clear the receive counters and pointer */
 156:../Generated_Code/SS1.c ****   DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
  67              		.loc 1 156 0
  68 001e FB68     		ldr	r3, [r7, #12]
  69 0020 0022     		mov	r2, #0
  70 0022 9A80     		strh	r2, [r3, #4]
 157:../Generated_Code/SS1.c ****   DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlo
  71              		.loc 1 157 0
  72 0024 FB68     		ldr	r3, [r7, #12]
  73 0026 0022     		mov	r2, #0
  74 0028 9A81     		strh	r2, [r3, #12]
 158:../Generated_Code/SS1.c ****   DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
  75              		.loc 1 158 0
  76 002a FB68     		ldr	r3, [r7, #12]
  77 002c 0022     		mov	r2, #0
  78 002e 9A60     		str	r2, [r3, #8]
 159:../Generated_Code/SS1.c ****   /* Clear the transmit counters and pointer */
 160:../Generated_Code/SS1.c ****   DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
  79              		.loc 1 160 0
  80 0030 FB68     		ldr	r3, [r7, #12]
  81 0032 0022     		mov	r2, #0
  82 0034 DA81     		strh	r2, [r3, #14]
 161:../Generated_Code/SS1.c ****   DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock(
  83              		.loc 1 161 0
  84 0036 FB68     		ldr	r3, [r7, #12]
  85 0038 0022     		mov	r2, #0
  86 003a 9A82     		strh	r2, [r3, #20]
 162:../Generated_Code/SS1.c ****   DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  87              		.loc 1 162 0
  88 003c FB68     		ldr	r3, [r7, #12]
  89 003e 0022     		mov	r2, #0
  90 0040 1A61     		str	r2, [r3, #16]
 163:../Generated_Code/SS1.c ****   DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
  91              		.loc 1 163 0
  92 0042 FB68     		ldr	r3, [r7, #12]
  93 0044 0022     		mov	r2, #0
  94 0046 9A75     		strb	r2, [r3, #22]
 164:../Generated_Code/SS1.c ****   /* SIM_SCGC4: SPI1=1 */
 165:../Generated_Code/SS1.c ****   SIM_SCGC4 |= SIM_SCGC4_SPI1_MASK;                                   
  95              		.loc 1 165 0
  96 0048 304A     		ldr	r2, .L3+8
  97 004a 3049     		ldr	r1, .L3+8
  98 004c 304B     		ldr	r3, .L3+12
  99 004e CB58     		ldr	r3, [r1, r3]
 100 0050 8021     		mov	r1, #128
 101 0052 0904     		lsl	r1, r1, #16
 102 0054 1943     		orr	r1, r3
 103 0056 2E4B     		ldr	r3, .L3+12
 104 0058 D150     		str	r1, [r2, r3]
 166:../Generated_Code/SS1.c ****   /* SPI1_C1: SPIE=0,SPE=0,SPTIE=0,MSTR=0,CPOL=0,CPHA=1,SSOE=0,LSBFE=0 */
 167:../Generated_Code/SS1.c ****   SPI1_C1 = SPI_C1_CPHA_MASK;          /* Clear control register */
 105              		.loc 1 167 0
 106 005a 2E4B     		ldr	r3, .L3+16
 107 005c 0422     		mov	r2, #4
 108 005e 1A70     		strb	r2, [r3]
 168:../Generated_Code/SS1.c ****   /* Interrupt vector(s) priority setting */
 169:../Generated_Code/SS1.c ****   /* NVIC_IPR2: PRI_11=0x80 */
 170:../Generated_Code/SS1.c ****   NVIC_IPR2 = (uint32_t)((NVIC_IPR2 & (uint32_t)~(uint32_t)(
 109              		.loc 1 170 0
 110 0060 2D4A     		ldr	r2, .L3+20
 111 0062 2D49     		ldr	r1, .L3+20
 112 0064 C223     		mov	r3, #194
 113 0066 9B00     		lsl	r3, r3, #2
 114 0068 CB58     		ldr	r3, [r1, r3]
 115 006a 1B02     		lsl	r3, r3, #8
 116 006c 1B0A     		lsr	r3, r3, #8
 117 006e 8021     		mov	r1, #128
 118 0070 0906     		lsl	r1, r1, #24
 119 0072 1943     		orr	r1, r3
 120 0074 C223     		mov	r3, #194
 121 0076 9B00     		lsl	r3, r3, #2
 122 0078 D150     		str	r1, [r2, r3]
 171:../Generated_Code/SS1.c ****                NVIC_IP_PRI_11(0x7F)
 172:../Generated_Code/SS1.c ****               )) | (uint32_t)(
 173:../Generated_Code/SS1.c ****                NVIC_IP_PRI_11(0x80)
 174:../Generated_Code/SS1.c ****               ));                                  
 175:../Generated_Code/SS1.c ****   /* NVIC_ISER: SETENA|=0x0800 */
 176:../Generated_Code/SS1.c ****   NVIC_ISER |= NVIC_ISER_SETENA(0x0800);                                   
 123              		.loc 1 176 0
 124 007a 274B     		ldr	r3, .L3+20
 125 007c 264A     		ldr	r2, .L3+20
 126 007e 1268     		ldr	r2, [r2]
 127 0080 8021     		mov	r1, #128
 128 0082 0901     		lsl	r1, r1, #4
 129 0084 0A43     		orr	r2, r1
 130 0086 1A60     		str	r2, [r3]
 177:../Generated_Code/SS1.c ****   /* PORTE_PCR3: ISF=0,MUX=5 */
 178:../Generated_Code/SS1.c ****   PORTE_PCR3 = (uint32_t)((PORTE_PCR3 & (uint32_t)~(uint32_t)(
 131              		.loc 1 178 0
 132 0088 244B     		ldr	r3, .L3+24
 133 008a 244A     		ldr	r2, .L3+24
 134 008c D168     		ldr	r1, [r2, #12]
 135 008e 244A     		ldr	r2, .L3+28
 136 0090 0A40     		and	r2, r1
 137 0092 A021     		mov	r1, #160
 138 0094 C900     		lsl	r1, r1, #3
 139 0096 0A43     		orr	r2, r1
 140 0098 DA60     		str	r2, [r3, #12]
 179:../Generated_Code/SS1.c ****                 PORT_PCR_ISF_MASK |
 180:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x02)
 181:../Generated_Code/SS1.c ****                )) | (uint32_t)(
 182:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x05)
 183:../Generated_Code/SS1.c ****                ));                                  
 184:../Generated_Code/SS1.c ****   /* PORTE_PCR1: ISF=0,MUX=5 */
 185:../Generated_Code/SS1.c ****   PORTE_PCR1 = (uint32_t)((PORTE_PCR1 & (uint32_t)~(uint32_t)(
 141              		.loc 1 185 0
 142 009a 204B     		ldr	r3, .L3+24
 143 009c 1F4A     		ldr	r2, .L3+24
 144 009e 5168     		ldr	r1, [r2, #4]
 145 00a0 1F4A     		ldr	r2, .L3+28
 146 00a2 0A40     		and	r2, r1
 147 00a4 A021     		mov	r1, #160
 148 00a6 C900     		lsl	r1, r1, #3
 149 00a8 0A43     		orr	r2, r1
 150 00aa 5A60     		str	r2, [r3, #4]
 186:../Generated_Code/SS1.c ****                 PORT_PCR_ISF_MASK |
 187:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x02)
 188:../Generated_Code/SS1.c ****                )) | (uint32_t)(
 189:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x05)
 190:../Generated_Code/SS1.c ****                ));                                  
 191:../Generated_Code/SS1.c ****   /* PORTE_PCR2: ISF=0,MUX=2 */
 192:../Generated_Code/SS1.c ****   PORTE_PCR2 = (uint32_t)((PORTE_PCR2 & (uint32_t)~(uint32_t)(
 151              		.loc 1 192 0
 152 00ac 1B4B     		ldr	r3, .L3+24
 153 00ae 1B4A     		ldr	r2, .L3+24
 154 00b0 9168     		ldr	r1, [r2, #8]
 155 00b2 1B4A     		ldr	r2, .L3+28
 156 00b4 0A40     		and	r2, r1
 157 00b6 8021     		mov	r1, #128
 158 00b8 8900     		lsl	r1, r1, #2
 159 00ba 0A43     		orr	r2, r1
 160 00bc 9A60     		str	r2, [r3, #8]
 193:../Generated_Code/SS1.c ****                 PORT_PCR_ISF_MASK |
 194:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x05)
 195:../Generated_Code/SS1.c ****                )) | (uint32_t)(
 196:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x02)
 197:../Generated_Code/SS1.c ****                ));                                  
 198:../Generated_Code/SS1.c ****   /* PORTE_PCR4: ISF=0,MUX=2 */
 199:../Generated_Code/SS1.c ****   PORTE_PCR4 = (uint32_t)((PORTE_PCR4 & (uint32_t)~(uint32_t)(
 161              		.loc 1 199 0
 162 00be 174B     		ldr	r3, .L3+24
 163 00c0 164A     		ldr	r2, .L3+24
 164 00c2 1169     		ldr	r1, [r2, #16]
 165 00c4 164A     		ldr	r2, .L3+28
 166 00c6 0A40     		and	r2, r1
 167 00c8 8021     		mov	r1, #128
 168 00ca 8900     		lsl	r1, r1, #2
 169 00cc 0A43     		orr	r2, r1
 170 00ce 1A61     		str	r2, [r3, #16]
 200:../Generated_Code/SS1.c ****                 PORT_PCR_ISF_MASK |
 201:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x05)
 202:../Generated_Code/SS1.c ****                )) | (uint32_t)(
 203:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x02)
 204:../Generated_Code/SS1.c ****                ));                                  
 205:../Generated_Code/SS1.c ****   /* SPI1_C1: SPIE=0,SPE=0,SPTIE=0,MSTR=0,CPOL=0,CPHA=0,SSOE=0,LSBFE=0 */
 206:../Generated_Code/SS1.c ****   SPI1_C1 = 0x00U;                     /* Set Configuration register */
 171              		.loc 1 206 0
 172 00d0 104B     		ldr	r3, .L3+16
 173 00d2 0022     		mov	r2, #0
 174 00d4 1A70     		strb	r2, [r3]
 207:../Generated_Code/SS1.c ****   /* SPI1_C2: SPMIE=0,??=0,TXDMAE=0,MODFEN=0,BIDIROE=0,RXDMAE=0,SPISWAI=0,SPC0=0 */
 208:../Generated_Code/SS1.c ****   SPI1_C2 = 0x00U;                     /* Set Configuration register */
 175              		.loc 1 208 0
 176 00d6 0F4B     		ldr	r3, .L3+16
 177 00d8 0022     		mov	r2, #0
 178 00da 5A70     		strb	r2, [r3, #1]
 209:../Generated_Code/SS1.c ****   /* SPI1_BR: ??=0,SPPR=0,SPR=0 */
 210:../Generated_Code/SS1.c ****   SPI1_BR = (SPI_BR_SPPR(0x00) | SPI_BR_SPR(0x00)); /* Set baud rate register */
 179              		.loc 1 210 0
 180 00dc 0D4B     		ldr	r3, .L3+16
 181 00de 0022     		mov	r2, #0
 182 00e0 9A70     		strb	r2, [r3, #2]
 211:../Generated_Code/SS1.c ****   /* SPI1_C1: SPE=1 */
 212:../Generated_Code/SS1.c ****   SPI1_C1 |= SPI_C1_SPE_MASK;          /* Enable device */
 183              		.loc 1 212 0
 184 00e2 0C4B     		ldr	r3, .L3+16
 185 00e4 0B4A     		ldr	r2, .L3+16
 186 00e6 1278     		ldrb	r2, [r2]
 187 00e8 D2B2     		uxtb	r2, r2
 188 00ea 4021     		mov	r1, #64
 189 00ec 0A43     		orr	r2, r1
 190 00ee D2B2     		uxtb	r2, r2
 191 00f0 1A70     		strb	r2, [r3]
 213:../Generated_Code/SS1.c ****   /* Registration of the device structure */
 214:../Generated_Code/SS1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_SS1_ID,DeviceDataPrv);
 192              		.loc 1 214 0
 193 00f2 0C4B     		ldr	r3, .L3+32
 194 00f4 FA68     		ldr	r2, [r7, #12]
 195 00f6 5A60     		str	r2, [r3, #4]
 215:../Generated_Code/SS1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
 196              		.loc 1 215 0
 197 00f8 FB68     		ldr	r3, [r7, #12]
 216:../Generated_Code/SS1.c **** }
 198              		.loc 1 216 0
 199 00fa 181C     		mov	r0, r3
 200 00fc BD46     		mov	sp, r7
 201 00fe 04B0     		add	sp, sp, #16
 202              		@ sp needed for prologue
 203 0100 80BD     		pop	{r7, pc}
 204              	.L4:
 205 0102 C046     		.align	2
 206              	.L3:
 207 0104 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 208 0108 00000000 		.word	INT_SPI1__DEFAULT_RTOS_ISRPARAM
 209 010c 00700440 		.word	1074032640
 210 0110 34100000 		.word	4148
 211 0114 00700740 		.word	1074229248
 212 0118 00E100E0 		.word	-536813312
 213 011c 00D00440 		.word	1074057216
 214 0120 FFF8FFFE 		.word	-16779009
 215 0124 00000000 		.word	PE_LDD_DeviceDataList
 216              		.cfi_endproc
 217              	.LFE0:
 219              		.section	.text.SS1_Deinit,"ax",%progbits
 220              		.align	2
 221              		.global	SS1_Deinit
 222              		.code	16
 223              		.thumb_func
 225              	SS1_Deinit:
 226              	.LFB1:
 217:../Generated_Code/SS1.c **** 
 218:../Generated_Code/SS1.c **** /*
 219:../Generated_Code/SS1.c **** ** ===================================================================
 220:../Generated_Code/SS1.c **** **     Method      :  SS1_Deinit (component SPISlave_LDD)
 221:../Generated_Code/SS1.c **** */
 222:../Generated_Code/SS1.c **** /*!
 223:../Generated_Code/SS1.c **** **     @brief
 224:../Generated_Code/SS1.c **** **         This method deinitializes the device. It switches off the
 225:../Generated_Code/SS1.c **** **         device, frees the device data structure memory, interrupts
 226:../Generated_Code/SS1.c **** **         vectors, etc.
 227:../Generated_Code/SS1.c **** **     @param
 228:../Generated_Code/SS1.c **** **         DeviceDataPtr   - Device data structure
 229:../Generated_Code/SS1.c **** **                           pointer returned by <Init> method.
 230:../Generated_Code/SS1.c **** */
 231:../Generated_Code/SS1.c **** /* ===================================================================*/
 232:../Generated_Code/SS1.c **** void SS1_Deinit(LDD_TDeviceData *DeviceDataPtr)
 233:../Generated_Code/SS1.c **** {
 227              		.loc 1 233 0
 228              		.cfi_startproc
 229 0000 80B5     		push	{r7, lr}
 230              	.LCFI3:
 231              		.cfi_def_cfa_offset 8
 232              		.cfi_offset 7, -8
 233              		.cfi_offset 14, -4
 234 0002 82B0     		sub	sp, sp, #8
 235              	.LCFI4:
 236              		.cfi_def_cfa_offset 16
 237 0004 00AF     		add	r7, sp, #0
 238              	.LCFI5:
 239              		.cfi_def_cfa_register 7
 240 0006 7860     		str	r0, [r7, #4]
 234:../Generated_Code/SS1.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 235:../Generated_Code/SS1.c ****   /* SPI1_C1: SPIE=0,SPE=0,SPTIE=0,MSTR=0,CPOL=0,CPHA=1,SSOE=0,LSBFE=0 */
 236:../Generated_Code/SS1.c ****   SPI1_C1 = SPI_C1_CPHA_MASK;          /* Disable device */
 241              		.loc 1 236 0
 242 0008 084B     		ldr	r3, .L6
 243 000a 0422     		mov	r2, #4
 244 000c 1A70     		strb	r2, [r3]
 237:../Generated_Code/SS1.c ****   /* Restoring the interrupt vector */
 238:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Restore interrupt vector: IVT is static, no code is generated */
 239:../Generated_Code/SS1.c ****   /* Unregistration of the device structure */
 240:../Generated_Code/SS1.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_SS1_ID);
 245              		.loc 1 240 0
 246 000e 084B     		ldr	r3, .L6+4
 247 0010 0022     		mov	r2, #0
 248 0012 5A60     		str	r2, [r3, #4]
 241:../Generated_Code/SS1.c ****   /* Deallocation of the device structure */
 242:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 243:../Generated_Code/SS1.c ****   /* SIM_SCGC4: SPI1=0 */
 244:../Generated_Code/SS1.c ****   SIM_SCGC4 &= (uint32_t)~(uint32_t)(SIM_SCGC4_SPI1_MASK);                                   
 249              		.loc 1 244 0
 250 0014 074A     		ldr	r2, .L6+8
 251 0016 0749     		ldr	r1, .L6+8
 252 0018 074B     		ldr	r3, .L6+12
 253 001a C958     		ldr	r1, [r1, r3]
 254 001c 074B     		ldr	r3, .L6+16
 255 001e 1940     		and	r1, r3
 256 0020 054B     		ldr	r3, .L6+12
 257 0022 D150     		str	r1, [r2, r3]
 245:../Generated_Code/SS1.c **** }
 258              		.loc 1 245 0
 259 0024 BD46     		mov	sp, r7
 260 0026 02B0     		add	sp, sp, #8
 261              		@ sp needed for prologue
 262 0028 80BD     		pop	{r7, pc}
 263              	.L7:
 264 002a C046     		.align	2
 265              	.L6:
 266 002c 00700740 		.word	1074229248
 267 0030 00000000 		.word	PE_LDD_DeviceDataList
 268 0034 00700440 		.word	1074032640
 269 0038 34100000 		.word	4148
 270 003c FFFF7FFF 		.word	-8388609
 271              		.cfi_endproc
 272              	.LFE1:
 274              		.section	.text.SS1_ReceiveBlock,"ax",%progbits
 275              		.align	2
 276              		.global	SS1_ReceiveBlock
 277              		.code	16
 278              		.thumb_func
 280              	SS1_ReceiveBlock:
 281              	.LFB2:
 246:../Generated_Code/SS1.c **** 
 247:../Generated_Code/SS1.c **** /*
 248:../Generated_Code/SS1.c **** ** ===================================================================
 249:../Generated_Code/SS1.c **** **     Method      :  SS1_ReceiveBlock (component SPISlave_LDD)
 250:../Generated_Code/SS1.c **** */
 251:../Generated_Code/SS1.c **** /*!
 252:../Generated_Code/SS1.c **** **     @brief
 253:../Generated_Code/SS1.c **** **         This method specifies the number of data to receive. The
 254:../Generated_Code/SS1.c **** **         method returns ERR_BUSY until the specified number of
 255:../Generated_Code/SS1.c **** **         characters is received. The method <CancelBlockReception>
 256:../Generated_Code/SS1.c **** **         can be used to cancel a running receive operation.
 257:../Generated_Code/SS1.c **** **     @param
 258:../Generated_Code/SS1.c **** **         DeviceDataPtr   - Device data structure
 259:../Generated_Code/SS1.c **** **                           pointer returned by <Init> method.
 260:../Generated_Code/SS1.c **** **     @param
 261:../Generated_Code/SS1.c **** **         BufferPtr       - Pointer to A buffer where
 262:../Generated_Code/SS1.c **** **                           received characters will be stored.
 263:../Generated_Code/SS1.c **** **     @param
 264:../Generated_Code/SS1.c **** **         Size            - Size of the block
 265:../Generated_Code/SS1.c **** **     @return
 266:../Generated_Code/SS1.c **** **                         - Error code, possible codes:
 267:../Generated_Code/SS1.c **** **                           ERR_OK - OK
 268:../Generated_Code/SS1.c **** **                           ERR_DISABLED - Component is disabled
 269:../Generated_Code/SS1.c **** **                           ERR_BUSY - The previous receive request is
 270:../Generated_Code/SS1.c **** **                           pending
 271:../Generated_Code/SS1.c **** */
 272:../Generated_Code/SS1.c **** /* ===================================================================*/
 273:../Generated_Code/SS1.c **** LDD_TError SS1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
 274:../Generated_Code/SS1.c **** {
 282              		.loc 1 274 0
 283              		.cfi_startproc
 284 0000 80B5     		push	{r7, lr}
 285              	.LCFI6:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 7, -8
 288              		.cfi_offset 14, -4
 289 0002 84B0     		sub	sp, sp, #16
 290              	.LCFI7:
 291              		.cfi_def_cfa_offset 24
 292 0004 00AF     		add	r7, sp, #0
 293              	.LCFI8:
 294              		.cfi_def_cfa_register 7
 295 0006 F860     		str	r0, [r7, #12]
 296 0008 B960     		str	r1, [r7, #8]
 297 000a BB1D     		add	r3, r7, #6
 298 000c 1A80     		strh	r2, [r3]
 275:../Generated_Code/SS1.c ****   if (((SS1_TDeviceDataPtr)DeviceDataPtr)->InpDataNumReq != 0x00U) { /* Is the previous receive ope
 299              		.loc 1 275 0
 300 000e FB68     		ldr	r3, [r7, #12]
 301 0010 9B89     		ldrh	r3, [r3, #12]
 302 0012 002B     		cmp	r3, #0
 303 0014 01D0     		beq	.L9
 276:../Generated_Code/SS1.c ****     return ERR_BUSY;                   /* If yes then error */
 304              		.loc 1 276 0
 305 0016 0823     		mov	r3, #8
 306 0018 40E0     		b	.L10
 307              	.L9:
 277:../Generated_Code/SS1.c ****   }
 278:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 279:../Generated_Code/SS1.c ****   EnterCritical();
 308              		.loc 1 279 0
 309 001a 224B     		ldr	r3, .L14
 310 001c 1B78     		ldrb	r3, [r3]
 311 001e DBB2     		uxtb	r3, r3
 312 0020 0133     		add	r3, r3, #1
 313 0022 DBB2     		uxtb	r3, r3
 314 0024 1F4A     		ldr	r2, .L14
 315 0026 191C     		add	r1, r3, #0
 316 0028 1170     		strb	r1, [r2]
 317 002a 012B     		cmp	r3, #1
 318 002c 04D1     		bne	.L11
 319              		.loc 1 279 0 is_stmt 0
 320 002e 1E4B     		ldr	r3, .L14+4
 321              	@ 279 "../Generated_Code/SS1.c" 1
 322 0030 EFF31080 		MRS R0, PRIMASK
 323 0034 72B6     		CPSID i
 324 0036 1870     		STRB R0, [r3]
 325              	@ 0 "" 2
 326              		.code	16
 327              	.L11:
 280:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->InpDataPtr = (uint8_t*)BufferPtr; /* Store a pointer to the 
 328              		.loc 1 280 0 is_stmt 1
 329 0038 FB68     		ldr	r3, [r7, #12]
 330 003a BA68     		ldr	r2, [r7, #8]
 331 003c 9A60     		str	r2, [r3, #8]
 281:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->InpDataNumReq = Size; /* Store a number of characters to be 
 332              		.loc 1 281 0
 333 003e FB68     		ldr	r3, [r7, #12]
 334 0040 BA1D     		add	r2, r7, #6
 335 0042 1288     		ldrh	r2, [r2]
 336 0044 9A81     		strh	r2, [r3, #12]
 282:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->InpRecvDataNum = 0x00U; /* Set number of received characters
 337              		.loc 1 282 0
 338 0046 FB68     		ldr	r3, [r7, #12]
 339 0048 0022     		mov	r2, #0
 340 004a 9A80     		strh	r2, [r3, #4]
 283:../Generated_Code/SS1.c ****   if ((SPI_PDD_ReadStatusReg(SPI1_BASE_PTR) & SPI_PDD_RX_BUFFER_FULL) != 0U) {
 341              		.loc 1 283 0
 342 004c 174B     		ldr	r3, .L14+8
 343 004e DB78     		ldrb	r3, [r3, #3]
 344 0050 DBB2     		uxtb	r3, r3
 345 0052 DBB2     		uxtb	r3, r3
 346 0054 5BB2     		sxtb	r3, r3
 347 0056 002B     		cmp	r3, #0
 348 0058 01DA     		bge	.L12
 284:../Generated_Code/SS1.c ****     (void)SPI_PDD_ReadData8bit(SPI1_BASE_PTR); /* Dummy read of the data register */
 349              		.loc 1 284 0
 350 005a 144B     		ldr	r3, .L14+8
 351 005c 5B79     		ldrb	r3, [r3, #5]
 352              	.L12:
 285:../Generated_Code/SS1.c ****   }
 286:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->SerFlag &= (uint8_t)(~(uint8_t)BLOCK_RECEIVED); /* Clear dat
 353              		.loc 1 286 0
 354 005e FB68     		ldr	r3, [r7, #12]
 355 0060 9B7D     		ldrb	r3, [r3, #22]
 356 0062 0222     		mov	r2, #2
 357 0064 9343     		bic	r3, r2
 358 0066 DAB2     		uxtb	r2, r3
 359 0068 FB68     		ldr	r3, [r7, #12]
 360 006a 9A75     		strb	r2, [r3, #22]
 287:../Generated_Code/SS1.c ****   SPI_PDD_EnableInterruptMask(SPI1_BASE_PTR, SPI_PDD_RX_BUFFER_FULL_OR_FAULT); /* Enable Rx buffer 
 361              		.loc 1 287 0
 362 006c 0F4B     		ldr	r3, .L14+8
 363 006e 0F4A     		ldr	r2, .L14+8
 364 0070 1278     		ldrb	r2, [r2]
 365 0072 D2B2     		uxtb	r2, r2
 366 0074 8021     		mov	r1, #128
 367 0076 4942     		neg	r1, r1
 368 0078 0A43     		orr	r2, r1
 369 007a D2B2     		uxtb	r2, r2
 370 007c 1A70     		strb	r2, [r3]
 288:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 289:../Generated_Code/SS1.c ****   ExitCritical();
 371              		.loc 1 289 0
 372 007e 094B     		ldr	r3, .L14
 373 0080 1B78     		ldrb	r3, [r3]
 374 0082 DBB2     		uxtb	r3, r3
 375 0084 013B     		sub	r3, r3, #1
 376 0086 DBB2     		uxtb	r3, r3
 377 0088 064A     		ldr	r2, .L14
 378 008a 191C     		add	r1, r3, #0
 379 008c 1170     		strb	r1, [r2]
 380 008e 002B     		cmp	r3, #0
 381 0090 03D1     		bne	.L13
 382              		.loc 1 289 0 is_stmt 0
 383 0092 054B     		ldr	r3, .L14+4
 384              	@ 289 "../Generated_Code/SS1.c" 1
 385 0094 1878     		ldrb r0, [r3]
 386 0096 80F31088 		msr PRIMASK,r0;
 387              		
 388              	@ 0 "" 2
 389              		.code	16
 390              	.L13:
 290:../Generated_Code/SS1.c ****   return ERR_OK;                       /* OK */
 391              		.loc 1 290 0 is_stmt 1
 392 009a 0023     		mov	r3, #0
 393              	.L10:
 291:../Generated_Code/SS1.c **** }
 394              		.loc 1 291 0
 395 009c 181C     		mov	r0, r3
 396 009e BD46     		mov	sp, r7
 397 00a0 04B0     		add	sp, sp, #16
 398              		@ sp needed for prologue
 399 00a2 80BD     		pop	{r7, pc}
 400              	.L15:
 401              		.align	2
 402              	.L14:
 403 00a4 00000000 		.word	SR_lock
 404 00a8 00000000 		.word	SR_reg
 405 00ac 00700740 		.word	1074229248
 406              		.cfi_endproc
 407              	.LFE2:
 409              		.section	.text.SS1_SendBlock,"ax",%progbits
 410              		.align	2
 411              		.global	SS1_SendBlock
 412              		.code	16
 413              		.thumb_func
 415              	SS1_SendBlock:
 416              	.LFB3:
 292:../Generated_Code/SS1.c **** 
 293:../Generated_Code/SS1.c **** /*
 294:../Generated_Code/SS1.c **** ** ===================================================================
 295:../Generated_Code/SS1.c **** **     Method      :  SS1_SendBlock (component SPISlave_LDD)
 296:../Generated_Code/SS1.c **** */
 297:../Generated_Code/SS1.c **** /*!
 298:../Generated_Code/SS1.c **** **     @brief
 299:../Generated_Code/SS1.c **** **         This method sends a block of characters. The method returns
 300:../Generated_Code/SS1.c **** **         ERR_BUSY when the previous block transmission is not
 301:../Generated_Code/SS1.c **** **         completed. The method <CancelBlockTransmission> can be used
 302:../Generated_Code/SS1.c **** **         to cancel a transmit operation.
 303:../Generated_Code/SS1.c **** **     @param
 304:../Generated_Code/SS1.c **** **         DeviceDataPtr   - Device data structure
 305:../Generated_Code/SS1.c **** **                           pointer returned by <Init> method.
 306:../Generated_Code/SS1.c **** **     @param
 307:../Generated_Code/SS1.c **** **         BufferPtr       - Pointer to the block of data
 308:../Generated_Code/SS1.c **** **                           to send.
 309:../Generated_Code/SS1.c **** **     @param
 310:../Generated_Code/SS1.c **** **         Size            - Number of characters in the buffer.
 311:../Generated_Code/SS1.c **** **     @return
 312:../Generated_Code/SS1.c **** **                         - Error code, possible codes:
 313:../Generated_Code/SS1.c **** **                           ERR_OK - OK
 314:../Generated_Code/SS1.c **** **                           ERR_DISABLED - Component is disabled
 315:../Generated_Code/SS1.c **** **                           ERR_BUSY - The previous transmit request is
 316:../Generated_Code/SS1.c **** **                           pending
 317:../Generated_Code/SS1.c **** */
 318:../Generated_Code/SS1.c **** /* ===================================================================*/
 319:../Generated_Code/SS1.c **** LDD_TError SS1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
 320:../Generated_Code/SS1.c **** {
 417              		.loc 1 320 0
 418              		.cfi_startproc
 419 0000 80B5     		push	{r7, lr}
 420              	.LCFI9:
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 7, -8
 423              		.cfi_offset 14, -4
 424 0002 84B0     		sub	sp, sp, #16
 425              	.LCFI10:
 426              		.cfi_def_cfa_offset 24
 427 0004 00AF     		add	r7, sp, #0
 428              	.LCFI11:
 429              		.cfi_def_cfa_register 7
 430 0006 F860     		str	r0, [r7, #12]
 431 0008 B960     		str	r1, [r7, #8]
 432 000a BB1D     		add	r3, r7, #6
 433 000c 1A80     		strh	r2, [r3]
 321:../Generated_Code/SS1.c ****   if (((SS1_TDeviceDataPtr)DeviceDataPtr)->OutDataNumReq != 0x00U) { /* Is the previous transmit op
 434              		.loc 1 321 0
 435 000e FB68     		ldr	r3, [r7, #12]
 436 0010 9B8A     		ldrh	r3, [r3, #20]
 437 0012 002B     		cmp	r3, #0
 438 0014 01D0     		beq	.L17
 322:../Generated_Code/SS1.c ****     return ERR_BUSY;                   /* If yes then error */
 439              		.loc 1 322 0
 440 0016 0823     		mov	r3, #8
 441 0018 36E0     		b	.L18
 442              	.L17:
 323:../Generated_Code/SS1.c ****   }
 324:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 325:../Generated_Code/SS1.c ****   EnterCritical();
 443              		.loc 1 325 0
 444 001a 1D4B     		ldr	r3, .L21
 445 001c 1B78     		ldrb	r3, [r3]
 446 001e DBB2     		uxtb	r3, r3
 447 0020 0133     		add	r3, r3, #1
 448 0022 DBB2     		uxtb	r3, r3
 449 0024 1A4A     		ldr	r2, .L21
 450 0026 191C     		add	r1, r3, #0
 451 0028 1170     		strb	r1, [r2]
 452 002a 012B     		cmp	r3, #1
 453 002c 04D1     		bne	.L19
 454              		.loc 1 325 0 is_stmt 0
 455 002e 194B     		ldr	r3, .L21+4
 456              	@ 325 "../Generated_Code/SS1.c" 1
 457 0030 EFF31080 		MRS R0, PRIMASK
 458 0034 72B6     		CPSID i
 459 0036 1870     		STRB R0, [r3]
 460              	@ 0 "" 2
 461              		.code	16
 462              	.L19:
 326:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the ou
 463              		.loc 1 326 0 is_stmt 1
 464 0038 FB68     		ldr	r3, [r7, #12]
 465 003a BA68     		ldr	r2, [r7, #8]
 466 003c 1A61     		str	r2, [r3, #16]
 327:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->OutDataNumReq = Size; /* Set the counter of characters to be
 467              		.loc 1 327 0
 468 003e FB68     		ldr	r3, [r7, #12]
 469 0040 BA1D     		add	r2, r7, #6
 470 0042 1288     		ldrh	r2, [r2]
 471 0044 9A82     		strh	r2, [r3, #20]
 328:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->OutSentDataNum = 0x00U; /* Clear the counter of sent charact
 472              		.loc 1 328 0
 473 0046 FB68     		ldr	r3, [r7, #12]
 474 0048 0022     		mov	r2, #0
 475 004a DA81     		strh	r2, [r3, #14]
 329:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->SerFlag &= (uint8_t)(~(uint8_t)BLOCK_SENT); /* Clear data bl
 476              		.loc 1 329 0
 477 004c FB68     		ldr	r3, [r7, #12]
 478 004e 9B7D     		ldrb	r3, [r3, #22]
 479 0050 0122     		mov	r2, #1
 480 0052 9343     		bic	r3, r2
 481 0054 DAB2     		uxtb	r2, r3
 482 0056 FB68     		ldr	r3, [r7, #12]
 483 0058 9A75     		strb	r2, [r3, #22]
 330:../Generated_Code/SS1.c ****   SPI_PDD_EnableInterruptMask(SPI1_BASE_PTR, SPI_PDD_TX_BUFFER_EMPTY); /* Enable Tx buffer empty in
 484              		.loc 1 330 0
 485 005a 0F4B     		ldr	r3, .L21+8
 486 005c 0E4A     		ldr	r2, .L21+8
 487 005e 1278     		ldrb	r2, [r2]
 488 0060 D2B2     		uxtb	r2, r2
 489 0062 2021     		mov	r1, #32
 490 0064 0A43     		orr	r2, r1
 491 0066 D2B2     		uxtb	r2, r2
 492 0068 1A70     		strb	r2, [r3]
 331:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 332:../Generated_Code/SS1.c ****   ExitCritical();
 493              		.loc 1 332 0
 494 006a 094B     		ldr	r3, .L21
 495 006c 1B78     		ldrb	r3, [r3]
 496 006e DBB2     		uxtb	r3, r3
 497 0070 013B     		sub	r3, r3, #1
 498 0072 DBB2     		uxtb	r3, r3
 499 0074 064A     		ldr	r2, .L21
 500 0076 191C     		add	r1, r3, #0
 501 0078 1170     		strb	r1, [r2]
 502 007a 002B     		cmp	r3, #0
 503 007c 03D1     		bne	.L20
 504              		.loc 1 332 0 is_stmt 0
 505 007e 054B     		ldr	r3, .L21+4
 506              	@ 332 "../Generated_Code/SS1.c" 1
 507 0080 1878     		ldrb r0, [r3]
 508 0082 80F31088 		msr PRIMASK,r0;
 509              		
 510              	@ 0 "" 2
 511              		.code	16
 512              	.L20:
 333:../Generated_Code/SS1.c ****   return ERR_OK;                       /* OK */
 513              		.loc 1 333 0 is_stmt 1
 514 0086 0023     		mov	r3, #0
 515              	.L18:
 334:../Generated_Code/SS1.c **** }
 516              		.loc 1 334 0
 517 0088 181C     		mov	r0, r3
 518 008a BD46     		mov	sp, r7
 519 008c 04B0     		add	sp, sp, #16
 520              		@ sp needed for prologue
 521 008e 80BD     		pop	{r7, pc}
 522              	.L22:
 523              		.align	2
 524              	.L21:
 525 0090 00000000 		.word	SR_lock
 526 0094 00000000 		.word	SR_reg
 527 0098 00700740 		.word	1074229248
 528              		.cfi_endproc
 529              	.LFE3:
 531              		.section	.text.SS1_GetReceivedDataNum,"ax",%progbits
 532              		.align	2
 533              		.global	SS1_GetReceivedDataNum
 534              		.code	16
 535              		.thumb_func
 537              	SS1_GetReceivedDataNum:
 538              	.LFB4:
 335:../Generated_Code/SS1.c **** 
 336:../Generated_Code/SS1.c **** /*
 337:../Generated_Code/SS1.c **** ** ===================================================================
 338:../Generated_Code/SS1.c **** **     Method      :  SS1_GetReceivedDataNum (component SPISlave_LDD)
 339:../Generated_Code/SS1.c **** */
 340:../Generated_Code/SS1.c **** /*!
 341:../Generated_Code/SS1.c **** **     @brief
 342:../Generated_Code/SS1.c **** **         Returns the number of received characters in the receive
 343:../Generated_Code/SS1.c **** **         buffer. This method is available only if the ReceiveBlock
 344:../Generated_Code/SS1.c **** **         method is enabled.
 345:../Generated_Code/SS1.c **** **     @param
 346:../Generated_Code/SS1.c **** **         DeviceDataPtr   - Device data structure
 347:../Generated_Code/SS1.c **** **                           pointer returned by <Init> method.
 348:../Generated_Code/SS1.c **** **     @return
 349:../Generated_Code/SS1.c **** **                         - The number of characters in the input
 350:../Generated_Code/SS1.c **** **                           buffer.
 351:../Generated_Code/SS1.c **** */
 352:../Generated_Code/SS1.c **** /* ===================================================================*/
 353:../Generated_Code/SS1.c **** uint16_t SS1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr)
 354:../Generated_Code/SS1.c **** {
 539              		.loc 1 354 0
 540              		.cfi_startproc
 541 0000 80B5     		push	{r7, lr}
 542              	.LCFI12:
 543              		.cfi_def_cfa_offset 8
 544              		.cfi_offset 7, -8
 545              		.cfi_offset 14, -4
 546 0002 82B0     		sub	sp, sp, #8
 547              	.LCFI13:
 548              		.cfi_def_cfa_offset 16
 549 0004 00AF     		add	r7, sp, #0
 550              	.LCFI14:
 551              		.cfi_def_cfa_register 7
 552 0006 7860     		str	r0, [r7, #4]
 355:../Generated_Code/SS1.c ****   return (((SS1_TDeviceDataPtr)DeviceDataPtr)->InpRecvDataNum); /* Return the number of received ch
 553              		.loc 1 355 0
 554 0008 7B68     		ldr	r3, [r7, #4]
 555 000a 9B88     		ldrh	r3, [r3, #4]
 356:../Generated_Code/SS1.c **** }
 556              		.loc 1 356 0
 557 000c 181C     		mov	r0, r3
 558 000e BD46     		mov	sp, r7
 559 0010 02B0     		add	sp, sp, #8
 560              		@ sp needed for prologue
 561 0012 80BD     		pop	{r7, pc}
 562              		.cfi_endproc
 563              	.LFE4:
 565              		.section	.text.SS1_GetSentDataNum,"ax",%progbits
 566              		.align	2
 567              		.global	SS1_GetSentDataNum
 568              		.code	16
 569              		.thumb_func
 571              	SS1_GetSentDataNum:
 572              	.LFB5:
 357:../Generated_Code/SS1.c **** 
 358:../Generated_Code/SS1.c **** /*
 359:../Generated_Code/SS1.c **** ** ===================================================================
 360:../Generated_Code/SS1.c **** **     Method      :  SS1_GetSentDataNum (component SPISlave_LDD)
 361:../Generated_Code/SS1.c **** */
 362:../Generated_Code/SS1.c **** /*!
 363:../Generated_Code/SS1.c **** **     @brief
 364:../Generated_Code/SS1.c **** **         Returns the number of sent characters. This method is
 365:../Generated_Code/SS1.c **** **         available only if method SendBlock is enabled.
 366:../Generated_Code/SS1.c **** **     @param
 367:../Generated_Code/SS1.c **** **         DeviceDataPtr   - Device data structure
 368:../Generated_Code/SS1.c **** **                           pointer returned by <Init> method.
 369:../Generated_Code/SS1.c **** **     @return
 370:../Generated_Code/SS1.c **** **                         - The number of characters in the output
 371:../Generated_Code/SS1.c **** **                           buffer.
 372:../Generated_Code/SS1.c **** */
 373:../Generated_Code/SS1.c **** /* ===================================================================*/
 374:../Generated_Code/SS1.c **** uint16_t SS1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr)
 375:../Generated_Code/SS1.c **** {
 573              		.loc 1 375 0
 574              		.cfi_startproc
 575 0000 80B5     		push	{r7, lr}
 576              	.LCFI15:
 577              		.cfi_def_cfa_offset 8
 578              		.cfi_offset 7, -8
 579              		.cfi_offset 14, -4
 580 0002 82B0     		sub	sp, sp, #8
 581              	.LCFI16:
 582              		.cfi_def_cfa_offset 16
 583 0004 00AF     		add	r7, sp, #0
 584              	.LCFI17:
 585              		.cfi_def_cfa_register 7
 586 0006 7860     		str	r0, [r7, #4]
 376:../Generated_Code/SS1.c ****   return (((SS1_TDeviceDataPtr)DeviceDataPtr)->OutSentDataNum); /* Return the number of sent charac
 587              		.loc 1 376 0
 588 0008 7B68     		ldr	r3, [r7, #4]
 589 000a DB89     		ldrh	r3, [r3, #14]
 377:../Generated_Code/SS1.c **** }
 590              		.loc 1 377 0
 591 000c 181C     		mov	r0, r3
 592 000e BD46     		mov	sp, r7
 593 0010 02B0     		add	sp, sp, #8
 594              		@ sp needed for prologue
 595 0012 80BD     		pop	{r7, pc}
 596              		.cfi_endproc
 597              	.LFE5:
 599              		.section	.text.SS1_GetBlockSentStatus,"ax",%progbits
 600              		.align	2
 601              		.global	SS1_GetBlockSentStatus
 602              		.code	16
 603              		.thumb_func
 605              	SS1_GetBlockSentStatus:
 606              	.LFB6:
 378:../Generated_Code/SS1.c **** 
 379:../Generated_Code/SS1.c **** /*
 380:../Generated_Code/SS1.c **** ** ===================================================================
 381:../Generated_Code/SS1.c **** **     Method      :  SS1_GetBlockSentStatus (component SPISlave_LDD)
 382:../Generated_Code/SS1.c **** */
 383:../Generated_Code/SS1.c **** /*!
 384:../Generated_Code/SS1.c **** **     @brief
 385:../Generated_Code/SS1.c **** **         This method returns whether the transmitter is finished
 386:../Generated_Code/SS1.c **** **         transmitting all data block. The status flag is accumulated,
 387:../Generated_Code/SS1.c **** **         after calling this method the status is returned and cleared
 388:../Generated_Code/SS1.c **** **         (set to "false" state). This method is available only if
 389:../Generated_Code/SS1.c **** **         method SendBlock is enabled.
 390:../Generated_Code/SS1.c **** **     @param
 391:../Generated_Code/SS1.c **** **         DeviceDataPtr   - Device data structure
 392:../Generated_Code/SS1.c **** **                           pointer returned by <Init> method.
 393:../Generated_Code/SS1.c **** **     @return
 394:../Generated_Code/SS1.c **** **                         - Return value:
 395:../Generated_Code/SS1.c **** **                           true - Data block is completely transmitted
 396:../Generated_Code/SS1.c **** **                           false - Data block isn't completely
 397:../Generated_Code/SS1.c **** **                           transmitted.
 398:../Generated_Code/SS1.c **** */
 399:../Generated_Code/SS1.c **** /* ===================================================================*/
 400:../Generated_Code/SS1.c **** bool SS1_GetBlockSentStatus(LDD_TDeviceData *DeviceDataPtr)
 401:../Generated_Code/SS1.c **** {
 607              		.loc 1 401 0
 608              		.cfi_startproc
 609 0000 80B5     		push	{r7, lr}
 610              	.LCFI18:
 611              		.cfi_def_cfa_offset 8
 612              		.cfi_offset 7, -8
 613              		.cfi_offset 14, -4
 614 0002 84B0     		sub	sp, sp, #16
 615              	.LCFI19:
 616              		.cfi_def_cfa_offset 24
 617 0004 00AF     		add	r7, sp, #0
 618              	.LCFI20:
 619              		.cfi_def_cfa_register 7
 620 0006 7860     		str	r0, [r7, #4]
 402:../Generated_Code/SS1.c ****   uint8_t Status;                      /* Temporary variable for flag saving */
 403:../Generated_Code/SS1.c **** 
 404:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 405:../Generated_Code/SS1.c ****   EnterCritical();
 621              		.loc 1 405 0
 622 0008 194B     		ldr	r3, .L31
 623 000a 1B78     		ldrb	r3, [r3]
 624 000c DBB2     		uxtb	r3, r3
 625 000e 0133     		add	r3, r3, #1
 626 0010 DBB2     		uxtb	r3, r3
 627 0012 174A     		ldr	r2, .L31
 628 0014 191C     		add	r1, r3, #0
 629 0016 1170     		strb	r1, [r2]
 630 0018 012B     		cmp	r3, #1
 631 001a 04D1     		bne	.L28
 632              		.loc 1 405 0 is_stmt 0
 633 001c 154B     		ldr	r3, .L31+4
 634              	@ 405 "../Generated_Code/SS1.c" 1
 635 001e EFF31080 		MRS R0, PRIMASK
 636 0022 72B6     		CPSID i
 637 0024 1870     		STRB R0, [r3]
 638              	@ 0 "" 2
 639              		.code	16
 640              	.L28:
 406:../Generated_Code/SS1.c ****   Status = ((SS1_TDeviceDataPtr)DeviceDataPtr)->SerFlag; /* Save flag for return */
 641              		.loc 1 406 0 is_stmt 1
 642 0026 3B1C     		mov	r3, r7
 643 0028 0F33     		add	r3, r3, #15
 644 002a 7A68     		ldr	r2, [r7, #4]
 645 002c 927D     		ldrb	r2, [r2, #22]
 646 002e 1A70     		strb	r2, [r3]
 407:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->SerFlag &= (uint8_t)(~(uint8_t)BLOCK_SENT); /* Clear data bl
 647              		.loc 1 407 0
 648 0030 7B68     		ldr	r3, [r7, #4]
 649 0032 9B7D     		ldrb	r3, [r3, #22]
 650 0034 0122     		mov	r2, #1
 651 0036 9343     		bic	r3, r2
 652 0038 DAB2     		uxtb	r2, r3
 653 003a 7B68     		ldr	r3, [r7, #4]
 654 003c 9A75     		strb	r2, [r3, #22]
 408:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 409:../Generated_Code/SS1.c ****   ExitCritical();
 655              		.loc 1 409 0
 656 003e 0C4B     		ldr	r3, .L31
 657 0040 1B78     		ldrb	r3, [r3]
 658 0042 DBB2     		uxtb	r3, r3
 659 0044 013B     		sub	r3, r3, #1
 660 0046 DBB2     		uxtb	r3, r3
 661 0048 094A     		ldr	r2, .L31
 662 004a 191C     		add	r1, r3, #0
 663 004c 1170     		strb	r1, [r2]
 664 004e 002B     		cmp	r3, #0
 665 0050 03D1     		bne	.L29
 666              		.loc 1 409 0 is_stmt 0
 667 0052 084B     		ldr	r3, .L31+4
 668              	@ 409 "../Generated_Code/SS1.c" 1
 669 0054 1878     		ldrb r0, [r3]
 670 0056 80F31088 		msr PRIMASK,r0;
 671              		
 672              	@ 0 "" 2
 673              		.code	16
 674              	.L29:
 410:../Generated_Code/SS1.c ****   return (bool)(((Status & BLOCK_SENT) != 0U)? TRUE : FALSE); /* Return saved status */
 675              		.loc 1 410 0 is_stmt 1
 676 005a 3B1C     		mov	r3, r7
 677 005c 0F33     		add	r3, r3, #15
 678 005e 1A78     		ldrb	r2, [r3]
 679 0060 0123     		mov	r3, #1
 680 0062 1340     		and	r3, r2
 681 0064 DBB2     		uxtb	r3, r3
 411:../Generated_Code/SS1.c **** }
 682              		.loc 1 411 0
 683 0066 181C     		mov	r0, r3
 684 0068 BD46     		mov	sp, r7
 685 006a 04B0     		add	sp, sp, #16
 686              		@ sp needed for prologue
 687 006c 80BD     		pop	{r7, pc}
 688              	.L32:
 689 006e C046     		.align	2
 690              	.L31:
 691 0070 00000000 		.word	SR_lock
 692 0074 00000000 		.word	SR_reg
 693              		.cfi_endproc
 694              	.LFE6:
 696              		.section	.text.SS1_GetBlockReceivedStatus,"ax",%progbits
 697              		.align	2
 698              		.global	SS1_GetBlockReceivedStatus
 699              		.code	16
 700              		.thumb_func
 702              	SS1_GetBlockReceivedStatus:
 703              	.LFB7:
 412:../Generated_Code/SS1.c **** 
 413:../Generated_Code/SS1.c **** /*
 414:../Generated_Code/SS1.c **** ** ===================================================================
 415:../Generated_Code/SS1.c **** **     Method      :  SS1_GetBlockReceivedStatus (component SPISlave_LDD)
 416:../Generated_Code/SS1.c **** */
 417:../Generated_Code/SS1.c **** /*!
 418:../Generated_Code/SS1.c **** **     @brief
 419:../Generated_Code/SS1.c **** **         This method returns whether the receiver is finished
 420:../Generated_Code/SS1.c **** **         reception of all data block. The status flag is accumulated,
 421:../Generated_Code/SS1.c **** **         after calling this method the status is returned and cleared
 422:../Generated_Code/SS1.c **** **         (set to "false" state). This method is available only if
 423:../Generated_Code/SS1.c **** **         method ReceiveBlock is enabled.
 424:../Generated_Code/SS1.c **** **     @param
 425:../Generated_Code/SS1.c **** **         DeviceDataPtr   - Device data structure
 426:../Generated_Code/SS1.c **** **                           pointer returned by <Init> method.
 427:../Generated_Code/SS1.c **** **     @return
 428:../Generated_Code/SS1.c **** **                         - Return value:
 429:../Generated_Code/SS1.c **** **                           true - Data block is completely received
 430:../Generated_Code/SS1.c **** **                           false - Data block isn't completely received
 431:../Generated_Code/SS1.c **** */
 432:../Generated_Code/SS1.c **** /* ===================================================================*/
 433:../Generated_Code/SS1.c **** bool SS1_GetBlockReceivedStatus(LDD_TDeviceData *DeviceDataPtr)
 434:../Generated_Code/SS1.c **** {
 704              		.loc 1 434 0
 705              		.cfi_startproc
 706 0000 80B5     		push	{r7, lr}
 707              	.LCFI21:
 708              		.cfi_def_cfa_offset 8
 709              		.cfi_offset 7, -8
 710              		.cfi_offset 14, -4
 711 0002 84B0     		sub	sp, sp, #16
 712              	.LCFI22:
 713              		.cfi_def_cfa_offset 24
 714 0004 00AF     		add	r7, sp, #0
 715              	.LCFI23:
 716              		.cfi_def_cfa_register 7
 717 0006 7860     		str	r0, [r7, #4]
 435:../Generated_Code/SS1.c ****   uint8_t Status;                      /* Temporary variable for flag saving */
 436:../Generated_Code/SS1.c **** 
 437:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 438:../Generated_Code/SS1.c ****   EnterCritical();
 718              		.loc 1 438 0
 719 0008 1A4B     		ldr	r3, .L39
 720 000a 1B78     		ldrb	r3, [r3]
 721 000c DBB2     		uxtb	r3, r3
 722 000e 0133     		add	r3, r3, #1
 723 0010 DBB2     		uxtb	r3, r3
 724 0012 184A     		ldr	r2, .L39
 725 0014 191C     		add	r1, r3, #0
 726 0016 1170     		strb	r1, [r2]
 727 0018 012B     		cmp	r3, #1
 728 001a 04D1     		bne	.L34
 729              		.loc 1 438 0 is_stmt 0
 730 001c 164B     		ldr	r3, .L39+4
 731              	@ 438 "../Generated_Code/SS1.c" 1
 732 001e EFF31080 		MRS R0, PRIMASK
 733 0022 72B6     		CPSID i
 734 0024 1870     		STRB R0, [r3]
 735              	@ 0 "" 2
 736              		.code	16
 737              	.L34:
 439:../Generated_Code/SS1.c ****   Status = ((SS1_TDeviceDataPtr)DeviceDataPtr)->SerFlag; /* Save flag for return */
 738              		.loc 1 439 0 is_stmt 1
 739 0026 3B1C     		mov	r3, r7
 740 0028 0F33     		add	r3, r3, #15
 741 002a 7A68     		ldr	r2, [r7, #4]
 742 002c 927D     		ldrb	r2, [r2, #22]
 743 002e 1A70     		strb	r2, [r3]
 440:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->SerFlag &= (uint8_t)(~(uint8_t)BLOCK_RECEIVED); /* Clear dat
 744              		.loc 1 440 0
 745 0030 7B68     		ldr	r3, [r7, #4]
 746 0032 9B7D     		ldrb	r3, [r3, #22]
 747 0034 0222     		mov	r2, #2
 748 0036 9343     		bic	r3, r2
 749 0038 DAB2     		uxtb	r2, r3
 750 003a 7B68     		ldr	r3, [r7, #4]
 751 003c 9A75     		strb	r2, [r3, #22]
 441:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 442:../Generated_Code/SS1.c ****   ExitCritical();
 752              		.loc 1 442 0
 753 003e 0D4B     		ldr	r3, .L39
 754 0040 1B78     		ldrb	r3, [r3]
 755 0042 DBB2     		uxtb	r3, r3
 756 0044 013B     		sub	r3, r3, #1
 757 0046 DBB2     		uxtb	r3, r3
 758 0048 0A4A     		ldr	r2, .L39
 759 004a 191C     		add	r1, r3, #0
 760 004c 1170     		strb	r1, [r2]
 761 004e 002B     		cmp	r3, #0
 762 0050 03D1     		bne	.L35
 763              		.loc 1 442 0 is_stmt 0
 764 0052 094B     		ldr	r3, .L39+4
 765              	@ 442 "../Generated_Code/SS1.c" 1
 766 0054 1878     		ldrb r0, [r3]
 767 0056 80F31088 		msr PRIMASK,r0;
 768              		
 769              	@ 0 "" 2
 770              		.code	16
 771              	.L35:
 443:../Generated_Code/SS1.c ****   return (bool)(((Status & BLOCK_RECEIVED) != 0U)? TRUE : FALSE); /* Return saved status */
 772              		.loc 1 443 0 is_stmt 1
 773 005a 3B1C     		mov	r3, r7
 774 005c 0F33     		add	r3, r3, #15
 775 005e 1A78     		ldrb	r2, [r3]
 776 0060 0223     		mov	r3, #2
 777 0062 1340     		and	r3, r2
 778 0064 01D0     		beq	.L36
 779              		.loc 1 443 0 is_stmt 0
 780 0066 0123     		mov	r3, #1
 781 0068 00E0     		b	.L37
 782              	.L36:
 783              		.loc 1 443 0
 784 006a 0023     		mov	r3, #0
 785              	.L37:
 444:../Generated_Code/SS1.c **** }
 786              		.loc 1 444 0 is_stmt 1
 787 006c 181C     		mov	r0, r3
 788 006e BD46     		mov	sp, r7
 789 0070 04B0     		add	sp, sp, #16
 790              		@ sp needed for prologue
 791 0072 80BD     		pop	{r7, pc}
 792              	.L40:
 793              		.align	2
 794              	.L39:
 795 0074 00000000 		.word	SR_lock
 796 0078 00000000 		.word	SR_reg
 797              		.cfi_endproc
 798              	.LFE7:
 800              		.section	.text.SS1_Interrupt,"ax",%progbits
 801              		.align	2
 802              		.global	SS1_Interrupt
 803              		.code	16
 804              		.thumb_func
 806              	SS1_Interrupt:
 807              	.LFB8:
 445:../Generated_Code/SS1.c **** 
 446:../Generated_Code/SS1.c **** /*
 447:../Generated_Code/SS1.c **** ** ===================================================================
 448:../Generated_Code/SS1.c **** **     Method      :  SS1_Interrupt (component SPISlave_LDD)
 449:../Generated_Code/SS1.c **** **
 450:../Generated_Code/SS1.c **** **     Description :
 451:../Generated_Code/SS1.c **** **         The ISR function handling the device receive/transmit 
 452:../Generated_Code/SS1.c **** **         interrupt.
 453:../Generated_Code/SS1.c **** **         This method is internal. It is used by Processor Expert only.
 454:../Generated_Code/SS1.c **** ** ===================================================================
 455:../Generated_Code/SS1.c **** */
 456:../Generated_Code/SS1.c **** PE_ISR(SS1_Interrupt)
 457:../Generated_Code/SS1.c **** {
 808              		.loc 1 457 0
 809              		.cfi_startproc
 810 0000 80B5     		push	{r7, lr}
 811              	.LCFI24:
 812              		.cfi_def_cfa_offset 8
 813              		.cfi_offset 7, -8
 814              		.cfi_offset 14, -4
 815 0002 82B0     		sub	sp, sp, #8
 816              	.LCFI25:
 817              		.cfi_def_cfa_offset 16
 818 0004 00AF     		add	r7, sp, #0
 819              	.LCFI26:
 820              		.cfi_def_cfa_register 7
 458:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
 459:../Generated_Code/SS1.c ****   SS1_TDeviceDataPtr DeviceDataPrv = INT_SPI1__DEFAULT_RTOS_ISRPARAM;
 821              		.loc 1 459 0
 822 0006 3B4B     		ldr	r3, .L45
 823 0008 1B68     		ldr	r3, [r3]
 824 000a 7B60     		str	r3, [r7, #4]
 460:../Generated_Code/SS1.c ****   uint8_t StatReg = SPI_PDD_ReadStatusReg(SPI1_BASE_PTR); /* Read status register */
 825              		.loc 1 460 0
 826 000c 3A4A     		ldr	r2, .L45+4
 827 000e FB1C     		add	r3, r7, #3
 828 0010 D278     		ldrb	r2, [r2, #3]
 829 0012 1A70     		strb	r2, [r3]
 461:../Generated_Code/SS1.c **** 
 462:../Generated_Code/SS1.c ****   (void)DeviceDataPrv;                 /* Supress unused variable warning if needed */
 463:../Generated_Code/SS1.c ****   if ((StatReg & SPI_PDD_RX_BUFFER_FULL) != 0U) { /* Is any char in HW Rx buffer? */
 830              		.loc 1 463 0
 831 0014 FB1C     		add	r3, r7, #3
 832 0016 1B78     		ldrb	r3, [r3]
 833 0018 5BB2     		sxtb	r3, r3
 834 001a 002B     		cmp	r3, #0
 835 001c 2FDA     		bge	.L42
 464:../Generated_Code/SS1.c ****     if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
 836              		.loc 1 464 0
 837 001e 7B68     		ldr	r3, [r7, #4]
 838 0020 9B89     		ldrh	r3, [r3, #12]
 839 0022 002B     		cmp	r3, #0
 840 0024 2BD0     		beq	.L42
 465:../Generated_Code/SS1.c ****       *(DeviceDataPrv->InpDataPtr++) = SPI_PDD_ReadData8bit(SPI1_BASE_PTR); /* Put a character to t
 841              		.loc 1 465 0
 842 0026 7B68     		ldr	r3, [r7, #4]
 843 0028 9B68     		ldr	r3, [r3, #8]
 844 002a 334A     		ldr	r2, .L45+4
 845 002c 5279     		ldrb	r2, [r2, #5]
 846 002e D2B2     		uxtb	r2, r2
 847 0030 1A70     		strb	r2, [r3]
 848 0032 5A1C     		add	r2, r3, #1
 849 0034 7B68     		ldr	r3, [r7, #4]
 850 0036 9A60     		str	r2, [r3, #8]
 466:../Generated_Code/SS1.c ****       DeviceDataPrv->InpRecvDataNum++; /* Increment received char. counter */
 851              		.loc 1 466 0
 852 0038 7B68     		ldr	r3, [r7, #4]
 853 003a 9B88     		ldrh	r3, [r3, #4]
 854 003c 0133     		add	r3, r3, #1
 855 003e 9AB2     		uxth	r2, r3
 856 0040 7B68     		ldr	r3, [r7, #4]
 857 0042 9A80     		strh	r2, [r3, #4]
 467:../Generated_Code/SS1.c ****       if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested numb
 858              		.loc 1 467 0
 859 0044 7B68     		ldr	r3, [r7, #4]
 860 0046 9A88     		ldrh	r2, [r3, #4]
 861 0048 7B68     		ldr	r3, [r7, #4]
 862 004a 9B89     		ldrh	r3, [r3, #12]
 863 004c 9A42     		cmp	r2, r3
 864 004e 16D1     		bne	.L42
 468:../Generated_Code/SS1.c ****         SPI_PDD_DisableInterruptMask(SPI1_BASE_PTR, SPI_PDD_RX_BUFFER_FULL_OR_FAULT); /* Disable Rx
 865              		.loc 1 468 0
 866 0050 294B     		ldr	r3, .L45+4
 867 0052 294A     		ldr	r2, .L45+4
 868 0054 1278     		ldrb	r2, [r2]
 869 0056 D1B2     		uxtb	r1, r2
 870 0058 7F22     		mov	r2, #127
 871 005a 0A40     		and	r2, r1
 872 005c D2B2     		uxtb	r2, r2
 873 005e 1A70     		strb	r2, [r3]
 469:../Generated_Code/SS1.c ****         DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters t
 874              		.loc 1 469 0
 875 0060 7B68     		ldr	r3, [r7, #4]
 876 0062 0022     		mov	r2, #0
 877 0064 9A81     		strh	r2, [r3, #12]
 470:../Generated_Code/SS1.c ****         DeviceDataPrv->SerFlag |= BLOCK_RECEIVED; /* Set data block received flag */
 878              		.loc 1 470 0
 879 0066 7B68     		ldr	r3, [r7, #4]
 880 0068 9B7D     		ldrb	r3, [r3, #22]
 881 006a 0222     		mov	r2, #2
 882 006c 1343     		orr	r3, r2
 883 006e DAB2     		uxtb	r2, r3
 884 0070 7B68     		ldr	r3, [r7, #4]
 885 0072 9A75     		strb	r2, [r3, #22]
 471:../Generated_Code/SS1.c ****         SS1_OnBlockReceived(DeviceDataPrv->UserData);
 886              		.loc 1 471 0
 887 0074 7B68     		ldr	r3, [r7, #4]
 888 0076 9B69     		ldr	r3, [r3, #24]
 889 0078 181C     		mov	r0, r3
 890 007a FFF7FEFF 		bl	SS1_OnBlockReceived
 891              	.L42:
 472:../Generated_Code/SS1.c ****       }
 473:../Generated_Code/SS1.c ****     }
 474:../Generated_Code/SS1.c ****   }
 475:../Generated_Code/SS1.c ****   if ((StatReg & SPI_PDD_TX_BUFFER_EMPTYG) != 0U) { /* Is HW Tx buffer empty? */
 892              		.loc 1 475 0
 893 007e FB1C     		add	r3, r7, #3
 894 0080 1A78     		ldrb	r2, [r3]
 895 0082 2023     		mov	r3, #32
 896 0084 1340     		and	r3, r2
 897 0086 31D0     		beq	.L41
 476:../Generated_Code/SS1.c ****     if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent charac
 898              		.loc 1 476 0
 899 0088 7B68     		ldr	r3, [r7, #4]
 900 008a DA89     		ldrh	r2, [r3, #14]
 901 008c 7B68     		ldr	r3, [r7, #4]
 902 008e 9B8A     		ldrh	r3, [r3, #20]
 903 0090 9A42     		cmp	r2, r3
 904 0092 23D2     		bcs	.L44
 477:../Generated_Code/SS1.c ****       SPI_PDD_WriteData8Bit(SPI1_BASE_PTR, (*((uint8_t *)DeviceDataPrv->OutDataPtr++))); /* Put a c
 905              		.loc 1 477 0
 906 0094 184A     		ldr	r2, .L45+4
 907 0096 7B68     		ldr	r3, [r7, #4]
 908 0098 1B69     		ldr	r3, [r3, #16]
 909 009a 1978     		ldrb	r1, [r3]
 910 009c 5171     		strb	r1, [r2, #5]
 911 009e 5A1C     		add	r2, r3, #1
 912 00a0 7B68     		ldr	r3, [r7, #4]
 913 00a2 1A61     		str	r2, [r3, #16]
 478:../Generated_Code/SS1.c ****       DeviceDataPrv->OutSentDataNum++; /* Increment the counter of sent characters. */
 914              		.loc 1 478 0
 915 00a4 7B68     		ldr	r3, [r7, #4]
 916 00a6 DB89     		ldrh	r3, [r3, #14]
 917 00a8 0133     		add	r3, r3, #1
 918 00aa 9AB2     		uxth	r2, r3
 919 00ac 7B68     		ldr	r3, [r7, #4]
 920 00ae DA81     		strh	r2, [r3, #14]
 479:../Generated_Code/SS1.c ****       if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
 921              		.loc 1 479 0
 922 00b0 7B68     		ldr	r3, [r7, #4]
 923 00b2 DA89     		ldrh	r2, [r3, #14]
 924 00b4 7B68     		ldr	r3, [r7, #4]
 925 00b6 9B8A     		ldrh	r3, [r3, #20]
 926 00b8 9A42     		cmp	r2, r3
 927 00ba 17D1     		bne	.L41
 480:../Generated_Code/SS1.c ****         DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by Send
 928              		.loc 1 480 0
 929 00bc 7B68     		ldr	r3, [r7, #4]
 930 00be 0022     		mov	r2, #0
 931 00c0 9A82     		strh	r2, [r3, #20]
 481:../Generated_Code/SS1.c ****         DeviceDataPrv->SerFlag |= BLOCK_SENT; /* Set data block sent flag */
 932              		.loc 1 481 0
 933 00c2 7B68     		ldr	r3, [r7, #4]
 934 00c4 9B7D     		ldrb	r3, [r3, #22]
 935 00c6 0122     		mov	r2, #1
 936 00c8 1343     		orr	r3, r2
 937 00ca DAB2     		uxtb	r2, r3
 938 00cc 7B68     		ldr	r3, [r7, #4]
 939 00ce 9A75     		strb	r2, [r3, #22]
 482:../Generated_Code/SS1.c ****         SS1_OnBlockSent(DeviceDataPrv->UserData);
 940              		.loc 1 482 0
 941 00d0 7B68     		ldr	r3, [r7, #4]
 942 00d2 9B69     		ldr	r3, [r3, #24]
 943 00d4 181C     		mov	r0, r3
 944 00d6 FFF7FEFF 		bl	SS1_OnBlockSent
 945 00da 07E0     		b	.L41
 946              	.L44:
 483:../Generated_Code/SS1.c ****       }
 484:../Generated_Code/SS1.c ****     } else {
 485:../Generated_Code/SS1.c ****       SPI_PDD_DisableInterruptMask(SPI1_BASE_PTR, SPI_PDD_TX_BUFFER_EMPTY); /* Disable TX interrupt
 947              		.loc 1 485 0
 948 00dc 064B     		ldr	r3, .L45+4
 949 00de 064A     		ldr	r2, .L45+4
 950 00e0 1278     		ldrb	r2, [r2]
 951 00e2 D2B2     		uxtb	r2, r2
 952 00e4 2021     		mov	r1, #32
 953 00e6 8A43     		bic	r2, r1
 954 00e8 D2B2     		uxtb	r2, r2
 955 00ea 1A70     		strb	r2, [r3]
 956              	.L41:
 486:../Generated_Code/SS1.c ****     }
 487:../Generated_Code/SS1.c ****   }
 488:../Generated_Code/SS1.c **** }
 957              		.loc 1 488 0
 958 00ec BD46     		mov	sp, r7
 959 00ee 02B0     		add	sp, sp, #8
 960              		@ sp needed for prologue
 961 00f0 80BD     		pop	{r7, pc}
 962              	.L46:
 963 00f2 C046     		.align	2
 964              	.L45:
 965 00f4 00000000 		.word	INT_SPI1__DEFAULT_RTOS_ISRPARAM
 966 00f8 00700740 		.word	1074229248
 967              		.cfi_endproc
 968              	.LFE8:
 970              		.text
 971              	.Letext0:
 972              		.file 2 "E:/Freescale/CW MCU v10.5/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 973              		.file 3 "D:/kuaipan/SEMG/FRDM_KL25Z/KL25_SPI_DMA_Master/Generated_Code/PE_Types.h"
 974              		.file 4 "D:/kuaipan/SEMG/FRDM_KL25Z/KL25_SPI_DMA_Master/Generated_Code/IO_Map.h"
 975              		.file 5 "D:/kuaipan/SEMG/FRDM_KL25Z/KL25_SPI_DMA_Master/Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 SS1.c
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:24     .bss.INT_SPI1__DEFAULT_RTOS_ISRPARAM:00000000 $d
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:27     .bss.INT_SPI1__DEFAULT_RTOS_ISRPARAM:00000000 INT_SPI1__DEFAULT_RTOS_ISRPARAM
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:30     .text.SS1_Init:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:35     .text.SS1_Init:00000000 SS1_Init
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:207    .text.SS1_Init:00000104 $d
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:220    .text.SS1_Deinit:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:225    .text.SS1_Deinit:00000000 SS1_Deinit
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:266    .text.SS1_Deinit:0000002c $d
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:275    .text.SS1_ReceiveBlock:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:280    .text.SS1_ReceiveBlock:00000000 SS1_ReceiveBlock
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:403    .text.SS1_ReceiveBlock:000000a4 $d
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:410    .text.SS1_SendBlock:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:415    .text.SS1_SendBlock:00000000 SS1_SendBlock
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:525    .text.SS1_SendBlock:00000090 $d
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:532    .text.SS1_GetReceivedDataNum:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:537    .text.SS1_GetReceivedDataNum:00000000 SS1_GetReceivedDataNum
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:566    .text.SS1_GetSentDataNum:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:571    .text.SS1_GetSentDataNum:00000000 SS1_GetSentDataNum
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:600    .text.SS1_GetBlockSentStatus:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:605    .text.SS1_GetBlockSentStatus:00000000 SS1_GetBlockSentStatus
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:691    .text.SS1_GetBlockSentStatus:00000070 $d
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:697    .text.SS1_GetBlockReceivedStatus:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:702    .text.SS1_GetBlockReceivedStatus:00000000 SS1_GetBlockReceivedStatus
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:795    .text.SS1_GetBlockReceivedStatus:00000074 $d
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:801    .text.SS1_Interrupt:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:806    .text.SS1_Interrupt:00000000 SS1_Interrupt
C:\Users\lab\AppData\Local\Temp\cczQePK4.s:965    .text.SS1_Interrupt:000000f4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
SR_lock
SR_reg
SS1_OnBlockReceived
SS1_OnBlockSent

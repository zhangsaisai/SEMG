   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SR_reg,1,1
  18              		.global	SR_lock
  19              		.section	.bss.SR_lock,"aw",%nobits
  22              	SR_lock:
  23 0000 00       		.space	1
  24              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  25              		.align	2
  26              		.global	Cpu_INT_NMIInterrupt
  27              		.code	16
  28              		.thumb_func
  30              	Cpu_INT_NMIInterrupt:
  31              	.LFB0:
  32              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /* ###################################################################
   2:../Generated_Code/Cpu.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2015-09-10, 09:38, # CodeGen: 1
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         No public methods
  17:../Generated_Code/Cpu.c **** **
  18:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
  19:../Generated_Code/Cpu.c **** **     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
  20:../Generated_Code/Cpu.c **** **     
  21:../Generated_Code/Cpu.c **** **     http      : www.freescale.com
  22:../Generated_Code/Cpu.c **** **     mail      : support@freescale.com
  23:../Generated_Code/Cpu.c **** ** ###################################################################*/
  24:../Generated_Code/Cpu.c **** /*!
  25:../Generated_Code/Cpu.c **** ** @file Cpu.c
  26:../Generated_Code/Cpu.c **** ** @version 01.04
  27:../Generated_Code/Cpu.c **** ** @brief
  28:../Generated_Code/Cpu.c **** **
  29:../Generated_Code/Cpu.c **** */         
  30:../Generated_Code/Cpu.c **** /*!
  31:../Generated_Code/Cpu.c **** **  @addtogroup Cpu_module Cpu module documentation
  32:../Generated_Code/Cpu.c **** **  @{
  33:../Generated_Code/Cpu.c **** */         
  34:../Generated_Code/Cpu.c **** 
  35:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  36:../Generated_Code/Cpu.c **** 
  37:../Generated_Code/Cpu.c **** /* {Default RTOS Adapter} No RTOS includes */
  38:../Generated_Code/Cpu.c **** #include "CsIO1.h"
  39:../Generated_Code/Cpu.c **** #include "IO1.h"
  40:../Generated_Code/Cpu.c **** #include "SS1.h"
  41:../Generated_Code/Cpu.c **** #include "SM1.h"
  42:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  43:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  44:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  45:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  46:../Generated_Code/Cpu.c **** #include "Events.h"
  47:../Generated_Code/Cpu.c **** #include "Cpu.h"
  48:../Generated_Code/Cpu.c **** 
  49:../Generated_Code/Cpu.c **** #ifdef __cplusplus
  50:../Generated_Code/Cpu.c **** extern "C" {
  51:../Generated_Code/Cpu.c **** #endif 
  52:../Generated_Code/Cpu.c **** 
  53:../Generated_Code/Cpu.c **** /* Global variables */
  54:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  55:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  56:../Generated_Code/Cpu.c **** 
  57:../Generated_Code/Cpu.c **** 
  58:../Generated_Code/Cpu.c **** /*
  59:../Generated_Code/Cpu.c **** ** ===================================================================
  60:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MKL25Z128LK4)
  61:../Generated_Code/Cpu.c **** **
  62:../Generated_Code/Cpu.c **** **     Description :
  63:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
  64:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  65:../Generated_Code/Cpu.c **** ** ===================================================================
  66:../Generated_Code/Cpu.c **** */
  67:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_NMIInterrupt)
  68:../Generated_Code/Cpu.c **** {
  33              		.loc 1 68 0
  34              		.cfi_startproc
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 00AF     		add	r7, sp, #0
  41              	.LCFI1:
  42              		.cfi_def_cfa_register 7
  69:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT0();
  43              		.loc 1 69 0
  44 0004 FFF7FEFF 		bl	Cpu_OnNMIINT0
  70:../Generated_Code/Cpu.c **** }
  45              		.loc 1 70 0
  46 0008 BD46     		mov	sp, r7
  47              		@ sp needed for prologue
  48 000a 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE0:
  52              		.section	.text.Cpu_Interrupt,"ax",%progbits
  53              		.align	2
  54              		.global	Cpu_Interrupt
  55              		.code	16
  56              		.thumb_func
  58              	Cpu_Interrupt:
  59              	.LFB1:
  71:../Generated_Code/Cpu.c **** 
  72:../Generated_Code/Cpu.c **** /*
  73:../Generated_Code/Cpu.c **** ** ===================================================================
  74:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
  75:../Generated_Code/Cpu.c **** **
  76:../Generated_Code/Cpu.c **** **     Description :
  77:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
  78:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  79:../Generated_Code/Cpu.c **** ** ===================================================================
  80:../Generated_Code/Cpu.c **** */
  81:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
  82:../Generated_Code/Cpu.c **** {
  60              		.loc 1 82 0
  61              		.cfi_startproc
  62 0000 80B5     		push	{r7, lr}
  63              	.LCFI2:
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 00AF     		add	r7, sp, #0
  68              	.LCFI3:
  69              		.cfi_def_cfa_register 7
  83:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
  84:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  70              		.loc 1 84 0
  71              	@ 84 "../Generated_Code/Cpu.c" 1
  72 0004 FFBE     		BKPT 255
  73              	@ 0 "" 2
  85:../Generated_Code/Cpu.c **** }
  74              		.loc 1 85 0
  75              		.code	16
  76 0006 BD46     		mov	sp, r7
  77              		@ sp needed for prologue
  78 0008 80BD     		pop	{r7, pc}
  79              		.cfi_endproc
  80              	.LFE1:
  82 000a C046     		.section	.text.__init_hardware,"ax",%progbits
  83              		.align	2
  84              		.global	__init_hardware
  85              		.code	16
  86              		.thumb_func
  88              	__init_hardware:
  89              	.LFB2:
  86:../Generated_Code/Cpu.c **** 
  87:../Generated_Code/Cpu.c **** 
  88:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
  89:../Generated_Code/Cpu.c **** 
  90:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
  91:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
  92:../Generated_Code/Cpu.c **** void __init_hardware(void)
  93:../Generated_Code/Cpu.c **** {
  90              		.loc 1 93 0
  91              		.cfi_startproc
  92 0000 80B5     		push	{r7, lr}
  93              	.LCFI4:
  94              		.cfi_def_cfa_offset 8
  95              		.cfi_offset 7, -8
  96              		.cfi_offset 14, -4
  97 0002 00AF     		add	r7, sp, #0
  98              	.LCFI5:
  99              		.cfi_def_cfa_register 7
  94:../Generated_Code/Cpu.c **** 
  95:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
  96:../Generated_Code/Cpu.c **** 
  97:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
  98:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
  99:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
 100              		.loc 1 99 0
 101 0004 524A     		ldr	r2, .L10
 102 0006 5349     		ldr	r1, .L10+4
 103 0008 534B     		ldr	r3, .L10+8
 104 000a D150     		str	r1, [r2, r3]
 100:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
 101:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
 102:../Generated_Code/Cpu.c ****   SIM_COPC = SIM_COPC_COPT(0x00);                                   
 105              		.loc 1 102 0
 106 000c 534A     		ldr	r2, .L10+12
 107 000e 8823     		mov	r3, #136
 108 0010 5B01     		lsl	r3, r3, #5
 109 0012 0021     		mov	r1, #0
 110 0014 D150     		str	r1, [r2, r3]
 103:../Generated_Code/Cpu.c **** 
 104:../Generated_Code/Cpu.c ****   /* System clock initialization */
 105:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,?
 106:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescale
 111              		.loc 1 106 0
 112 0016 514A     		ldr	r2, .L10+12
 113 0018 514B     		ldr	r3, .L10+16
 114 001a C021     		mov	r1, #192
 115 001c 8902     		lsl	r1, r1, #10
 116 001e D150     		str	r1, [r2, r3]
 107:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTE=1,PORTD=1,PORTC=1,PORTA=1 */
 108:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
 117              		.loc 1 108 0
 118 0020 4E4A     		ldr	r2, .L10+12
 119 0022 4E49     		ldr	r1, .L10+12
 120 0024 4F4B     		ldr	r3, .L10+20
 121 0026 CB58     		ldr	r3, [r1, r3]
 122 0028 E821     		mov	r1, #232
 123 002a 8901     		lsl	r1, r1, #6
 124 002c 1943     		orr	r1, r3
 125 002e 4D4B     		ldr	r3, .L10+20
 126 0030 D150     		str	r1, [r2, r3]
 109:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTD_MASK |
 110:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTC_MASK |
 111:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
 112:../Generated_Code/Cpu.c ****   if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
 127              		.loc 1 112 0
 128 0032 4D4B     		ldr	r3, .L10+24
 129 0034 9B78     		ldrb	r3, [r3, #2]
 130 0036 DBB2     		uxtb	r3, r3
 131 0038 1A1C     		mov	r2, r3
 132 003a 0823     		mov	r3, #8
 133 003c 1340     		and	r3, r2
 134 003e 07D0     		beq	.L4
 113:../Generated_Code/Cpu.c ****     /* PMC_REGSC: ACKISO=1 */
 114:../Generated_Code/Cpu.c ****     PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
 135              		.loc 1 114 0
 136 0040 494B     		ldr	r3, .L10+24
 137 0042 494A     		ldr	r2, .L10+24
 138 0044 9278     		ldrb	r2, [r2, #2]
 139 0046 D2B2     		uxtb	r2, r2
 140 0048 0821     		mov	r1, #8
 141 004a 0A43     		orr	r2, r1
 142 004c D2B2     		uxtb	r2, r2
 143 004e 9A70     		strb	r2, [r3, #2]
 144              	.L4:
 115:../Generated_Code/Cpu.c ****   }
 116:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,?
 117:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x01) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescaler
 145              		.loc 1 117 0
 146 0050 424A     		ldr	r2, .L10+12
 147 0052 434B     		ldr	r3, .L10+16
 148 0054 4549     		ldr	r1, .L10+28
 149 0056 D150     		str	r1, [r2, r3]
 118:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=1 */
 119:../Generated_Code/Cpu.c ****   SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK; /* Select PLL as a clock source for various peripherals */
 150              		.loc 1 119 0
 151 0058 404A     		ldr	r2, .L10+12
 152 005a 4049     		ldr	r1, .L10+12
 153 005c 444B     		ldr	r3, .L10+32
 154 005e CB58     		ldr	r3, [r1, r3]
 155 0060 8021     		mov	r1, #128
 156 0062 4902     		lsl	r1, r1, #9
 157 0064 1943     		orr	r1, r3
 158 0066 424B     		ldr	r3, .L10+32
 159 0068 D150     		str	r1, [r2, r3]
 120:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=2 */
 121:../Generated_Code/Cpu.c ****   SIM_SOPT1 = (uint32_t)((SIM_SOPT1 & (uint32_t)~(uint32_t)(
 160              		.loc 1 121 0
 161 006a 3C4B     		ldr	r3, .L10+12
 162 006c 3B4A     		ldr	r2, .L10+12
 163 006e 1168     		ldr	r1, [r2]
 164 0070 404A     		ldr	r2, .L10+36
 165 0072 0A40     		and	r2, r1
 166 0074 8021     		mov	r1, #128
 167 0076 0903     		lsl	r1, r1, #12
 168 0078 0A43     		orr	r2, r1
 169 007a 1A60     		str	r2, [r3]
 122:../Generated_Code/Cpu.c ****                SIM_SOPT1_OSC32KSEL(0x01)
 123:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 124:../Generated_Code/Cpu.c ****                SIM_SOPT1_OSC32KSEL(0x02)
 125:../Generated_Code/Cpu.c ****               ));                      /* System oscillator drives 32 kHz clock for various periphe
 126:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 127:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 170              		.loc 1 127 0
 171 007c 374A     		ldr	r2, .L10+12
 172 007e 3749     		ldr	r1, .L10+12
 173 0080 3B4B     		ldr	r3, .L10+32
 174 0082 C958     		ldr	r1, [r1, r3]
 175 0084 3C4B     		ldr	r3, .L10+40
 176 0086 0B40     		and	r3, r1
 177 0088 8021     		mov	r1, #128
 178 008a 4904     		lsl	r1, r1, #17
 179 008c 1943     		orr	r1, r3
 180 008e 384B     		ldr	r3, .L10+32
 181 0090 D150     		str	r1, [r2, r3]
 128:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 129:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 130:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 131:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 132:../Generated_Code/Cpu.c ****   /* PORTA_PCR18: ISF=0,MUX=0 */
 133:../Generated_Code/Cpu.c ****   PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));                  
 182              		.loc 1 133 0
 183 0092 3A4B     		ldr	r3, .L10+44
 184 0094 394A     		ldr	r2, .L10+44
 185 0096 916C     		ldr	r1, [r2, #72]
 186 0098 394A     		ldr	r2, .L10+48
 187 009a 0A40     		and	r2, r1
 188 009c 9A64     		str	r2, [r3, #72]
 134:../Generated_Code/Cpu.c ****   /* PORTA_PCR19: ISF=0,MUX=0 */
 135:../Generated_Code/Cpu.c ****   PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));                  
 189              		.loc 1 135 0
 190 009e 374B     		ldr	r3, .L10+44
 191 00a0 364A     		ldr	r2, .L10+44
 192 00a2 D16C     		ldr	r1, [r2, #76]
 193 00a4 364A     		ldr	r2, .L10+48
 194 00a6 0A40     		and	r2, r1
 195 00a8 DA64     		str	r2, [r3, #76]
 136:../Generated_Code/Cpu.c ****   /* Switch to FBE Mode */
 137:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
 138:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK);                                   
 196              		.loc 1 138 0
 197 00aa 364B     		ldr	r3, .L10+52
 198 00ac 2422     		mov	r2, #36
 199 00ae 5A70     		strb	r2, [r3, #1]
 139:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=1,SC4P=0,SC8P=0,SC16P=1 */
 140:../Generated_Code/Cpu.c ****   OSC0_CR = (OSC_CR_ERCLKEN_MASK | OSC_CR_SC2P_MASK | OSC_CR_SC16P_MASK);                          
 200              		.loc 1 140 0
 201 00b0 354B     		ldr	r3, .L10+56
 202 00b2 8922     		mov	r2, #137
 203 00b4 1A70     		strb	r2, [r3]
 141:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 142:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);                         
 204              		.loc 1 142 0
 205 00b6 334B     		ldr	r3, .L10+52
 206 00b8 9A22     		mov	r2, #154
 207 00ba 1A70     		strb	r2, [r3]
 143:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 144:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));                      
 208              		.loc 1 144 0
 209 00bc 314B     		ldr	r3, .L10+52
 210 00be 314A     		ldr	r2, .L10+52
 211 00c0 D278     		ldrb	r2, [r2, #3]
 212 00c2 D1B2     		uxtb	r1, r2
 213 00c4 1F22     		mov	r2, #31
 214 00c6 0A40     		and	r2, r1
 215 00c8 D2B2     		uxtb	r2, r2
 216 00ca DA70     		strb	r2, [r3, #3]
 145:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=1 */
 146:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x01);                                   
 217              		.loc 1 146 0
 218 00cc 2D4B     		ldr	r3, .L10+52
 219 00ce 0122     		mov	r2, #1
 220 00d0 1A71     		strb	r2, [r3, #4]
 147:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 148:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_VDIV0(0x00);                                   
 221              		.loc 1 148 0
 222 00d2 2C4B     		ldr	r3, .L10+52
 223 00d4 0022     		mov	r2, #0
 224 00d6 5A71     		strb	r2, [r3, #5]
 149:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock
 225              		.loc 1 149 0
 226 00d8 C046     		mov	r8, r8
 227              	.L5:
 228              		.loc 1 149 0 is_stmt 0
 229 00da 2A4B     		ldr	r3, .L10+52
 230 00dc 9B79     		ldrb	r3, [r3, #6]
 231 00de DBB2     		uxtb	r3, r3
 232 00e0 1A1C     		mov	r2, r3
 233 00e2 1023     		mov	r3, #16
 234 00e4 1340     		and	r3, r2
 235 00e6 F8D1     		bne	.L5
 150:../Generated_Code/Cpu.c ****   }
 151:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 236              		.loc 1 151 0 is_stmt 1
 237 00e8 C046     		mov	r8, r8
 238              	.L6:
 239              		.loc 1 151 0 is_stmt 0
 240 00ea 264B     		ldr	r3, .L10+52
 241 00ec 9B79     		ldrb	r3, [r3, #6]
 242 00ee DBB2     		uxtb	r3, r3
 243 00f0 1A1C     		mov	r2, r3
 244 00f2 0C23     		mov	r3, #12
 245 00f4 1340     		and	r3, r2
 246 00f6 082B     		cmp	r3, #8
 247 00f8 F7D1     		bne	.L6
 152:../Generated_Code/Cpu.c ****   }
 153:../Generated_Code/Cpu.c ****   /* Switch to PBE Mode */
 154:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
 155:../Generated_Code/Cpu.c ****   MCG_C6 = (MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0x00));                                   
 248              		.loc 1 155 0 is_stmt 1
 249 00fa 224B     		ldr	r3, .L10+52
 250 00fc 4022     		mov	r2, #64
 251 00fe 5A71     		strb	r2, [r3, #5]
 156:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 252              		.loc 1 156 0
 253 0100 C046     		mov	r8, r8
 254              	.L7:
 255              		.loc 1 156 0 is_stmt 0
 256 0102 204B     		ldr	r3, .L10+52
 257 0104 9B79     		ldrb	r3, [r3, #6]
 258 0106 DBB2     		uxtb	r3, r3
 259 0108 1A1C     		mov	r2, r3
 260 010a 0C23     		mov	r3, #12
 261 010c 1340     		and	r3, r2
 262 010e 082B     		cmp	r3, #8
 263 0110 F7D1     		bne	.L7
 157:../Generated_Code/Cpu.c ****   }
 158:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
 264              		.loc 1 158 0 is_stmt 1
 265 0112 C046     		mov	r8, r8
 266              	.L8:
 267              		.loc 1 158 0 is_stmt 0
 268 0114 1B4B     		ldr	r3, .L10+52
 269 0116 9B79     		ldrb	r3, [r3, #6]
 270 0118 DBB2     		uxtb	r3, r3
 271 011a 1A1C     		mov	r2, r3
 272 011c 4023     		mov	r3, #64
 273 011e 1340     		and	r3, r2
 274 0120 F8D0     		beq	.L8
 159:../Generated_Code/Cpu.c ****   }
 160:../Generated_Code/Cpu.c ****   /* Switch to PEE Mode */
 161:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 162:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x00) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);                         
 275              		.loc 1 162 0 is_stmt 1
 276 0122 184B     		ldr	r3, .L10+52
 277 0124 1A22     		mov	r2, #26
 278 0126 1A70     		strb	r2, [r3]
 163:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
 279              		.loc 1 163 0
 280 0128 C046     		mov	r8, r8
 281              	.L9:
 282              		.loc 1 163 0 is_stmt 0
 283 012a 164B     		ldr	r3, .L10+52
 284 012c 9B79     		ldrb	r3, [r3, #6]
 285 012e DBB2     		uxtb	r3, r3
 286 0130 1A1C     		mov	r2, r3
 287 0132 0C23     		mov	r3, #12
 288 0134 1340     		and	r3, r2
 289 0136 0C2B     		cmp	r3, #12
 290 0138 F7D1     		bne	.L9
 164:../Generated_Code/Cpu.c ****   }
 165:../Generated_Code/Cpu.c ****   /* Initialization of the RTC_CLKIN pin */
 166:../Generated_Code/Cpu.c ****   /* PORTC_PCR1: ISF=0,MUX=1 */
 167:../Generated_Code/Cpu.c ****   PORTC_PCR1 = (uint32_t)((PORTC_PCR1 & (uint32_t)~(uint32_t)(
 291              		.loc 1 167 0 is_stmt 1
 292 013a 144B     		ldr	r3, .L10+60
 293 013c 134A     		ldr	r2, .L10+60
 294 013e 5168     		ldr	r1, [r2, #4]
 295 0140 0F4A     		ldr	r2, .L10+48
 296 0142 0A40     		and	r2, r1
 297 0144 8021     		mov	r1, #128
 298 0146 4900     		lsl	r1, r1, #1
 299 0148 0A43     		orr	r2, r1
 300 014a 5A60     		str	r2, [r3, #4]
 168:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK |
 169:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x06)
 170:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 171:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x01)
 172:../Generated_Code/Cpu.c ****                ));                                  
 173:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 174:../Generated_Code/Cpu.c **** 
 175:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 176:../Generated_Code/Cpu.c **** 
 177:../Generated_Code/Cpu.c **** }
 301              		.loc 1 177 0
 302 014c BD46     		mov	sp, r7
 303              		@ sp needed for prologue
 304 014e 80BD     		pop	{r7, pc}
 305              	.L11:
 306              		.align	2
 307              	.L10:
 308 0150 00E000E0 		.word	-536813568
 309 0154 00000000 		.word	__vect_table
 310 0158 080D0000 		.word	3336
 311 015c 00700440 		.word	1074032640
 312 0160 44100000 		.word	4164
 313 0164 38100000 		.word	4152
 314 0168 00D00740 		.word	1074253824
 315 016c 00000110 		.word	268500992
 316 0170 04100000 		.word	4100
 317 0174 FFFFF3FF 		.word	-786433
 318 0178 FFFFFFFC 		.word	-50331649
 319 017c 00900440 		.word	1074040832
 320 0180 FFF8FFFE 		.word	-16779009
 321 0184 00400640 		.word	1074151424
 322 0188 00500640 		.word	1074155520
 323 018c 00B00440 		.word	1074049024
 324              		.cfi_endproc
 325              	.LFE2:
 327              		.section	.text.PE_low_level_init,"ax",%progbits
 328              		.align	2
 329              		.global	PE_low_level_init
 330              		.code	16
 331              		.thumb_func
 333              	PE_low_level_init:
 334              	.LFB3:
 178:../Generated_Code/Cpu.c **** 
 179:../Generated_Code/Cpu.c **** 
 180:../Generated_Code/Cpu.c **** 
 181:../Generated_Code/Cpu.c **** /*
 182:../Generated_Code/Cpu.c **** ** ===================================================================
 183:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 184:../Generated_Code/Cpu.c **** **
 185:../Generated_Code/Cpu.c **** **     Description :
 186:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 187:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 188:../Generated_Code/Cpu.c **** **         application initialization code.
 189:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 190:../Generated_Code/Cpu.c **** ** ===================================================================
 191:../Generated_Code/Cpu.c **** */
 192:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 193:../Generated_Code/Cpu.c **** {
 335              		.loc 1 193 0
 336              		.cfi_startproc
 337 0000 80B5     		push	{r7, lr}
 338              	.LCFI6:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 7, -8
 341              		.cfi_offset 14, -4
 342 0002 00AF     		add	r7, sp, #0
 343              	.LCFI7:
 344              		.cfi_def_cfa_register 7
 194:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 195:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 196:../Generated_Code/Cpu.c ****   #endif
 197:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 198:../Generated_Code/Cpu.c ****   /* PORTA_PCR4: ISF=0,MUX=7 */
 199:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 345              		.loc 1 199 0
 346 0004 2B4B     		ldr	r3, .L13
 347 0006 2B4A     		ldr	r2, .L13
 348 0008 1169     		ldr	r1, [r2, #16]
 349 000a 2B4A     		ldr	r2, .L13+4
 350 000c 0A40     		and	r2, r1
 351 000e E021     		mov	r1, #224
 352 0010 C900     		lsl	r1, r1, #3
 353 0012 0A43     		orr	r2, r1
 354 0014 1A61     		str	r2, [r3, #16]
 200:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK
 201:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 202:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x07)
 203:../Generated_Code/Cpu.c ****                ));                                  
 204:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 205:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 206:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));                                   
 355              		.loc 1 206 0
 356 0016 294B     		ldr	r3, .L13+8
 357 0018 284A     		ldr	r2, .L13+8
 358 001a 5279     		ldrb	r2, [r2, #5]
 359 001c D2B2     		uxtb	r2, r2
 360 001e 1F21     		mov	r1, #31
 361 0020 8A43     		bic	r2, r1
 362 0022 D2B2     		uxtb	r2, r2
 363 0024 5A71     		strb	r2, [r3, #5]
 207:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 208:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 364              		.loc 1 208 0
 365 0026 254B     		ldr	r3, .L13+8
 366 0028 244A     		ldr	r2, .L13+8
 367 002a 1279     		ldrb	r2, [r2, #4]
 368 002c D2B2     		uxtb	r2, r2
 369 002e 0721     		mov	r1, #7
 370 0030 8A43     		bic	r2, r1
 371 0032 D2B2     		uxtb	r2, r2
 372 0034 1A71     		strb	r2, [r3, #4]
 209:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 210:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 211:../Generated_Code/Cpu.c ****               );                                   
 212:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 213:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 214:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 373              		.loc 1 214 0
 374 0036 224B     		ldr	r3, .L13+12
 375 0038 214A     		ldr	r2, .L13+12
 376 003a 1278     		ldrb	r2, [r2]
 377 003c D2B2     		uxtb	r2, r2
 378 003e D2B2     		uxtb	r2, r2
 379 0040 7321     		mov	r1, #115
 380 0042 8A43     		bic	r2, r1
 381 0044 D2B2     		uxtb	r2, r2
 382 0046 5021     		mov	r1, #80
 383 0048 0A43     		orr	r2, r1
 384 004a D2B2     		uxtb	r2, r2
 385 004c D2B2     		uxtb	r2, r2
 386 004e 1A70     		strb	r2, [r3]
 215:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 216:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 217:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 218:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 219:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 220:../Generated_Code/Cpu.c ****                ));                                  
 221:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 222:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 387              		.loc 1 222 0
 388 0050 1B4B     		ldr	r3, .L13+12
 389 0052 1B4A     		ldr	r2, .L13+12
 390 0054 5278     		ldrb	r2, [r2, #1]
 391 0056 D2B2     		uxtb	r2, r2
 392 0058 D2B2     		uxtb	r2, r2
 393 005a 6321     		mov	r1, #99
 394 005c 8A43     		bic	r2, r1
 395 005e D2B2     		uxtb	r2, r2
 396 0060 4021     		mov	r1, #64
 397 0062 0A43     		orr	r2, r1
 398 0064 D2B2     		uxtb	r2, r2
 399 0066 D2B2     		uxtb	r2, r2
 400 0068 5A70     		strb	r2, [r3, #1]
 223:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 224:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 225:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 226:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 227:../Generated_Code/Cpu.c ****                ));                                  
 228:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 229:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 401              		.loc 1 229 0
 402 006a 154B     		ldr	r3, .L13+12
 403 006c 144A     		ldr	r2, .L13+12
 404 006e 9278     		ldrb	r2, [r2, #2]
 405 0070 D2B2     		uxtb	r2, r2
 406 0072 1921     		mov	r1, #25
 407 0074 8A43     		bic	r2, r1
 408 0076 D2B2     		uxtb	r2, r2
 409 0078 9A70     		strb	r2, [r3, #2]
 230:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 231:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 232:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 233:../Generated_Code/Cpu.c ****                );                                   
 234:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 235:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 410              		.loc 1 235 0
 411 007a 124B     		ldr	r3, .L13+16
 412 007c 0022     		mov	r2, #0
 413 007e 1A70     		strb	r2, [r3]
 236:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 237:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 238:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 414              		.loc 1 238 0
 415 0080 0C4B     		ldr	r3, .L13
 416 0082 0C4A     		ldr	r2, .L13
 417 0084 116D     		ldr	r1, [r2, #80]
 418 0086 0C4A     		ldr	r2, .L13+4
 419 0088 0A40     		and	r2, r1
 420 008a E021     		mov	r1, #224
 421 008c C900     		lsl	r1, r1, #3
 422 008e 0A43     		orr	r2, r1
 423 0090 1A65     		str	r2, [r3, #80]
 239:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 240:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 241:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 242:../Generated_Code/Cpu.c ****                 ));                                  
 243:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 244:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));                                   
 424              		.loc 1 244 0
 425 0092 0D4A     		ldr	r2, .L13+20
 426 0094 0C49     		ldr	r1, .L13+20
 427 0096 C123     		mov	r3, #193
 428 0098 9B00     		lsl	r3, r3, #2
 429 009a C958     		ldr	r1, [r1, r3]
 430 009c 0B4B     		ldr	r3, .L13+24
 431 009e 1940     		and	r1, r3
 432 00a0 C123     		mov	r3, #193
 433 00a2 9B00     		lsl	r3, r3, #2
 434 00a4 D150     		str	r1, [r2, r3]
 245:../Generated_Code/Cpu.c ****   /* ### Serial_LDD "IO1" component auto initialization. Auto initialization feature can be disable
 246:../Generated_Code/Cpu.c ****   (void)IO1_Init(NULL);
 435              		.loc 1 246 0
 436 00a6 0020     		mov	r0, #0
 437 00a8 FFF7FEFF 		bl	IO1_Init
 247:../Generated_Code/Cpu.c ****   __EI();
 438              		.loc 1 247 0
 439              	@ 247 "../Generated_Code/Cpu.c" 1
 440 00ac 62B6     		CPSIE i
 441              	@ 0 "" 2
 248:../Generated_Code/Cpu.c **** }
 442              		.loc 1 248 0
 443              		.code	16
 444 00ae BD46     		mov	sp, r7
 445              		@ sp needed for prologue
 446 00b0 80BD     		pop	{r7, pc}
 447              	.L14:
 448 00b2 C046     		.align	2
 449              	.L13:
 450 00b4 00900440 		.word	1074040832
 451 00b8 FFF8FFFE 		.word	-16779009
 452 00bc 00F00740 		.word	1074262016
 453 00c0 00D00740 		.word	1074253824
 454 00c4 00E00740 		.word	1074257920
 455 00c8 00E100E0 		.word	-536813312
 456 00cc FFFF00FF 		.word	-16711681
 457              		.cfi_endproc
 458              	.LFE3:
 460              		.text
 461              	.Letext0:
 462              		.file 2 "E:/Freescale/CW MCU v10.5/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 463              		.file 3 "../Generated_Code/IO_Map.h"
 464              		.file 4 "../Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
                            *COM*:00000001 SR_reg
C:\Users\lab\AppData\Local\Temp\ccaUrkNb.s:22     .bss.SR_lock:00000000 SR_lock
C:\Users\lab\AppData\Local\Temp\ccaUrkNb.s:23     .bss.SR_lock:00000000 $d
C:\Users\lab\AppData\Local\Temp\ccaUrkNb.s:25     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccaUrkNb.s:30     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\Users\lab\AppData\Local\Temp\ccaUrkNb.s:53     .text.Cpu_Interrupt:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccaUrkNb.s:58     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\Users\lab\AppData\Local\Temp\ccaUrkNb.s:83     .text.__init_hardware:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccaUrkNb.s:88     .text.__init_hardware:00000000 __init_hardware
C:\Users\lab\AppData\Local\Temp\ccaUrkNb.s:308    .text.__init_hardware:00000150 $d
C:\Users\lab\AppData\Local\Temp\ccaUrkNb.s:328    .text.PE_low_level_init:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccaUrkNb.s:333    .text.PE_low_level_init:00000000 PE_low_level_init
C:\Users\lab\AppData\Local\Temp\ccaUrkNb.s:450    .text.PE_low_level_init:000000b4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Cpu_OnNMIINT0
__vect_table
IO1_Init

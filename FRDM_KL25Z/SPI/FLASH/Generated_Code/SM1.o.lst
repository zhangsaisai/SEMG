   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"SM1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	28
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              		.section	.bss.INT_SPI0__DEFAULT_RTOS_ISRPARAM,"aw",%nobits
  24              		.align	2
  27              	INT_SPI0__DEFAULT_RTOS_ISRPARAM:
  28 0000 00000000 		.space	4
  29              		.section	.text.SM1_Init,"ax",%progbits
  30              		.align	2
  31              		.global	SM1_Init
  32              		.code	16
  33              		.thumb_func
  35              	SM1_Init:
  36              	.LFB0:
  37              		.file 1 "../Generated_Code/SM1.c"
   1:../Generated_Code/SM1.c **** /* ###################################################################
   2:../Generated_Code/SM1.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/SM1.c **** **     Filename    : SM1.c
   4:../Generated_Code/SM1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/SM1.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/SM1.c **** **     Component   : SPIMaster_LDD
   7:../Generated_Code/SM1.c **** **     Version     : Component 01.109, Driver 01.02, CPU db: 3.00.000
   8:../Generated_Code/SM1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/SM1.c **** **     Date/Time   : 2015-09-10, 09:38, # CodeGen: 1
  10:../Generated_Code/SM1.c **** **     Abstract    :
  11:../Generated_Code/SM1.c **** **         This component "SPIMaster_LDD" implements MASTER part of synchronous
  12:../Generated_Code/SM1.c **** **         serial master-slave communication.
  13:../Generated_Code/SM1.c **** **     Settings    :
  14:../Generated_Code/SM1.c **** **          Component name                                 : SM1
  15:../Generated_Code/SM1.c **** **          Device                                         : SPI0
  16:../Generated_Code/SM1.c **** **          Interrupt service/event                        : Enabled
  17:../Generated_Code/SM1.c **** **            Input interrupt                              : INT_SPI0
  18:../Generated_Code/SM1.c **** **            Input interrupt priority                     : medium priority
  19:../Generated_Code/SM1.c **** **            Output interrupt                             : INT_SPI0
  20:../Generated_Code/SM1.c **** **            Output interrupt priority                    : medium priority
  21:../Generated_Code/SM1.c **** **          Settings                                       : 
  22:../Generated_Code/SM1.c **** **            Input pin                                    : Enabled
  23:../Generated_Code/SM1.c **** **              Pin                                        : PTD3/SPI0_MISO/UART2_TX/TPM0_CH3/SPI0_
  24:../Generated_Code/SM1.c **** **              Pin signal                                 : 
  25:../Generated_Code/SM1.c **** **            Output pin                                   : Enabled
  26:../Generated_Code/SM1.c **** **              Pin                                        : PTD2/SPI0_MOSI/UART2_RX/TPM0_CH2/SPI0_
  27:../Generated_Code/SM1.c **** **              Pin signal                                 : 
  28:../Generated_Code/SM1.c **** **            Clock pin                                    : 
  29:../Generated_Code/SM1.c **** **              Pin                                        : ADC0_SE5b/PTD1/SPI0_SCK/TPM0_CH1
  30:../Generated_Code/SM1.c **** **              Pin signal                                 : 
  31:../Generated_Code/SM1.c **** **            Chip select list                             : 1
  32:../Generated_Code/SM1.c **** **              Chip select 0                              : 
  33:../Generated_Code/SM1.c **** **                Pin                                      : PTD0/SPI0_PCS0/TPM0_CH0
  34:../Generated_Code/SM1.c **** **                Pin signal                               : 
  35:../Generated_Code/SM1.c **** **                Active level                             : Low
  36:../Generated_Code/SM1.c **** **            Attribute set list                           : 1
  37:../Generated_Code/SM1.c **** **              Attribute set 0                            : 
  38:../Generated_Code/SM1.c **** **                Width                                    : 8 bits
  39:../Generated_Code/SM1.c **** **                MSB first                                : yes
  40:../Generated_Code/SM1.c **** **                Clock polarity                           : Low
  41:../Generated_Code/SM1.c **** **                Clock phase                              : Capture on leading edge
  42:../Generated_Code/SM1.c **** **                Parity                                   : None
  43:../Generated_Code/SM1.c **** **                Chip select toggling                     : yes
  44:../Generated_Code/SM1.c **** **                Clock rate index                         : 0
  45:../Generated_Code/SM1.c **** **            Clock rate                                   : 37.5 kHz
  46:../Generated_Code/SM1.c **** **            HW input buffer size                         : Max buffer size
  47:../Generated_Code/SM1.c **** **            HW input watermark                           : 1
  48:../Generated_Code/SM1.c **** **            Receiver DMA                                 : Disabled
  49:../Generated_Code/SM1.c **** **            HW output buffer size                        : Max buffer size
  50:../Generated_Code/SM1.c **** **            HW output watermark                          : 1
  51:../Generated_Code/SM1.c **** **            Transmitter DMA                              : Disabled
  52:../Generated_Code/SM1.c **** **          Initialization                                 : 
  53:../Generated_Code/SM1.c **** **            Initial chip select                          : 0
  54:../Generated_Code/SM1.c **** **            Initial attribute set                        : 0
  55:../Generated_Code/SM1.c **** **            Enabled in init. code                        : yes
  56:../Generated_Code/SM1.c **** **            Auto initialization                          : no
  57:../Generated_Code/SM1.c **** **            Event mask                                   : 
  58:../Generated_Code/SM1.c **** **              OnBlockSent                                : Enabled
  59:../Generated_Code/SM1.c **** **              OnBlockReceived                            : Enabled
  60:../Generated_Code/SM1.c **** **              OnError                                    : Disabled
  61:../Generated_Code/SM1.c **** **          CPU clock/configuration selection              : 
  62:../Generated_Code/SM1.c **** **            Clock configuration 0                        : This component enabled
  63:../Generated_Code/SM1.c **** **            Clock configuration 1                        : This component disabled
  64:../Generated_Code/SM1.c **** **            Clock configuration 2                        : This component disabled
  65:../Generated_Code/SM1.c **** **            Clock configuration 3                        : This component disabled
  66:../Generated_Code/SM1.c **** **            Clock configuration 4                        : This component disabled
  67:../Generated_Code/SM1.c **** **            Clock configuration 5                        : This component disabled
  68:../Generated_Code/SM1.c **** **            Clock configuration 6                        : This component disabled
  69:../Generated_Code/SM1.c **** **            Clock configuration 7                        : This component disabled
  70:../Generated_Code/SM1.c **** **     Contents    :
  71:../Generated_Code/SM1.c **** **         Init                   - LDD_TDeviceData* SM1_Init(LDD_TUserData *UserDataPtr);
  72:../Generated_Code/SM1.c **** **         Deinit                 - void SM1_Deinit(LDD_TDeviceData *DeviceDataPtr);
  73:../Generated_Code/SM1.c **** **         SendBlock              - LDD_TError SM1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TD
  74:../Generated_Code/SM1.c **** **         ReceiveBlock           - LDD_TError SM1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD
  75:../Generated_Code/SM1.c **** **         GetSentDataNum         - uint16_t SM1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr);
  76:../Generated_Code/SM1.c **** **         GetReceivedDataNum     - uint16_t SM1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr)
  77:../Generated_Code/SM1.c **** **         GetBlockSentStatus     - bool SM1_GetBlockSentStatus(LDD_TDeviceData *DeviceDataPtr);
  78:../Generated_Code/SM1.c **** **         GetBlockReceivedStatus - bool SM1_GetBlockReceivedStatus(LDD_TDeviceData *DeviceDataPtr)
  79:../Generated_Code/SM1.c **** **
  80:../Generated_Code/SM1.c **** **     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
  81:../Generated_Code/SM1.c **** **     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
  82:../Generated_Code/SM1.c **** **     
  83:../Generated_Code/SM1.c **** **     http      : www.freescale.com
  84:../Generated_Code/SM1.c **** **     mail      : support@freescale.com
  85:../Generated_Code/SM1.c **** ** ###################################################################*/
  86:../Generated_Code/SM1.c **** /*!
  87:../Generated_Code/SM1.c **** ** @file SM1.c
  88:../Generated_Code/SM1.c **** ** @version 01.02
  89:../Generated_Code/SM1.c **** ** @brief
  90:../Generated_Code/SM1.c **** **         This component "SPIMaster_LDD" implements MASTER part of synchronous
  91:../Generated_Code/SM1.c **** **         serial master-slave communication.
  92:../Generated_Code/SM1.c **** */         
  93:../Generated_Code/SM1.c **** /*!
  94:../Generated_Code/SM1.c **** **  @addtogroup SM1_module SM1 module documentation
  95:../Generated_Code/SM1.c **** **  @{
  96:../Generated_Code/SM1.c **** */         
  97:../Generated_Code/SM1.c **** 
  98:../Generated_Code/SM1.c **** /* MODULE SM1. */
  99:../Generated_Code/SM1.c **** /*lint -save  -e926 -e927 -e928 -e929 Disable MISRA rule (11.4) checking. */
 100:../Generated_Code/SM1.c **** 
 101:../Generated_Code/SM1.c **** #include "Events.h"
 102:../Generated_Code/SM1.c **** #include "SM1.h"
 103:../Generated_Code/SM1.c **** /* {Default RTOS Adapter} No RTOS includes */
 104:../Generated_Code/SM1.c **** 
 105:../Generated_Code/SM1.c **** #ifdef __cplusplus
 106:../Generated_Code/SM1.c **** extern "C" {
 107:../Generated_Code/SM1.c **** #endif 
 108:../Generated_Code/SM1.c **** 
 109:../Generated_Code/SM1.c **** #define AVAILABLE_EVENTS_MASK (LDD_SPIMASTER_ON_BLOCK_RECEIVED | LDD_SPIMASTER_ON_BLOCK_SENT)
 110:../Generated_Code/SM1.c **** 
 111:../Generated_Code/SM1.c **** /* These constants contain pins masks */
 112:../Generated_Code/SM1.c **** #define SM1_AVAILABLE_PIN_MASK (LDD_SPIMASTER_INPUT_PIN | LDD_SPIMASTER_OUTPUT_PIN | LDD_SPIMASTER_
 113:../Generated_Code/SM1.c **** #define BLOCK_SENT      0x01U          /* Data block sent flag */
 114:../Generated_Code/SM1.c **** #define BLOCK_RECEIVED  0x02U          /* Data block received flag */
 115:../Generated_Code/SM1.c **** 
 116:../Generated_Code/SM1.c **** typedef struct {
 117:../Generated_Code/SM1.c ****   LDD_SPIMASTER_TError ErrFlag;        /* Error flags */
 118:../Generated_Code/SM1.c ****   uint16_t InpRecvDataNum;             /* The counter of received characters */
 119:../Generated_Code/SM1.c ****   uint8_t *InpDataPtr;                 /* The buffer pointer for received characters */
 120:../Generated_Code/SM1.c ****   uint16_t InpDataNumReq;              /* The counter of characters to receive by ReceiveBlock() */
 121:../Generated_Code/SM1.c ****   uint16_t OutSentDataNum;             /* The counter of sent characters */
 122:../Generated_Code/SM1.c ****   uint8_t *OutDataPtr;                 /* The buffer pointer for data to be transmitted */
 123:../Generated_Code/SM1.c ****   uint16_t OutDataNumReq;              /* The counter of characters to be send by SendBlock() */
 124:../Generated_Code/SM1.c ****   uint8_t SerFlag;                     /* Flags for serial communication */
 125:../Generated_Code/SM1.c ****   LDD_TUserData *UserData;             /* User device data structure */
 126:../Generated_Code/SM1.c **** } SM1_TDeviceData;                     /* Device data structure type */
 127:../Generated_Code/SM1.c **** 
 128:../Generated_Code/SM1.c **** typedef SM1_TDeviceData* SM1_TDeviceDataPtr; /* Pointer to the device data structure */
 129:../Generated_Code/SM1.c **** 
 130:../Generated_Code/SM1.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 131:../Generated_Code/SM1.c **** static SM1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 132:../Generated_Code/SM1.c **** /* {Default RTOS Adapter} Global variable used for passing a parameter into ISR */
 133:../Generated_Code/SM1.c **** static SM1_TDeviceDataPtr INT_SPI0__DEFAULT_RTOS_ISRPARAM;
 134:../Generated_Code/SM1.c **** /* Internal method prototypes */
 135:../Generated_Code/SM1.c **** 
 136:../Generated_Code/SM1.c **** /*
 137:../Generated_Code/SM1.c **** ** ===================================================================
 138:../Generated_Code/SM1.c **** **     Method      :  SM1_Init (component SPIMaster_LDD)
 139:../Generated_Code/SM1.c **** */
 140:../Generated_Code/SM1.c **** /*!
 141:../Generated_Code/SM1.c **** **     @brief
 142:../Generated_Code/SM1.c **** **         Initializes the device. Allocates memory for the device data
 143:../Generated_Code/SM1.c **** **         structure, allocates interrupt vectors and sets interrupt
 144:../Generated_Code/SM1.c **** **         priority, sets pin routing, sets timing, etc.
 145:../Generated_Code/SM1.c **** **         If the "Enable in init. code" is set to "yes" value then the
 146:../Generated_Code/SM1.c **** **         device is also enabled(see the description of the Enable()
 147:../Generated_Code/SM1.c **** **         method). In this case the Enable() method is not necessary
 148:../Generated_Code/SM1.c **** **         and needn't to be generated. 
 149:../Generated_Code/SM1.c **** **         This method can be called only once. Before the second call
 150:../Generated_Code/SM1.c **** **         of Init() the Deinit() must be called first.
 151:../Generated_Code/SM1.c **** **     @param
 152:../Generated_Code/SM1.c **** **         UserDataPtr     - Pointer to the user or
 153:../Generated_Code/SM1.c **** **                           RTOS specific data. This pointer will be
 154:../Generated_Code/SM1.c **** **                           passed as an event or callback parameter.
 155:../Generated_Code/SM1.c **** **     @return
 156:../Generated_Code/SM1.c **** **                         - Device data structure pointer.
 157:../Generated_Code/SM1.c **** */
 158:../Generated_Code/SM1.c **** /* ===================================================================*/
 159:../Generated_Code/SM1.c **** LDD_TDeviceData* SM1_Init(LDD_TUserData *UserDataPtr)
 160:../Generated_Code/SM1.c **** {
  38              		.loc 1 160 0
  39              		.cfi_startproc
  40 0000 80B5     		push	{r7, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  45 0002 84B0     		sub	sp, sp, #16
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 24
  48 0004 00AF     		add	r7, sp, #0
  49              	.LCFI2:
  50              		.cfi_def_cfa_register 7
  51 0006 7860     		str	r0, [r7, #4]
 161:../Generated_Code/SM1.c ****   /* Allocate LDD device structure */
 162:../Generated_Code/SM1.c ****   SM1_TDeviceDataPtr DeviceDataPrv;
 163:../Generated_Code/SM1.c **** 
 164:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 165:../Generated_Code/SM1.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  52              		.loc 1 165 0
  53 0008 3C4B     		ldr	r3, .L3
  54 000a FB60     		str	r3, [r7, #12]
 166:../Generated_Code/SM1.c ****   DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */
  55              		.loc 1 166 0
  56 000c FB68     		ldr	r3, [r7, #12]
  57 000e 7A68     		ldr	r2, [r7, #4]
  58 0010 9A61     		str	r2, [r3, #24]
 167:../Generated_Code/SM1.c ****   /* Interrupt vector(s) allocation */
 168:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the glo
 169:../Generated_Code/SM1.c ****   INT_SPI0__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
  59              		.loc 1 169 0
  60 0012 3B4B     		ldr	r3, .L3+4
  61 0014 FA68     		ldr	r2, [r7, #12]
  62 0016 1A60     		str	r2, [r3]
 170:../Generated_Code/SM1.c ****   DeviceDataPrv->ErrFlag = 0x00U;      /* Clear error flags */
  63              		.loc 1 170 0
  64 0018 FB68     		ldr	r3, [r7, #12]
  65 001a 0022     		mov	r2, #0
  66 001c 1A60     		str	r2, [r3]
 171:../Generated_Code/SM1.c ****   /* Clear the receive counters and pointer */
 172:../Generated_Code/SM1.c ****   DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
  67              		.loc 1 172 0
  68 001e FB68     		ldr	r3, [r7, #12]
  69 0020 0022     		mov	r2, #0
  70 0022 9A80     		strh	r2, [r3, #4]
 173:../Generated_Code/SM1.c ****   DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlo
  71              		.loc 1 173 0
  72 0024 FB68     		ldr	r3, [r7, #12]
  73 0026 0022     		mov	r2, #0
  74 0028 9A81     		strh	r2, [r3, #12]
 174:../Generated_Code/SM1.c ****   DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
  75              		.loc 1 174 0
  76 002a FB68     		ldr	r3, [r7, #12]
  77 002c 0022     		mov	r2, #0
  78 002e 9A60     		str	r2, [r3, #8]
 175:../Generated_Code/SM1.c ****   /* Clear the transmit counters and pointer */
 176:../Generated_Code/SM1.c ****   DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
  79              		.loc 1 176 0
  80 0030 FB68     		ldr	r3, [r7, #12]
  81 0032 0022     		mov	r2, #0
  82 0034 DA81     		strh	r2, [r3, #14]
 177:../Generated_Code/SM1.c ****   DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock(
  83              		.loc 1 177 0
  84 0036 FB68     		ldr	r3, [r7, #12]
  85 0038 0022     		mov	r2, #0
  86 003a 9A82     		strh	r2, [r3, #20]
 178:../Generated_Code/SM1.c ****   DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  87              		.loc 1 178 0
  88 003c FB68     		ldr	r3, [r7, #12]
  89 003e 0022     		mov	r2, #0
  90 0040 1A61     		str	r2, [r3, #16]
 179:../Generated_Code/SM1.c ****   DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
  91              		.loc 1 179 0
  92 0042 FB68     		ldr	r3, [r7, #12]
  93 0044 0022     		mov	r2, #0
  94 0046 9A75     		strb	r2, [r3, #22]
 180:../Generated_Code/SM1.c ****   /* SIM_SCGC4: SPI0=1 */
 181:../Generated_Code/SM1.c ****   SIM_SCGC4 |= SIM_SCGC4_SPI0_MASK;                                   
  95              		.loc 1 181 0
  96 0048 2E4A     		ldr	r2, .L3+8
  97 004a 2E49     		ldr	r1, .L3+8
  98 004c 2E4B     		ldr	r3, .L3+12
  99 004e CB58     		ldr	r3, [r1, r3]
 100 0050 8021     		mov	r1, #128
 101 0052 C903     		lsl	r1, r1, #15
 102 0054 1943     		orr	r1, r3
 103 0056 2C4B     		ldr	r3, .L3+12
 104 0058 D150     		str	r1, [r2, r3]
 182:../Generated_Code/SM1.c ****   /* Interrupt vector(s) priority setting */
 183:../Generated_Code/SM1.c ****   /* NVIC_IPR2: PRI_10=0x80 */
 184:../Generated_Code/SM1.c ****   NVIC_IPR2 = (uint32_t)((NVIC_IPR2 & (uint32_t)~(uint32_t)(
 105              		.loc 1 184 0
 106 005a 2C4A     		ldr	r2, .L3+16
 107 005c 2B49     		ldr	r1, .L3+16
 108 005e C223     		mov	r3, #194
 109 0060 9B00     		lsl	r3, r3, #2
 110 0062 C958     		ldr	r1, [r1, r3]
 111 0064 2A4B     		ldr	r3, .L3+20
 112 0066 0B40     		and	r3, r1
 113 0068 8021     		mov	r1, #128
 114 006a 0904     		lsl	r1, r1, #16
 115 006c 1943     		orr	r1, r3
 116 006e C223     		mov	r3, #194
 117 0070 9B00     		lsl	r3, r3, #2
 118 0072 D150     		str	r1, [r2, r3]
 185:../Generated_Code/SM1.c ****                NVIC_IP_PRI_10(0x7F)
 186:../Generated_Code/SM1.c ****               )) | (uint32_t)(
 187:../Generated_Code/SM1.c ****                NVIC_IP_PRI_10(0x80)
 188:../Generated_Code/SM1.c ****               ));                                  
 189:../Generated_Code/SM1.c ****   /* NVIC_ISER: SETENA|=0x0400 */
 190:../Generated_Code/SM1.c ****   NVIC_ISER |= NVIC_ISER_SETENA(0x0400);                                   
 119              		.loc 1 190 0
 120 0074 254B     		ldr	r3, .L3+16
 121 0076 254A     		ldr	r2, .L3+16
 122 0078 1268     		ldr	r2, [r2]
 123 007a 8021     		mov	r1, #128
 124 007c C900     		lsl	r1, r1, #3
 125 007e 0A43     		orr	r2, r1
 126 0080 1A60     		str	r2, [r3]
 191:../Generated_Code/SM1.c ****   /* PORTD_PCR3: ISF=0,MUX=2 */
 192:../Generated_Code/SM1.c ****   PORTD_PCR3 = (uint32_t)((PORTD_PCR3 & (uint32_t)~(uint32_t)(
 127              		.loc 1 192 0
 128 0082 244B     		ldr	r3, .L3+24
 129 0084 234A     		ldr	r2, .L3+24
 130 0086 D168     		ldr	r1, [r2, #12]
 131 0088 234A     		ldr	r2, .L3+28
 132 008a 0A40     		and	r2, r1
 133 008c 8021     		mov	r1, #128
 134 008e 8900     		lsl	r1, r1, #2
 135 0090 0A43     		orr	r2, r1
 136 0092 DA60     		str	r2, [r3, #12]
 193:../Generated_Code/SM1.c ****                 PORT_PCR_ISF_MASK |
 194:../Generated_Code/SM1.c ****                 PORT_PCR_MUX(0x05)
 195:../Generated_Code/SM1.c ****                )) | (uint32_t)(
 196:../Generated_Code/SM1.c ****                 PORT_PCR_MUX(0x02)
 197:../Generated_Code/SM1.c ****                ));                                  
 198:../Generated_Code/SM1.c ****   /* PORTD_PCR2: ISF=0,MUX=2 */
 199:../Generated_Code/SM1.c ****   PORTD_PCR2 = (uint32_t)((PORTD_PCR2 & (uint32_t)~(uint32_t)(
 137              		.loc 1 199 0
 138 0094 1F4B     		ldr	r3, .L3+24
 139 0096 1F4A     		ldr	r2, .L3+24
 140 0098 9168     		ldr	r1, [r2, #8]
 141 009a 1F4A     		ldr	r2, .L3+28
 142 009c 0A40     		and	r2, r1
 143 009e 8021     		mov	r1, #128
 144 00a0 8900     		lsl	r1, r1, #2
 145 00a2 0A43     		orr	r2, r1
 146 00a4 9A60     		str	r2, [r3, #8]
 200:../Generated_Code/SM1.c ****                 PORT_PCR_ISF_MASK |
 201:../Generated_Code/SM1.c ****                 PORT_PCR_MUX(0x05)
 202:../Generated_Code/SM1.c ****                )) | (uint32_t)(
 203:../Generated_Code/SM1.c ****                 PORT_PCR_MUX(0x02)
 204:../Generated_Code/SM1.c ****                ));                                  
 205:../Generated_Code/SM1.c ****   /* PORTD_PCR1: ISF=0,MUX=2 */
 206:../Generated_Code/SM1.c ****   PORTD_PCR1 = (uint32_t)((PORTD_PCR1 & (uint32_t)~(uint32_t)(
 147              		.loc 1 206 0
 148 00a6 1B4B     		ldr	r3, .L3+24
 149 00a8 1A4A     		ldr	r2, .L3+24
 150 00aa 5168     		ldr	r1, [r2, #4]
 151 00ac 1A4A     		ldr	r2, .L3+28
 152 00ae 0A40     		and	r2, r1
 153 00b0 8021     		mov	r1, #128
 154 00b2 8900     		lsl	r1, r1, #2
 155 00b4 0A43     		orr	r2, r1
 156 00b6 5A60     		str	r2, [r3, #4]
 207:../Generated_Code/SM1.c ****                 PORT_PCR_ISF_MASK |
 208:../Generated_Code/SM1.c ****                 PORT_PCR_MUX(0x05)
 209:../Generated_Code/SM1.c ****                )) | (uint32_t)(
 210:../Generated_Code/SM1.c ****                 PORT_PCR_MUX(0x02)
 211:../Generated_Code/SM1.c ****                ));                                  
 212:../Generated_Code/SM1.c ****   /* PORTD_PCR0: ISF=0,MUX=2 */
 213:../Generated_Code/SM1.c ****   PORTD_PCR0 = (uint32_t)((PORTD_PCR0 & (uint32_t)~(uint32_t)(
 157              		.loc 1 213 0
 158 00b8 164B     		ldr	r3, .L3+24
 159 00ba 164A     		ldr	r2, .L3+24
 160 00bc 1168     		ldr	r1, [r2]
 161 00be 164A     		ldr	r2, .L3+28
 162 00c0 0A40     		and	r2, r1
 163 00c2 8021     		mov	r1, #128
 164 00c4 8900     		lsl	r1, r1, #2
 165 00c6 0A43     		orr	r2, r1
 166 00c8 1A60     		str	r2, [r3]
 214:../Generated_Code/SM1.c ****                 PORT_PCR_ISF_MASK |
 215:../Generated_Code/SM1.c ****                 PORT_PCR_MUX(0x05)
 216:../Generated_Code/SM1.c ****                )) | (uint32_t)(
 217:../Generated_Code/SM1.c ****                 PORT_PCR_MUX(0x02)
 218:../Generated_Code/SM1.c ****                ));                                  
 219:../Generated_Code/SM1.c ****   /* SPI0_C1: SPIE=0,SPE=0,SPTIE=0,MSTR=1,CPOL=0,CPHA=0,SSOE=1,LSBFE=0 */
 220:../Generated_Code/SM1.c ****   SPI0_C1 = (SPI_C1_MSTR_MASK | SPI_C1_SSOE_MASK); /* Set configuration register */
 167              		.loc 1 220 0
 168 00ca 144B     		ldr	r3, .L3+32
 169 00cc 1222     		mov	r2, #18
 170 00ce 1A70     		strb	r2, [r3]
 221:../Generated_Code/SM1.c ****   /* SPI0_C2: SPMIE=0,??=0,TXDMAE=0,MODFEN=1,BIDIROE=0,RXDMAE=0,SPISWAI=0,SPC0=0 */
 222:../Generated_Code/SM1.c ****   SPI0_C2 = SPI_C2_MODFEN_MASK;        /* Set configuration register */
 171              		.loc 1 222 0
 172 00d0 124B     		ldr	r3, .L3+32
 173 00d2 1022     		mov	r2, #16
 174 00d4 5A70     		strb	r2, [r3, #1]
 223:../Generated_Code/SM1.c ****   /* SPI0_BR: ??=0,SPPR=4,SPR=6 */
 224:../Generated_Code/SM1.c ****   SPI0_BR = (SPI_BR_SPPR(0x04) | SPI_BR_SPR(0x06)); /* Set baud rate register */
 175              		.loc 1 224 0
 176 00d6 114B     		ldr	r3, .L3+32
 177 00d8 4622     		mov	r2, #70
 178 00da 9A70     		strb	r2, [r3, #2]
 225:../Generated_Code/SM1.c ****   /* SPI0_C1: SPE=1 */
 226:../Generated_Code/SM1.c ****   SPI0_C1 |= SPI_C1_SPE_MASK;          /* Enable SPI module */
 179              		.loc 1 226 0
 180 00dc 0F4B     		ldr	r3, .L3+32
 181 00de 0F4A     		ldr	r2, .L3+32
 182 00e0 1278     		ldrb	r2, [r2]
 183 00e2 D2B2     		uxtb	r2, r2
 184 00e4 4021     		mov	r1, #64
 185 00e6 0A43     		orr	r2, r1
 186 00e8 D2B2     		uxtb	r2, r2
 187 00ea 1A70     		strb	r2, [r3]
 227:../Generated_Code/SM1.c ****   /* Registration of the device structure */
 228:../Generated_Code/SM1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_SM1_ID,DeviceDataPrv);
 188              		.loc 1 228 0
 189 00ec 0C4B     		ldr	r3, .L3+36
 190 00ee FA68     		ldr	r2, [r7, #12]
 191 00f0 9A60     		str	r2, [r3, #8]
 229:../Generated_Code/SM1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
 192              		.loc 1 229 0
 193 00f2 FB68     		ldr	r3, [r7, #12]
 230:../Generated_Code/SM1.c **** }
 194              		.loc 1 230 0
 195 00f4 181C     		mov	r0, r3
 196 00f6 BD46     		mov	sp, r7
 197 00f8 04B0     		add	sp, sp, #16
 198              		@ sp needed for prologue
 199 00fa 80BD     		pop	{r7, pc}
 200              	.L4:
 201              		.align	2
 202              	.L3:
 203 00fc 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 204 0100 00000000 		.word	INT_SPI0__DEFAULT_RTOS_ISRPARAM
 205 0104 00700440 		.word	1074032640
 206 0108 34100000 		.word	4148
 207 010c 00E100E0 		.word	-536813312
 208 0110 FFFF00FF 		.word	-16711681
 209 0114 00C00440 		.word	1074053120
 210 0118 FFF8FFFE 		.word	-16779009
 211 011c 00600740 		.word	1074225152
 212 0120 00000000 		.word	PE_LDD_DeviceDataList
 213              		.cfi_endproc
 214              	.LFE0:
 216              		.section	.text.SM1_Deinit,"ax",%progbits
 217              		.align	2
 218              		.global	SM1_Deinit
 219              		.code	16
 220              		.thumb_func
 222              	SM1_Deinit:
 223              	.LFB1:
 231:../Generated_Code/SM1.c **** 
 232:../Generated_Code/SM1.c **** /*
 233:../Generated_Code/SM1.c **** ** ===================================================================
 234:../Generated_Code/SM1.c **** **     Method      :  SM1_Deinit (component SPIMaster_LDD)
 235:../Generated_Code/SM1.c **** */
 236:../Generated_Code/SM1.c **** /*!
 237:../Generated_Code/SM1.c **** **     @brief
 238:../Generated_Code/SM1.c **** **         This method deinitializes the device. It switches off the
 239:../Generated_Code/SM1.c **** **         device, frees the device data structure memory, interrupts
 240:../Generated_Code/SM1.c **** **         vectors, etc.
 241:../Generated_Code/SM1.c **** **     @param
 242:../Generated_Code/SM1.c **** **         DeviceDataPtr   - Device data structure
 243:../Generated_Code/SM1.c **** **                           pointer returned by <Init> method.
 244:../Generated_Code/SM1.c **** */
 245:../Generated_Code/SM1.c **** /* ===================================================================*/
 246:../Generated_Code/SM1.c **** void SM1_Deinit(LDD_TDeviceData *DeviceDataPtr)
 247:../Generated_Code/SM1.c **** {
 224              		.loc 1 247 0
 225              		.cfi_startproc
 226 0000 80B5     		push	{r7, lr}
 227              	.LCFI3:
 228              		.cfi_def_cfa_offset 8
 229              		.cfi_offset 7, -8
 230              		.cfi_offset 14, -4
 231 0002 82B0     		sub	sp, sp, #8
 232              	.LCFI4:
 233              		.cfi_def_cfa_offset 16
 234 0004 00AF     		add	r7, sp, #0
 235              	.LCFI5:
 236              		.cfi_def_cfa_register 7
 237 0006 7860     		str	r0, [r7, #4]
 248:../Generated_Code/SM1.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 249:../Generated_Code/SM1.c ****   /* SPI0_C1: SPIE=0,SPE=0,SPTIE=0,MSTR=0,CPOL=0,CPHA=1,SSOE=0,LSBFE=0 */
 250:../Generated_Code/SM1.c ****   SPI0_C1 = SPI_C1_CPHA_MASK;          /* Disable device */
 238              		.loc 1 250 0
 239 0008 084B     		ldr	r3, .L6
 240 000a 0422     		mov	r2, #4
 241 000c 1A70     		strb	r2, [r3]
 251:../Generated_Code/SM1.c ****   /* Restoring the interrupt vector */
 252:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Restore interrupt vector: IVT is static, no code is generated */
 253:../Generated_Code/SM1.c ****   /* Unregistration of the device structure */
 254:../Generated_Code/SM1.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_SM1_ID);
 242              		.loc 1 254 0
 243 000e 084B     		ldr	r3, .L6+4
 244 0010 0022     		mov	r2, #0
 245 0012 9A60     		str	r2, [r3, #8]
 255:../Generated_Code/SM1.c ****   /* Deallocation of the device structure */
 256:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 257:../Generated_Code/SM1.c ****   /* SIM_SCGC4: SPI0=0 */
 258:../Generated_Code/SM1.c ****   SIM_SCGC4 &= (uint32_t)~(uint32_t)(SIM_SCGC4_SPI0_MASK);                                   
 246              		.loc 1 258 0
 247 0014 074A     		ldr	r2, .L6+8
 248 0016 0749     		ldr	r1, .L6+8
 249 0018 074B     		ldr	r3, .L6+12
 250 001a C958     		ldr	r1, [r1, r3]
 251 001c 074B     		ldr	r3, .L6+16
 252 001e 1940     		and	r1, r3
 253 0020 054B     		ldr	r3, .L6+12
 254 0022 D150     		str	r1, [r2, r3]
 259:../Generated_Code/SM1.c **** }
 255              		.loc 1 259 0
 256 0024 BD46     		mov	sp, r7
 257 0026 02B0     		add	sp, sp, #8
 258              		@ sp needed for prologue
 259 0028 80BD     		pop	{r7, pc}
 260              	.L7:
 261 002a C046     		.align	2
 262              	.L6:
 263 002c 00600740 		.word	1074225152
 264 0030 00000000 		.word	PE_LDD_DeviceDataList
 265 0034 00700440 		.word	1074032640
 266 0038 34100000 		.word	4148
 267 003c FFFFBFFF 		.word	-4194305
 268              		.cfi_endproc
 269              	.LFE1:
 271              		.section	.text.SM1_ReceiveBlock,"ax",%progbits
 272              		.align	2
 273              		.global	SM1_ReceiveBlock
 274              		.code	16
 275              		.thumb_func
 277              	SM1_ReceiveBlock:
 278              	.LFB2:
 260:../Generated_Code/SM1.c **** 
 261:../Generated_Code/SM1.c **** /*
 262:../Generated_Code/SM1.c **** ** ===================================================================
 263:../Generated_Code/SM1.c **** **     Method      :  SM1_ReceiveBlock (component SPIMaster_LDD)
 264:../Generated_Code/SM1.c **** */
 265:../Generated_Code/SM1.c **** /*!
 266:../Generated_Code/SM1.c **** **     @brief
 267:../Generated_Code/SM1.c **** **         This method specifies the number of data to receive. The
 268:../Generated_Code/SM1.c **** **         method returns ERR_BUSY until the specified number of
 269:../Generated_Code/SM1.c **** **         characters is received. The method <CancelBlockReception>
 270:../Generated_Code/SM1.c **** **         can be used to cancel a running receive operation.
 271:../Generated_Code/SM1.c **** **     @param
 272:../Generated_Code/SM1.c **** **         DeviceDataPtr   - Device data structure
 273:../Generated_Code/SM1.c **** **                           pointer returned by <Init> method.
 274:../Generated_Code/SM1.c **** **     @param
 275:../Generated_Code/SM1.c **** **         BufferPtr       - Pointer to A buffer where
 276:../Generated_Code/SM1.c **** **                           received characters will be stored.
 277:../Generated_Code/SM1.c **** **     @param
 278:../Generated_Code/SM1.c **** **         Size            - Size of the block
 279:../Generated_Code/SM1.c **** **     @return
 280:../Generated_Code/SM1.c **** **                         - Error code, possible codes:
 281:../Generated_Code/SM1.c **** **                           ERR_OK - OK
 282:../Generated_Code/SM1.c **** **                           ERR_SPEED - This device does not work in
 283:../Generated_Code/SM1.c **** **                           the active clock configuration
 284:../Generated_Code/SM1.c **** **                           ERR_DISABLED - Component is disabled
 285:../Generated_Code/SM1.c **** **                           ERR_BUSY - The previous receive request is
 286:../Generated_Code/SM1.c **** **                           pending
 287:../Generated_Code/SM1.c **** */
 288:../Generated_Code/SM1.c **** /* ===================================================================*/
 289:../Generated_Code/SM1.c **** LDD_TError SM1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
 290:../Generated_Code/SM1.c **** {
 279              		.loc 1 290 0
 280              		.cfi_startproc
 281 0000 80B5     		push	{r7, lr}
 282              	.LCFI6:
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 7, -8
 285              		.cfi_offset 14, -4
 286 0002 84B0     		sub	sp, sp, #16
 287              	.LCFI7:
 288              		.cfi_def_cfa_offset 24
 289 0004 00AF     		add	r7, sp, #0
 290              	.LCFI8:
 291              		.cfi_def_cfa_register 7
 292 0006 F860     		str	r0, [r7, #12]
 293 0008 B960     		str	r1, [r7, #8]
 294 000a BB1D     		add	r3, r7, #6
 295 000c 1A80     		strh	r2, [r3]
 291:../Generated_Code/SM1.c ****   if (((SM1_TDeviceDataPtr)DeviceDataPtr)->InpDataNumReq != 0x00U) { /* Is the previous receive ope
 296              		.loc 1 291 0
 297 000e FB68     		ldr	r3, [r7, #12]
 298 0010 9B89     		ldrh	r3, [r3, #12]
 299 0012 002B     		cmp	r3, #0
 300 0014 01D0     		beq	.L9
 292:../Generated_Code/SM1.c ****     return ERR_BUSY;                   /* If yes then error */
 301              		.loc 1 292 0
 302 0016 0823     		mov	r3, #8
 303 0018 40E0     		b	.L10
 304              	.L9:
 293:../Generated_Code/SM1.c ****   }
 294:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 295:../Generated_Code/SM1.c ****   EnterCritical();
 305              		.loc 1 295 0
 306 001a 224B     		ldr	r3, .L14
 307 001c 1B78     		ldrb	r3, [r3]
 308 001e DBB2     		uxtb	r3, r3
 309 0020 0133     		add	r3, r3, #1
 310 0022 DBB2     		uxtb	r3, r3
 311 0024 1F4A     		ldr	r2, .L14
 312 0026 191C     		add	r1, r3, #0
 313 0028 1170     		strb	r1, [r2]
 314 002a 012B     		cmp	r3, #1
 315 002c 04D1     		bne	.L11
 316              		.loc 1 295 0 is_stmt 0
 317 002e 1E4B     		ldr	r3, .L14+4
 318              	@ 295 "../Generated_Code/SM1.c" 1
 319 0030 EFF31080 		MRS R0, PRIMASK
 320 0034 72B6     		CPSID i
 321 0036 1870     		STRB R0, [r3]
 322              	@ 0 "" 2
 323              		.code	16
 324              	.L11:
 296:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->InpDataPtr = (uint8_t*)BufferPtr; /* Store a pointer to the 
 325              		.loc 1 296 0 is_stmt 1
 326 0038 FB68     		ldr	r3, [r7, #12]
 327 003a BA68     		ldr	r2, [r7, #8]
 328 003c 9A60     		str	r2, [r3, #8]
 297:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->InpDataNumReq = Size; /* Store a number of characters to be 
 329              		.loc 1 297 0
 330 003e FB68     		ldr	r3, [r7, #12]
 331 0040 BA1D     		add	r2, r7, #6
 332 0042 1288     		ldrh	r2, [r2]
 333 0044 9A81     		strh	r2, [r3, #12]
 298:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->InpRecvDataNum = 0x00U; /* Set number of received characters
 334              		.loc 1 298 0
 335 0046 FB68     		ldr	r3, [r7, #12]
 336 0048 0022     		mov	r2, #0
 337 004a 9A80     		strh	r2, [r3, #4]
 299:../Generated_Code/SM1.c ****   if ((SPI_PDD_ReadStatusReg(SPI0_BASE_PTR) & SPI_PDD_RX_BUFFER_FULL) != 0U) {
 338              		.loc 1 299 0
 339 004c 174B     		ldr	r3, .L14+8
 340 004e DB78     		ldrb	r3, [r3, #3]
 341 0050 DBB2     		uxtb	r3, r3
 342 0052 DBB2     		uxtb	r3, r3
 343 0054 5BB2     		sxtb	r3, r3
 344 0056 002B     		cmp	r3, #0
 345 0058 01DA     		bge	.L12
 300:../Generated_Code/SM1.c ****     (void)SPI_PDD_ReadData8bit(SPI0_BASE_PTR); /* Dummy read of the data register */
 346              		.loc 1 300 0
 347 005a 144B     		ldr	r3, .L14+8
 348 005c 5B79     		ldrb	r3, [r3, #5]
 349              	.L12:
 301:../Generated_Code/SM1.c ****   }
 302:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->SerFlag &= (uint8_t)(~(uint8_t)BLOCK_RECEIVED); /* Clear dat
 350              		.loc 1 302 0
 351 005e FB68     		ldr	r3, [r7, #12]
 352 0060 9B7D     		ldrb	r3, [r3, #22]
 353 0062 0222     		mov	r2, #2
 354 0064 9343     		bic	r3, r2
 355 0066 DAB2     		uxtb	r2, r3
 356 0068 FB68     		ldr	r3, [r7, #12]
 357 006a 9A75     		strb	r2, [r3, #22]
 303:../Generated_Code/SM1.c ****   SPI_PDD_EnableInterruptMask(SPI0_BASE_PTR, SPI_PDD_RX_BUFFER_FULL_OR_FAULT); /* Enable Rx buffer 
 358              		.loc 1 303 0
 359 006c 0F4B     		ldr	r3, .L14+8
 360 006e 0F4A     		ldr	r2, .L14+8
 361 0070 1278     		ldrb	r2, [r2]
 362 0072 D2B2     		uxtb	r2, r2
 363 0074 8021     		mov	r1, #128
 364 0076 4942     		neg	r1, r1
 365 0078 0A43     		orr	r2, r1
 366 007a D2B2     		uxtb	r2, r2
 367 007c 1A70     		strb	r2, [r3]
 304:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 305:../Generated_Code/SM1.c ****   ExitCritical();
 368              		.loc 1 305 0
 369 007e 094B     		ldr	r3, .L14
 370 0080 1B78     		ldrb	r3, [r3]
 371 0082 DBB2     		uxtb	r3, r3
 372 0084 013B     		sub	r3, r3, #1
 373 0086 DBB2     		uxtb	r3, r3
 374 0088 064A     		ldr	r2, .L14
 375 008a 191C     		add	r1, r3, #0
 376 008c 1170     		strb	r1, [r2]
 377 008e 002B     		cmp	r3, #0
 378 0090 03D1     		bne	.L13
 379              		.loc 1 305 0 is_stmt 0
 380 0092 054B     		ldr	r3, .L14+4
 381              	@ 305 "../Generated_Code/SM1.c" 1
 382 0094 1878     		ldrb r0, [r3]
 383 0096 80F31088 		msr PRIMASK,r0;
 384              		
 385              	@ 0 "" 2
 386              		.code	16
 387              	.L13:
 306:../Generated_Code/SM1.c ****   return ERR_OK;                       /* OK */
 388              		.loc 1 306 0 is_stmt 1
 389 009a 0023     		mov	r3, #0
 390              	.L10:
 307:../Generated_Code/SM1.c **** }
 391              		.loc 1 307 0
 392 009c 181C     		mov	r0, r3
 393 009e BD46     		mov	sp, r7
 394 00a0 04B0     		add	sp, sp, #16
 395              		@ sp needed for prologue
 396 00a2 80BD     		pop	{r7, pc}
 397              	.L15:
 398              		.align	2
 399              	.L14:
 400 00a4 00000000 		.word	SR_lock
 401 00a8 00000000 		.word	SR_reg
 402 00ac 00600740 		.word	1074225152
 403              		.cfi_endproc
 404              	.LFE2:
 406              		.section	.text.SM1_SendBlock,"ax",%progbits
 407              		.align	2
 408              		.global	SM1_SendBlock
 409              		.code	16
 410              		.thumb_func
 412              	SM1_SendBlock:
 413              	.LFB3:
 308:../Generated_Code/SM1.c **** 
 309:../Generated_Code/SM1.c **** /*
 310:../Generated_Code/SM1.c **** ** ===================================================================
 311:../Generated_Code/SM1.c **** **     Method      :  SM1_SendBlock (component SPIMaster_LDD)
 312:../Generated_Code/SM1.c **** */
 313:../Generated_Code/SM1.c **** /*!
 314:../Generated_Code/SM1.c **** **     @brief
 315:../Generated_Code/SM1.c **** **         This method sends a block of characters. The method returns
 316:../Generated_Code/SM1.c **** **         ERR_BUSY when the previous block transmission is not
 317:../Generated_Code/SM1.c **** **         completed. The method <CancelBlockTransmission> can be used
 318:../Generated_Code/SM1.c **** **         to cancel a transmit operation.
 319:../Generated_Code/SM1.c **** **     @param
 320:../Generated_Code/SM1.c **** **         DeviceDataPtr   - Device data structure
 321:../Generated_Code/SM1.c **** **                           pointer returned by <Init> method.
 322:../Generated_Code/SM1.c **** **     @param
 323:../Generated_Code/SM1.c **** **         BufferPtr       - Pointer to the block of data
 324:../Generated_Code/SM1.c **** **                           to send.
 325:../Generated_Code/SM1.c **** **     @param
 326:../Generated_Code/SM1.c **** **         Size            - Number of characters in the buffer.
 327:../Generated_Code/SM1.c **** **     @return
 328:../Generated_Code/SM1.c **** **                         - Error code, possible codes:
 329:../Generated_Code/SM1.c **** **                           ERR_OK - OK
 330:../Generated_Code/SM1.c **** **                           ERR_SPEED - This device does not work in
 331:../Generated_Code/SM1.c **** **                           the active clock configuration
 332:../Generated_Code/SM1.c **** **                           ERR_DISABLED - Component is disabled
 333:../Generated_Code/SM1.c **** **                           ERR_BUSY - The previous transmit request is
 334:../Generated_Code/SM1.c **** **                           pending
 335:../Generated_Code/SM1.c **** */
 336:../Generated_Code/SM1.c **** /* ===================================================================*/
 337:../Generated_Code/SM1.c **** LDD_TError SM1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
 338:../Generated_Code/SM1.c **** {
 414              		.loc 1 338 0
 415              		.cfi_startproc
 416 0000 80B5     		push	{r7, lr}
 417              	.LCFI9:
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 7, -8
 420              		.cfi_offset 14, -4
 421 0002 84B0     		sub	sp, sp, #16
 422              	.LCFI10:
 423              		.cfi_def_cfa_offset 24
 424 0004 00AF     		add	r7, sp, #0
 425              	.LCFI11:
 426              		.cfi_def_cfa_register 7
 427 0006 F860     		str	r0, [r7, #12]
 428 0008 B960     		str	r1, [r7, #8]
 429 000a BB1D     		add	r3, r7, #6
 430 000c 1A80     		strh	r2, [r3]
 339:../Generated_Code/SM1.c ****   if (((SM1_TDeviceDataPtr)DeviceDataPtr)->OutDataNumReq != 0x00U) { /* Is the previous transmit op
 431              		.loc 1 339 0
 432 000e FB68     		ldr	r3, [r7, #12]
 433 0010 9B8A     		ldrh	r3, [r3, #20]
 434 0012 002B     		cmp	r3, #0
 435 0014 01D0     		beq	.L17
 340:../Generated_Code/SM1.c ****     return ERR_BUSY;                   /* If yes then error */
 436              		.loc 1 340 0
 437 0016 0823     		mov	r3, #8
 438 0018 36E0     		b	.L18
 439              	.L17:
 341:../Generated_Code/SM1.c ****   }
 342:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 343:../Generated_Code/SM1.c ****   EnterCritical();
 440              		.loc 1 343 0
 441 001a 1D4B     		ldr	r3, .L21
 442 001c 1B78     		ldrb	r3, [r3]
 443 001e DBB2     		uxtb	r3, r3
 444 0020 0133     		add	r3, r3, #1
 445 0022 DBB2     		uxtb	r3, r3
 446 0024 1A4A     		ldr	r2, .L21
 447 0026 191C     		add	r1, r3, #0
 448 0028 1170     		strb	r1, [r2]
 449 002a 012B     		cmp	r3, #1
 450 002c 04D1     		bne	.L19
 451              		.loc 1 343 0 is_stmt 0
 452 002e 194B     		ldr	r3, .L21+4
 453              	@ 343 "../Generated_Code/SM1.c" 1
 454 0030 EFF31080 		MRS R0, PRIMASK
 455 0034 72B6     		CPSID i
 456 0036 1870     		STRB R0, [r3]
 457              	@ 0 "" 2
 458              		.code	16
 459              	.L19:
 344:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the ou
 460              		.loc 1 344 0 is_stmt 1
 461 0038 FB68     		ldr	r3, [r7, #12]
 462 003a BA68     		ldr	r2, [r7, #8]
 463 003c 1A61     		str	r2, [r3, #16]
 345:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->OutDataNumReq = Size; /* Set the counter of characters to be
 464              		.loc 1 345 0
 465 003e FB68     		ldr	r3, [r7, #12]
 466 0040 BA1D     		add	r2, r7, #6
 467 0042 1288     		ldrh	r2, [r2]
 468 0044 9A82     		strh	r2, [r3, #20]
 346:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->OutSentDataNum = 0x00U; /* Clear the counter of sent charact
 469              		.loc 1 346 0
 470 0046 FB68     		ldr	r3, [r7, #12]
 471 0048 0022     		mov	r2, #0
 472 004a DA81     		strh	r2, [r3, #14]
 347:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->SerFlag &= (uint8_t)(~(uint8_t)BLOCK_SENT); /* Clear data bl
 473              		.loc 1 347 0
 474 004c FB68     		ldr	r3, [r7, #12]
 475 004e 9B7D     		ldrb	r3, [r3, #22]
 476 0050 0122     		mov	r2, #1
 477 0052 9343     		bic	r3, r2
 478 0054 DAB2     		uxtb	r2, r3
 479 0056 FB68     		ldr	r3, [r7, #12]
 480 0058 9A75     		strb	r2, [r3, #22]
 348:../Generated_Code/SM1.c ****   SPI_PDD_EnableInterruptMask(SPI0_BASE_PTR, SPI_PDD_TX_BUFFER_EMPTY); /* Enable Tx buffer empty in
 481              		.loc 1 348 0
 482 005a 0F4B     		ldr	r3, .L21+8
 483 005c 0E4A     		ldr	r2, .L21+8
 484 005e 1278     		ldrb	r2, [r2]
 485 0060 D2B2     		uxtb	r2, r2
 486 0062 2021     		mov	r1, #32
 487 0064 0A43     		orr	r2, r1
 488 0066 D2B2     		uxtb	r2, r2
 489 0068 1A70     		strb	r2, [r3]
 349:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 350:../Generated_Code/SM1.c ****   ExitCritical();
 490              		.loc 1 350 0
 491 006a 094B     		ldr	r3, .L21
 492 006c 1B78     		ldrb	r3, [r3]
 493 006e DBB2     		uxtb	r3, r3
 494 0070 013B     		sub	r3, r3, #1
 495 0072 DBB2     		uxtb	r3, r3
 496 0074 064A     		ldr	r2, .L21
 497 0076 191C     		add	r1, r3, #0
 498 0078 1170     		strb	r1, [r2]
 499 007a 002B     		cmp	r3, #0
 500 007c 03D1     		bne	.L20
 501              		.loc 1 350 0 is_stmt 0
 502 007e 054B     		ldr	r3, .L21+4
 503              	@ 350 "../Generated_Code/SM1.c" 1
 504 0080 1878     		ldrb r0, [r3]
 505 0082 80F31088 		msr PRIMASK,r0;
 506              		
 507              	@ 0 "" 2
 508              		.code	16
 509              	.L20:
 351:../Generated_Code/SM1.c ****   return ERR_OK;                       /* OK */
 510              		.loc 1 351 0 is_stmt 1
 511 0086 0023     		mov	r3, #0
 512              	.L18:
 352:../Generated_Code/SM1.c **** }
 513              		.loc 1 352 0
 514 0088 181C     		mov	r0, r3
 515 008a BD46     		mov	sp, r7
 516 008c 04B0     		add	sp, sp, #16
 517              		@ sp needed for prologue
 518 008e 80BD     		pop	{r7, pc}
 519              	.L22:
 520              		.align	2
 521              	.L21:
 522 0090 00000000 		.word	SR_lock
 523 0094 00000000 		.word	SR_reg
 524 0098 00600740 		.word	1074225152
 525              		.cfi_endproc
 526              	.LFE3:
 528              		.section	.text.SM1_GetReceivedDataNum,"ax",%progbits
 529              		.align	2
 530              		.global	SM1_GetReceivedDataNum
 531              		.code	16
 532              		.thumb_func
 534              	SM1_GetReceivedDataNum:
 535              	.LFB4:
 353:../Generated_Code/SM1.c **** 
 354:../Generated_Code/SM1.c **** /*
 355:../Generated_Code/SM1.c **** ** ===================================================================
 356:../Generated_Code/SM1.c **** **     Method      :  SM1_GetReceivedDataNum (component SPIMaster_LDD)
 357:../Generated_Code/SM1.c **** */
 358:../Generated_Code/SM1.c **** /*!
 359:../Generated_Code/SM1.c **** **     @brief
 360:../Generated_Code/SM1.c **** **         Returns the number of received characters in the receive
 361:../Generated_Code/SM1.c **** **         buffer. This method is available only if the ReceiveBlock
 362:../Generated_Code/SM1.c **** **         method is enabled.
 363:../Generated_Code/SM1.c **** **     @param
 364:../Generated_Code/SM1.c **** **         DeviceDataPtr   - Device data structure
 365:../Generated_Code/SM1.c **** **                           pointer returned by <Init> method.
 366:../Generated_Code/SM1.c **** **     @return
 367:../Generated_Code/SM1.c **** **                         - The number of characters in the input
 368:../Generated_Code/SM1.c **** **                           buffer.
 369:../Generated_Code/SM1.c **** */
 370:../Generated_Code/SM1.c **** /* ===================================================================*/
 371:../Generated_Code/SM1.c **** uint16_t SM1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr)
 372:../Generated_Code/SM1.c **** {
 536              		.loc 1 372 0
 537              		.cfi_startproc
 538 0000 80B5     		push	{r7, lr}
 539              	.LCFI12:
 540              		.cfi_def_cfa_offset 8
 541              		.cfi_offset 7, -8
 542              		.cfi_offset 14, -4
 543 0002 82B0     		sub	sp, sp, #8
 544              	.LCFI13:
 545              		.cfi_def_cfa_offset 16
 546 0004 00AF     		add	r7, sp, #0
 547              	.LCFI14:
 548              		.cfi_def_cfa_register 7
 549 0006 7860     		str	r0, [r7, #4]
 373:../Generated_Code/SM1.c ****   return (((SM1_TDeviceDataPtr)DeviceDataPtr)->InpRecvDataNum); /* Return the number of received ch
 550              		.loc 1 373 0
 551 0008 7B68     		ldr	r3, [r7, #4]
 552 000a 9B88     		ldrh	r3, [r3, #4]
 374:../Generated_Code/SM1.c **** }
 553              		.loc 1 374 0
 554 000c 181C     		mov	r0, r3
 555 000e BD46     		mov	sp, r7
 556 0010 02B0     		add	sp, sp, #8
 557              		@ sp needed for prologue
 558 0012 80BD     		pop	{r7, pc}
 559              		.cfi_endproc
 560              	.LFE4:
 562              		.section	.text.SM1_GetSentDataNum,"ax",%progbits
 563              		.align	2
 564              		.global	SM1_GetSentDataNum
 565              		.code	16
 566              		.thumb_func
 568              	SM1_GetSentDataNum:
 569              	.LFB5:
 375:../Generated_Code/SM1.c **** 
 376:../Generated_Code/SM1.c **** /*
 377:../Generated_Code/SM1.c **** ** ===================================================================
 378:../Generated_Code/SM1.c **** **     Method      :  SM1_GetSentDataNum (component SPIMaster_LDD)
 379:../Generated_Code/SM1.c **** */
 380:../Generated_Code/SM1.c **** /*!
 381:../Generated_Code/SM1.c **** **     @brief
 382:../Generated_Code/SM1.c **** **         Returns the number of sent characters. This method is
 383:../Generated_Code/SM1.c **** **         available only if method SendBlock is enabled.
 384:../Generated_Code/SM1.c **** **     @param
 385:../Generated_Code/SM1.c **** **         DeviceDataPtr   - Device data structure
 386:../Generated_Code/SM1.c **** **                           pointer returned by <Init> method.
 387:../Generated_Code/SM1.c **** **     @return
 388:../Generated_Code/SM1.c **** **                         - The number of characters in the output
 389:../Generated_Code/SM1.c **** **                           buffer.
 390:../Generated_Code/SM1.c **** */
 391:../Generated_Code/SM1.c **** /* ===================================================================*/
 392:../Generated_Code/SM1.c **** uint16_t SM1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr)
 393:../Generated_Code/SM1.c **** {
 570              		.loc 1 393 0
 571              		.cfi_startproc
 572 0000 80B5     		push	{r7, lr}
 573              	.LCFI15:
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 7, -8
 576              		.cfi_offset 14, -4
 577 0002 82B0     		sub	sp, sp, #8
 578              	.LCFI16:
 579              		.cfi_def_cfa_offset 16
 580 0004 00AF     		add	r7, sp, #0
 581              	.LCFI17:
 582              		.cfi_def_cfa_register 7
 583 0006 7860     		str	r0, [r7, #4]
 394:../Generated_Code/SM1.c ****   return (((SM1_TDeviceDataPtr)DeviceDataPtr)->OutSentDataNum); /* Return the number of sent charac
 584              		.loc 1 394 0
 585 0008 7B68     		ldr	r3, [r7, #4]
 586 000a DB89     		ldrh	r3, [r3, #14]
 395:../Generated_Code/SM1.c **** }
 587              		.loc 1 395 0
 588 000c 181C     		mov	r0, r3
 589 000e BD46     		mov	sp, r7
 590 0010 02B0     		add	sp, sp, #8
 591              		@ sp needed for prologue
 592 0012 80BD     		pop	{r7, pc}
 593              		.cfi_endproc
 594              	.LFE5:
 596              		.section	.text.SM1_GetBlockSentStatus,"ax",%progbits
 597              		.align	2
 598              		.global	SM1_GetBlockSentStatus
 599              		.code	16
 600              		.thumb_func
 602              	SM1_GetBlockSentStatus:
 603              	.LFB6:
 396:../Generated_Code/SM1.c **** 
 397:../Generated_Code/SM1.c **** /*
 398:../Generated_Code/SM1.c **** ** ===================================================================
 399:../Generated_Code/SM1.c **** **     Method      :  SM1_GetBlockSentStatus (component SPIMaster_LDD)
 400:../Generated_Code/SM1.c **** */
 401:../Generated_Code/SM1.c **** /*!
 402:../Generated_Code/SM1.c **** **     @brief
 403:../Generated_Code/SM1.c **** **         This method returns whether the transmitter is finished
 404:../Generated_Code/SM1.c **** **         transmitting all data block. The status flag is accumulated,
 405:../Generated_Code/SM1.c **** **         after calling this method the status is returned and cleared
 406:../Generated_Code/SM1.c **** **         (set to "false" state). This method is available only if
 407:../Generated_Code/SM1.c **** **         method SendBlock is enabled.
 408:../Generated_Code/SM1.c **** **     @param
 409:../Generated_Code/SM1.c **** **         DeviceDataPtr   - Device data structure
 410:../Generated_Code/SM1.c **** **                           pointer returned by <Init> method.
 411:../Generated_Code/SM1.c **** **     @return
 412:../Generated_Code/SM1.c **** **                         - Return value:
 413:../Generated_Code/SM1.c **** **                           true - Data block is completely transmitted
 414:../Generated_Code/SM1.c **** **                           false - Data block isn't completely
 415:../Generated_Code/SM1.c **** **                           transmitted.
 416:../Generated_Code/SM1.c **** */
 417:../Generated_Code/SM1.c **** /* ===================================================================*/
 418:../Generated_Code/SM1.c **** bool SM1_GetBlockSentStatus(LDD_TDeviceData *DeviceDataPtr)
 419:../Generated_Code/SM1.c **** {
 604              		.loc 1 419 0
 605              		.cfi_startproc
 606 0000 80B5     		push	{r7, lr}
 607              	.LCFI18:
 608              		.cfi_def_cfa_offset 8
 609              		.cfi_offset 7, -8
 610              		.cfi_offset 14, -4
 611 0002 84B0     		sub	sp, sp, #16
 612              	.LCFI19:
 613              		.cfi_def_cfa_offset 24
 614 0004 00AF     		add	r7, sp, #0
 615              	.LCFI20:
 616              		.cfi_def_cfa_register 7
 617 0006 7860     		str	r0, [r7, #4]
 420:../Generated_Code/SM1.c ****   uint8_t Status;                      /* Temporary variable for flag saving */
 421:../Generated_Code/SM1.c **** 
 422:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 423:../Generated_Code/SM1.c ****   EnterCritical();
 618              		.loc 1 423 0
 619 0008 194B     		ldr	r3, .L31
 620 000a 1B78     		ldrb	r3, [r3]
 621 000c DBB2     		uxtb	r3, r3
 622 000e 0133     		add	r3, r3, #1
 623 0010 DBB2     		uxtb	r3, r3
 624 0012 174A     		ldr	r2, .L31
 625 0014 191C     		add	r1, r3, #0
 626 0016 1170     		strb	r1, [r2]
 627 0018 012B     		cmp	r3, #1
 628 001a 04D1     		bne	.L28
 629              		.loc 1 423 0 is_stmt 0
 630 001c 154B     		ldr	r3, .L31+4
 631              	@ 423 "../Generated_Code/SM1.c" 1
 632 001e EFF31080 		MRS R0, PRIMASK
 633 0022 72B6     		CPSID i
 634 0024 1870     		STRB R0, [r3]
 635              	@ 0 "" 2
 636              		.code	16
 637              	.L28:
 424:../Generated_Code/SM1.c ****   Status = ((SM1_TDeviceDataPtr)DeviceDataPtr)->SerFlag; /* Save flag for return */
 638              		.loc 1 424 0 is_stmt 1
 639 0026 3B1C     		mov	r3, r7
 640 0028 0F33     		add	r3, r3, #15
 641 002a 7A68     		ldr	r2, [r7, #4]
 642 002c 927D     		ldrb	r2, [r2, #22]
 643 002e 1A70     		strb	r2, [r3]
 425:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->SerFlag &= (uint8_t)(~(uint8_t)BLOCK_SENT); /* Clear data bl
 644              		.loc 1 425 0
 645 0030 7B68     		ldr	r3, [r7, #4]
 646 0032 9B7D     		ldrb	r3, [r3, #22]
 647 0034 0122     		mov	r2, #1
 648 0036 9343     		bic	r3, r2
 649 0038 DAB2     		uxtb	r2, r3
 650 003a 7B68     		ldr	r3, [r7, #4]
 651 003c 9A75     		strb	r2, [r3, #22]
 426:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 427:../Generated_Code/SM1.c ****   ExitCritical();
 652              		.loc 1 427 0
 653 003e 0C4B     		ldr	r3, .L31
 654 0040 1B78     		ldrb	r3, [r3]
 655 0042 DBB2     		uxtb	r3, r3
 656 0044 013B     		sub	r3, r3, #1
 657 0046 DBB2     		uxtb	r3, r3
 658 0048 094A     		ldr	r2, .L31
 659 004a 191C     		add	r1, r3, #0
 660 004c 1170     		strb	r1, [r2]
 661 004e 002B     		cmp	r3, #0
 662 0050 03D1     		bne	.L29
 663              		.loc 1 427 0 is_stmt 0
 664 0052 084B     		ldr	r3, .L31+4
 665              	@ 427 "../Generated_Code/SM1.c" 1
 666 0054 1878     		ldrb r0, [r3]
 667 0056 80F31088 		msr PRIMASK,r0;
 668              		
 669              	@ 0 "" 2
 670              		.code	16
 671              	.L29:
 428:../Generated_Code/SM1.c ****   return (bool)(((Status & BLOCK_SENT) != 0U)? TRUE : FALSE); /* Return saved status */
 672              		.loc 1 428 0 is_stmt 1
 673 005a 3B1C     		mov	r3, r7
 674 005c 0F33     		add	r3, r3, #15
 675 005e 1A78     		ldrb	r2, [r3]
 676 0060 0123     		mov	r3, #1
 677 0062 1340     		and	r3, r2
 678 0064 DBB2     		uxtb	r3, r3
 429:../Generated_Code/SM1.c **** }
 679              		.loc 1 429 0
 680 0066 181C     		mov	r0, r3
 681 0068 BD46     		mov	sp, r7
 682 006a 04B0     		add	sp, sp, #16
 683              		@ sp needed for prologue
 684 006c 80BD     		pop	{r7, pc}
 685              	.L32:
 686 006e C046     		.align	2
 687              	.L31:
 688 0070 00000000 		.word	SR_lock
 689 0074 00000000 		.word	SR_reg
 690              		.cfi_endproc
 691              	.LFE6:
 693              		.section	.text.SM1_GetBlockReceivedStatus,"ax",%progbits
 694              		.align	2
 695              		.global	SM1_GetBlockReceivedStatus
 696              		.code	16
 697              		.thumb_func
 699              	SM1_GetBlockReceivedStatus:
 700              	.LFB7:
 430:../Generated_Code/SM1.c **** 
 431:../Generated_Code/SM1.c **** /*
 432:../Generated_Code/SM1.c **** ** ===================================================================
 433:../Generated_Code/SM1.c **** **     Method      :  SM1_GetBlockReceivedStatus (component SPIMaster_LDD)
 434:../Generated_Code/SM1.c **** */
 435:../Generated_Code/SM1.c **** /*!
 436:../Generated_Code/SM1.c **** **     @brief
 437:../Generated_Code/SM1.c **** **         This method returns whether the receiver is finished
 438:../Generated_Code/SM1.c **** **         reception of all data block. The status flag is accumulated,
 439:../Generated_Code/SM1.c **** **         after calling this method the status is returned and cleared
 440:../Generated_Code/SM1.c **** **         (set to "false" state). This method is available only if
 441:../Generated_Code/SM1.c **** **         method ReceiveBlock is enabled.
 442:../Generated_Code/SM1.c **** **     @param
 443:../Generated_Code/SM1.c **** **         DeviceDataPtr   - Device data structure
 444:../Generated_Code/SM1.c **** **                           pointer returned by <Init> method.
 445:../Generated_Code/SM1.c **** **     @return
 446:../Generated_Code/SM1.c **** **                         - Return value:
 447:../Generated_Code/SM1.c **** **                           true - Data block is completely received
 448:../Generated_Code/SM1.c **** **                           false - Data block isn't completely received
 449:../Generated_Code/SM1.c **** */
 450:../Generated_Code/SM1.c **** /* ===================================================================*/
 451:../Generated_Code/SM1.c **** bool SM1_GetBlockReceivedStatus(LDD_TDeviceData *DeviceDataPtr)
 452:../Generated_Code/SM1.c **** {
 701              		.loc 1 452 0
 702              		.cfi_startproc
 703 0000 80B5     		push	{r7, lr}
 704              	.LCFI21:
 705              		.cfi_def_cfa_offset 8
 706              		.cfi_offset 7, -8
 707              		.cfi_offset 14, -4
 708 0002 84B0     		sub	sp, sp, #16
 709              	.LCFI22:
 710              		.cfi_def_cfa_offset 24
 711 0004 00AF     		add	r7, sp, #0
 712              	.LCFI23:
 713              		.cfi_def_cfa_register 7
 714 0006 7860     		str	r0, [r7, #4]
 453:../Generated_Code/SM1.c ****   uint8_t Status;                      /* Temporary variable for flag saving */
 454:../Generated_Code/SM1.c **** 
 455:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 456:../Generated_Code/SM1.c ****   EnterCritical();
 715              		.loc 1 456 0
 716 0008 1A4B     		ldr	r3, .L39
 717 000a 1B78     		ldrb	r3, [r3]
 718 000c DBB2     		uxtb	r3, r3
 719 000e 0133     		add	r3, r3, #1
 720 0010 DBB2     		uxtb	r3, r3
 721 0012 184A     		ldr	r2, .L39
 722 0014 191C     		add	r1, r3, #0
 723 0016 1170     		strb	r1, [r2]
 724 0018 012B     		cmp	r3, #1
 725 001a 04D1     		bne	.L34
 726              		.loc 1 456 0 is_stmt 0
 727 001c 164B     		ldr	r3, .L39+4
 728              	@ 456 "../Generated_Code/SM1.c" 1
 729 001e EFF31080 		MRS R0, PRIMASK
 730 0022 72B6     		CPSID i
 731 0024 1870     		STRB R0, [r3]
 732              	@ 0 "" 2
 733              		.code	16
 734              	.L34:
 457:../Generated_Code/SM1.c ****   Status = ((SM1_TDeviceDataPtr)DeviceDataPtr)->SerFlag; /* Save flag for return */
 735              		.loc 1 457 0 is_stmt 1
 736 0026 3B1C     		mov	r3, r7
 737 0028 0F33     		add	r3, r3, #15
 738 002a 7A68     		ldr	r2, [r7, #4]
 739 002c 927D     		ldrb	r2, [r2, #22]
 740 002e 1A70     		strb	r2, [r3]
 458:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->SerFlag &= (uint8_t)(~(uint8_t)BLOCK_RECEIVED); /* Clear dat
 741              		.loc 1 458 0
 742 0030 7B68     		ldr	r3, [r7, #4]
 743 0032 9B7D     		ldrb	r3, [r3, #22]
 744 0034 0222     		mov	r2, #2
 745 0036 9343     		bic	r3, r2
 746 0038 DAB2     		uxtb	r2, r3
 747 003a 7B68     		ldr	r3, [r7, #4]
 748 003c 9A75     		strb	r2, [r3, #22]
 459:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 460:../Generated_Code/SM1.c ****   ExitCritical();
 749              		.loc 1 460 0
 750 003e 0D4B     		ldr	r3, .L39
 751 0040 1B78     		ldrb	r3, [r3]
 752 0042 DBB2     		uxtb	r3, r3
 753 0044 013B     		sub	r3, r3, #1
 754 0046 DBB2     		uxtb	r3, r3
 755 0048 0A4A     		ldr	r2, .L39
 756 004a 191C     		add	r1, r3, #0
 757 004c 1170     		strb	r1, [r2]
 758 004e 002B     		cmp	r3, #0
 759 0050 03D1     		bne	.L35
 760              		.loc 1 460 0 is_stmt 0
 761 0052 094B     		ldr	r3, .L39+4
 762              	@ 460 "../Generated_Code/SM1.c" 1
 763 0054 1878     		ldrb r0, [r3]
 764 0056 80F31088 		msr PRIMASK,r0;
 765              		
 766              	@ 0 "" 2
 767              		.code	16
 768              	.L35:
 461:../Generated_Code/SM1.c ****   return (bool)(((Status & BLOCK_RECEIVED) != 0U)? TRUE : FALSE); /* Return saved status */
 769              		.loc 1 461 0 is_stmt 1
 770 005a 3B1C     		mov	r3, r7
 771 005c 0F33     		add	r3, r3, #15
 772 005e 1A78     		ldrb	r2, [r3]
 773 0060 0223     		mov	r3, #2
 774 0062 1340     		and	r3, r2
 775 0064 01D0     		beq	.L36
 776              		.loc 1 461 0 is_stmt 0
 777 0066 0123     		mov	r3, #1
 778 0068 00E0     		b	.L37
 779              	.L36:
 780              		.loc 1 461 0
 781 006a 0023     		mov	r3, #0
 782              	.L37:
 462:../Generated_Code/SM1.c **** }
 783              		.loc 1 462 0 is_stmt 1
 784 006c 181C     		mov	r0, r3
 785 006e BD46     		mov	sp, r7
 786 0070 04B0     		add	sp, sp, #16
 787              		@ sp needed for prologue
 788 0072 80BD     		pop	{r7, pc}
 789              	.L40:
 790              		.align	2
 791              	.L39:
 792 0074 00000000 		.word	SR_lock
 793 0078 00000000 		.word	SR_reg
 794              		.cfi_endproc
 795              	.LFE7:
 797              		.section	.text.SM1_Interrupt,"ax",%progbits
 798              		.align	2
 799              		.global	SM1_Interrupt
 800              		.code	16
 801              		.thumb_func
 803              	SM1_Interrupt:
 804              	.LFB8:
 463:../Generated_Code/SM1.c **** 
 464:../Generated_Code/SM1.c **** /*
 465:../Generated_Code/SM1.c **** ** ===================================================================
 466:../Generated_Code/SM1.c **** **     Method      :  SM1_Interrupt (component SPIMaster_LDD)
 467:../Generated_Code/SM1.c **** **
 468:../Generated_Code/SM1.c **** **     Description :
 469:../Generated_Code/SM1.c **** **         The ISR function handling the device receive/transmit 
 470:../Generated_Code/SM1.c **** **         interrupt.
 471:../Generated_Code/SM1.c **** **         This method is internal. It is used by Processor Expert only.
 472:../Generated_Code/SM1.c **** ** ===================================================================
 473:../Generated_Code/SM1.c **** */
 474:../Generated_Code/SM1.c **** PE_ISR(SM1_Interrupt)
 475:../Generated_Code/SM1.c **** {
 805              		.loc 1 475 0
 806              		.cfi_startproc
 807 0000 80B5     		push	{r7, lr}
 808              	.LCFI24:
 809              		.cfi_def_cfa_offset 8
 810              		.cfi_offset 7, -8
 811              		.cfi_offset 14, -4
 812 0002 82B0     		sub	sp, sp, #8
 813              	.LCFI25:
 814              		.cfi_def_cfa_offset 16
 815 0004 00AF     		add	r7, sp, #0
 816              	.LCFI26:
 817              		.cfi_def_cfa_register 7
 476:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
 477:../Generated_Code/SM1.c ****   SM1_TDeviceDataPtr DeviceDataPrv = INT_SPI0__DEFAULT_RTOS_ISRPARAM;
 818              		.loc 1 477 0
 819 0006 3B4B     		ldr	r3, .L45
 820 0008 1B68     		ldr	r3, [r3]
 821 000a 7B60     		str	r3, [r7, #4]
 478:../Generated_Code/SM1.c ****   uint8_t StatReg = SPI_PDD_ReadStatusReg(SPI0_BASE_PTR); /* Read status register */
 822              		.loc 1 478 0
 823 000c 3A4A     		ldr	r2, .L45+4
 824 000e FB1C     		add	r3, r7, #3
 825 0010 D278     		ldrb	r2, [r2, #3]
 826 0012 1A70     		strb	r2, [r3]
 479:../Generated_Code/SM1.c **** 
 480:../Generated_Code/SM1.c ****   (void)DeviceDataPrv;                 /* Supress unused variable warning if needed */
 481:../Generated_Code/SM1.c ****   if ((StatReg & SPI_PDD_RX_BUFFER_FULL) != 0U) { /* Is any char in HW Rx buffer? */
 827              		.loc 1 481 0
 828 0014 FB1C     		add	r3, r7, #3
 829 0016 1B78     		ldrb	r3, [r3]
 830 0018 5BB2     		sxtb	r3, r3
 831 001a 002B     		cmp	r3, #0
 832 001c 2FDA     		bge	.L42
 482:../Generated_Code/SM1.c ****     if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
 833              		.loc 1 482 0
 834 001e 7B68     		ldr	r3, [r7, #4]
 835 0020 9B89     		ldrh	r3, [r3, #12]
 836 0022 002B     		cmp	r3, #0
 837 0024 2BD0     		beq	.L42
 483:../Generated_Code/SM1.c ****       *(DeviceDataPrv->InpDataPtr++) = SPI_PDD_ReadData8bit(SPI0_BASE_PTR); /* Put a character to t
 838              		.loc 1 483 0
 839 0026 7B68     		ldr	r3, [r7, #4]
 840 0028 9B68     		ldr	r3, [r3, #8]
 841 002a 334A     		ldr	r2, .L45+4
 842 002c 5279     		ldrb	r2, [r2, #5]
 843 002e D2B2     		uxtb	r2, r2
 844 0030 1A70     		strb	r2, [r3]
 845 0032 5A1C     		add	r2, r3, #1
 846 0034 7B68     		ldr	r3, [r7, #4]
 847 0036 9A60     		str	r2, [r3, #8]
 484:../Generated_Code/SM1.c ****       DeviceDataPrv->InpRecvDataNum++; /* Increment received char. counter */
 848              		.loc 1 484 0
 849 0038 7B68     		ldr	r3, [r7, #4]
 850 003a 9B88     		ldrh	r3, [r3, #4]
 851 003c 0133     		add	r3, r3, #1
 852 003e 9AB2     		uxth	r2, r3
 853 0040 7B68     		ldr	r3, [r7, #4]
 854 0042 9A80     		strh	r2, [r3, #4]
 485:../Generated_Code/SM1.c ****       if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested numb
 855              		.loc 1 485 0
 856 0044 7B68     		ldr	r3, [r7, #4]
 857 0046 9A88     		ldrh	r2, [r3, #4]
 858 0048 7B68     		ldr	r3, [r7, #4]
 859 004a 9B89     		ldrh	r3, [r3, #12]
 860 004c 9A42     		cmp	r2, r3
 861 004e 16D1     		bne	.L42
 486:../Generated_Code/SM1.c ****         SPI_PDD_DisableInterruptMask(SPI0_BASE_PTR, SPI_PDD_RX_BUFFER_FULL_OR_FAULT); /* Disable Rx
 862              		.loc 1 486 0
 863 0050 294B     		ldr	r3, .L45+4
 864 0052 294A     		ldr	r2, .L45+4
 865 0054 1278     		ldrb	r2, [r2]
 866 0056 D1B2     		uxtb	r1, r2
 867 0058 7F22     		mov	r2, #127
 868 005a 0A40     		and	r2, r1
 869 005c D2B2     		uxtb	r2, r2
 870 005e 1A70     		strb	r2, [r3]
 487:../Generated_Code/SM1.c ****         DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters t
 871              		.loc 1 487 0
 872 0060 7B68     		ldr	r3, [r7, #4]
 873 0062 0022     		mov	r2, #0
 874 0064 9A81     		strh	r2, [r3, #12]
 488:../Generated_Code/SM1.c ****         DeviceDataPrv->SerFlag |= BLOCK_RECEIVED; /* Set data block received flag */
 875              		.loc 1 488 0
 876 0066 7B68     		ldr	r3, [r7, #4]
 877 0068 9B7D     		ldrb	r3, [r3, #22]
 878 006a 0222     		mov	r2, #2
 879 006c 1343     		orr	r3, r2
 880 006e DAB2     		uxtb	r2, r3
 881 0070 7B68     		ldr	r3, [r7, #4]
 882 0072 9A75     		strb	r2, [r3, #22]
 489:../Generated_Code/SM1.c ****         SM1_OnBlockReceived(DeviceDataPrv->UserData);
 883              		.loc 1 489 0
 884 0074 7B68     		ldr	r3, [r7, #4]
 885 0076 9B69     		ldr	r3, [r3, #24]
 886 0078 181C     		mov	r0, r3
 887 007a FFF7FEFF 		bl	SM1_OnBlockReceived
 888              	.L42:
 490:../Generated_Code/SM1.c ****       }
 491:../Generated_Code/SM1.c ****     }
 492:../Generated_Code/SM1.c ****   }
 493:../Generated_Code/SM1.c ****   if ((StatReg & SPI_PDD_TX_BUFFER_EMPTYG) != 0U) { /* Is HW Tx buffer empty? */
 889              		.loc 1 493 0
 890 007e FB1C     		add	r3, r7, #3
 891 0080 1A78     		ldrb	r2, [r3]
 892 0082 2023     		mov	r3, #32
 893 0084 1340     		and	r3, r2
 894 0086 31D0     		beq	.L41
 494:../Generated_Code/SM1.c ****     if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent charac
 895              		.loc 1 494 0
 896 0088 7B68     		ldr	r3, [r7, #4]
 897 008a DA89     		ldrh	r2, [r3, #14]
 898 008c 7B68     		ldr	r3, [r7, #4]
 899 008e 9B8A     		ldrh	r3, [r3, #20]
 900 0090 9A42     		cmp	r2, r3
 901 0092 23D2     		bcs	.L44
 495:../Generated_Code/SM1.c ****       SPI_PDD_WriteData8Bit(SPI0_BASE_PTR, (*((uint8_t *)DeviceDataPrv->OutDataPtr++))); /* Put a c
 902              		.loc 1 495 0
 903 0094 184A     		ldr	r2, .L45+4
 904 0096 7B68     		ldr	r3, [r7, #4]
 905 0098 1B69     		ldr	r3, [r3, #16]
 906 009a 1978     		ldrb	r1, [r3]
 907 009c 5171     		strb	r1, [r2, #5]
 908 009e 5A1C     		add	r2, r3, #1
 909 00a0 7B68     		ldr	r3, [r7, #4]
 910 00a2 1A61     		str	r2, [r3, #16]
 496:../Generated_Code/SM1.c ****       DeviceDataPrv->OutSentDataNum++; /* Increment the counter of sent characters. */
 911              		.loc 1 496 0
 912 00a4 7B68     		ldr	r3, [r7, #4]
 913 00a6 DB89     		ldrh	r3, [r3, #14]
 914 00a8 0133     		add	r3, r3, #1
 915 00aa 9AB2     		uxth	r2, r3
 916 00ac 7B68     		ldr	r3, [r7, #4]
 917 00ae DA81     		strh	r2, [r3, #14]
 497:../Generated_Code/SM1.c ****       if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
 918              		.loc 1 497 0
 919 00b0 7B68     		ldr	r3, [r7, #4]
 920 00b2 DA89     		ldrh	r2, [r3, #14]
 921 00b4 7B68     		ldr	r3, [r7, #4]
 922 00b6 9B8A     		ldrh	r3, [r3, #20]
 923 00b8 9A42     		cmp	r2, r3
 924 00ba 17D1     		bne	.L41
 498:../Generated_Code/SM1.c ****         DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by Send
 925              		.loc 1 498 0
 926 00bc 7B68     		ldr	r3, [r7, #4]
 927 00be 0022     		mov	r2, #0
 928 00c0 9A82     		strh	r2, [r3, #20]
 499:../Generated_Code/SM1.c ****         DeviceDataPrv->SerFlag |= BLOCK_SENT; /* Set data block sent flag */
 929              		.loc 1 499 0
 930 00c2 7B68     		ldr	r3, [r7, #4]
 931 00c4 9B7D     		ldrb	r3, [r3, #22]
 932 00c6 0122     		mov	r2, #1
 933 00c8 1343     		orr	r3, r2
 934 00ca DAB2     		uxtb	r2, r3
 935 00cc 7B68     		ldr	r3, [r7, #4]
 936 00ce 9A75     		strb	r2, [r3, #22]
 500:../Generated_Code/SM1.c ****         SM1_OnBlockSent(DeviceDataPrv->UserData);
 937              		.loc 1 500 0
 938 00d0 7B68     		ldr	r3, [r7, #4]
 939 00d2 9B69     		ldr	r3, [r3, #24]
 940 00d4 181C     		mov	r0, r3
 941 00d6 FFF7FEFF 		bl	SM1_OnBlockSent
 942 00da 07E0     		b	.L41
 943              	.L44:
 501:../Generated_Code/SM1.c ****       }
 502:../Generated_Code/SM1.c ****     } else {
 503:../Generated_Code/SM1.c ****       SPI_PDD_DisableInterruptMask(SPI0_BASE_PTR, SPI_PDD_TX_BUFFER_EMPTY); /* Disable TX interrupt
 944              		.loc 1 503 0
 945 00dc 064B     		ldr	r3, .L45+4
 946 00de 064A     		ldr	r2, .L45+4
 947 00e0 1278     		ldrb	r2, [r2]
 948 00e2 D2B2     		uxtb	r2, r2
 949 00e4 2021     		mov	r1, #32
 950 00e6 8A43     		bic	r2, r1
 951 00e8 D2B2     		uxtb	r2, r2
 952 00ea 1A70     		strb	r2, [r3]
 953              	.L41:
 504:../Generated_Code/SM1.c ****     }
 505:../Generated_Code/SM1.c ****   }
 506:../Generated_Code/SM1.c **** }
 954              		.loc 1 506 0
 955 00ec BD46     		mov	sp, r7
 956 00ee 02B0     		add	sp, sp, #8
 957              		@ sp needed for prologue
 958 00f0 80BD     		pop	{r7, pc}
 959              	.L46:
 960 00f2 C046     		.align	2
 961              	.L45:
 962 00f4 00000000 		.word	INT_SPI0__DEFAULT_RTOS_ISRPARAM
 963 00f8 00600740 		.word	1074225152
 964              		.cfi_endproc
 965              	.LFE8:
 967              		.text
 968              	.Letext0:
 969              		.file 2 "E:/Freescale/CW MCU v10.5/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 970              		.file 3 "E:/Freescale/CW MCU v10.5/MCU/CodeWarrior_Examples/Processor_Expert/Kinetis/TWR-KL25Z48M/
 971              		.file 4 "E:/Freescale/CW MCU v10.5/MCU/CodeWarrior_Examples/Processor_Expert/Kinetis/TWR-KL25Z48M/
 972              		.file 5 "E:/Freescale/CW MCU v10.5/MCU/CodeWarrior_Examples/Processor_Expert/Kinetis/TWR-KL25Z48M/
DEFINED SYMBOLS
                            *ABS*:00000000 SM1.c
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:24     .bss.INT_SPI0__DEFAULT_RTOS_ISRPARAM:00000000 $d
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:27     .bss.INT_SPI0__DEFAULT_RTOS_ISRPARAM:00000000 INT_SPI0__DEFAULT_RTOS_ISRPARAM
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:30     .text.SM1_Init:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:35     .text.SM1_Init:00000000 SM1_Init
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:203    .text.SM1_Init:000000fc $d
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:217    .text.SM1_Deinit:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:222    .text.SM1_Deinit:00000000 SM1_Deinit
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:263    .text.SM1_Deinit:0000002c $d
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:272    .text.SM1_ReceiveBlock:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:277    .text.SM1_ReceiveBlock:00000000 SM1_ReceiveBlock
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:400    .text.SM1_ReceiveBlock:000000a4 $d
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:407    .text.SM1_SendBlock:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:412    .text.SM1_SendBlock:00000000 SM1_SendBlock
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:522    .text.SM1_SendBlock:00000090 $d
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:529    .text.SM1_GetReceivedDataNum:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:534    .text.SM1_GetReceivedDataNum:00000000 SM1_GetReceivedDataNum
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:563    .text.SM1_GetSentDataNum:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:568    .text.SM1_GetSentDataNum:00000000 SM1_GetSentDataNum
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:597    .text.SM1_GetBlockSentStatus:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:602    .text.SM1_GetBlockSentStatus:00000000 SM1_GetBlockSentStatus
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:688    .text.SM1_GetBlockSentStatus:00000070 $d
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:694    .text.SM1_GetBlockReceivedStatus:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:699    .text.SM1_GetBlockReceivedStatus:00000000 SM1_GetBlockReceivedStatus
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:792    .text.SM1_GetBlockReceivedStatus:00000074 $d
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:798    .text.SM1_Interrupt:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:803    .text.SM1_Interrupt:00000000 SM1_Interrupt
C:\Users\lab\AppData\Local\Temp\cc1SwuYn.s:962    .text.SM1_Interrupt:000000f4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
SR_lock
SR_reg
SM1_OnBlockReceived
SM1_OnBlockSent

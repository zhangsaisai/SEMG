   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"SS1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	28
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              		.section	.bss.INT_SPI1__DEFAULT_RTOS_ISRPARAM,"aw",%nobits
  24              		.align	2
  27              	INT_SPI1__DEFAULT_RTOS_ISRPARAM:
  28 0000 00000000 		.space	4
  29              		.section	.text.SS1_Init,"ax",%progbits
  30              		.align	2
  31              		.global	SS1_Init
  32              		.code	16
  33              		.thumb_func
  35              	SS1_Init:
  36              	.LFB0:
  37              		.file 1 "../Generated_Code/SS1.c"
   1:../Generated_Code/SS1.c **** /* ###################################################################
   2:../Generated_Code/SS1.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/SS1.c **** **     Filename    : SS1.c
   4:../Generated_Code/SS1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/SS1.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/SS1.c **** **     Component   : SPISlave_LDD
   7:../Generated_Code/SS1.c **** **     Version     : Component 01.047, Driver 01.02, CPU db: 3.00.000
   8:../Generated_Code/SS1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/SS1.c **** **     Date/Time   : 2015-10-16, 11:12, # CodeGen: 7
  10:../Generated_Code/SS1.c **** **     Abstract    :
  11:../Generated_Code/SS1.c **** **         This component "SPISlave_LDD" implements SLAVE part of synchronous
  12:../Generated_Code/SS1.c **** **         serial master-slave communication.
  13:../Generated_Code/SS1.c **** **     Settings    :
  14:../Generated_Code/SS1.c **** **          Component name                                 : SS1
  15:../Generated_Code/SS1.c **** **          Device                                         : SPI1
  16:../Generated_Code/SS1.c **** **          Interrupt service/event                        : Enabled
  17:../Generated_Code/SS1.c **** **            Input interrupt                              : INT_SPI1
  18:../Generated_Code/SS1.c **** **            Input interrupt priority                     : high priority
  19:../Generated_Code/SS1.c **** **            Output interrupt                             : INT_SPI1
  20:../Generated_Code/SS1.c **** **            Output interrupt priority                    : high priority
  21:../Generated_Code/SS1.c **** **          Settings                                       : 
  22:../Generated_Code/SS1.c **** **            Input pin                                    : Enabled
  23:../Generated_Code/SS1.c **** **              Pin                                        : PTE1/SPI1_MOSI/UART1_RX/SPI1_MISO/I2C1
  24:../Generated_Code/SS1.c **** **              Pin signal                                 : 
  25:../Generated_Code/SS1.c **** **            Output pin                                   : Enabled
  26:../Generated_Code/SS1.c **** **              Pin                                        : PTE3/SPI1_MISO/SPI1_MOSI
  27:../Generated_Code/SS1.c **** **              Pin signal                                 : 
  28:../Generated_Code/SS1.c **** **            Clock pin                                    : 
  29:../Generated_Code/SS1.c **** **              Pin                                        : PTE2/SPI1_SCK
  30:../Generated_Code/SS1.c **** **              Pin signal                                 : 
  31:../Generated_Code/SS1.c **** **            Slave select                                 : 
  32:../Generated_Code/SS1.c **** **              Pin                                        : PTE4/SPI1_PCS0
  33:../Generated_Code/SS1.c **** **              Pin signal                                 : 
  34:../Generated_Code/SS1.c **** **              Active level                               : Low
  35:../Generated_Code/SS1.c **** **            Attribute set                                : 
  36:../Generated_Code/SS1.c **** **              Width                                      : 8 bits
  37:../Generated_Code/SS1.c **** **              MSB first                                  : yes
  38:../Generated_Code/SS1.c **** **              Clock polarity                             : High
  39:../Generated_Code/SS1.c **** **              Clock phase                                : Change on leading edge
  40:../Generated_Code/SS1.c **** **              Parity                                     : None
  41:../Generated_Code/SS1.c **** **            HW input buffer size                         : 1
  42:../Generated_Code/SS1.c **** **            HW input watermark                           : 1
  43:../Generated_Code/SS1.c **** **            Receiver DMA                                 : Disabled
  44:../Generated_Code/SS1.c **** **            HW output buffer size                        : 1
  45:../Generated_Code/SS1.c **** **            HW output watermark                          : 1
  46:../Generated_Code/SS1.c **** **            Transmitter DMA                              : Disabled
  47:../Generated_Code/SS1.c **** **          Initialization                                 : 
  48:../Generated_Code/SS1.c **** **            Enabled in init. code                        : yes
  49:../Generated_Code/SS1.c **** **            Auto initialization                          : yes
  50:../Generated_Code/SS1.c **** **            Event mask                                   : 
  51:../Generated_Code/SS1.c **** **              OnBlockSent                                : Enabled
  52:../Generated_Code/SS1.c **** **              OnBlockReceived                            : Enabled
  53:../Generated_Code/SS1.c **** **              OnError                                    : Disabled
  54:../Generated_Code/SS1.c **** **     Contents    :
  55:../Generated_Code/SS1.c **** **         Init               - LDD_TDeviceData* SS1_Init(LDD_TUserData *UserDataPtr);
  56:../Generated_Code/SS1.c **** **         Deinit             - void SS1_Deinit(LDD_TDeviceData *DeviceDataPtr);
  57:../Generated_Code/SS1.c **** **         SendBlock          - LDD_TError SS1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData.
  58:../Generated_Code/SS1.c **** **         ReceiveBlock       - LDD_TError SS1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TDa
  59:../Generated_Code/SS1.c **** **         GetSentDataNum     - uint16_t SS1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr);
  60:../Generated_Code/SS1.c **** **         GetReceivedDataNum - uint16_t SS1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr);
  61:../Generated_Code/SS1.c **** **
  62:../Generated_Code/SS1.c **** **     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
  63:../Generated_Code/SS1.c **** **     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
  64:../Generated_Code/SS1.c **** **     
  65:../Generated_Code/SS1.c **** **     http      : www.freescale.com
  66:../Generated_Code/SS1.c **** **     mail      : support@freescale.com
  67:../Generated_Code/SS1.c **** ** ###################################################################*/
  68:../Generated_Code/SS1.c **** /*!
  69:../Generated_Code/SS1.c **** ** @file SS1.c
  70:../Generated_Code/SS1.c **** ** @version 01.02
  71:../Generated_Code/SS1.c **** ** @brief
  72:../Generated_Code/SS1.c **** **         This component "SPISlave_LDD" implements SLAVE part of synchronous
  73:../Generated_Code/SS1.c **** **         serial master-slave communication.
  74:../Generated_Code/SS1.c **** */         
  75:../Generated_Code/SS1.c **** /*!
  76:../Generated_Code/SS1.c **** **  @addtogroup SS1_module SS1 module documentation
  77:../Generated_Code/SS1.c **** **  @{
  78:../Generated_Code/SS1.c **** */         
  79:../Generated_Code/SS1.c **** 
  80:../Generated_Code/SS1.c **** /* MODULE SS1. */
  81:../Generated_Code/SS1.c **** /*lint -save  -e926 -e927 -e928 -e929 Disable MISRA rule (11.4) checking. */
  82:../Generated_Code/SS1.c **** 
  83:../Generated_Code/SS1.c **** #include "Events.h"
  84:../Generated_Code/SS1.c **** #include "SS1.h"
  85:../Generated_Code/SS1.c **** /* {Default RTOS Adapter} No RTOS includes */
  86:../Generated_Code/SS1.c **** 
  87:../Generated_Code/SS1.c **** #ifdef __cplusplus
  88:../Generated_Code/SS1.c **** extern "C" {
  89:../Generated_Code/SS1.c **** #endif 
  90:../Generated_Code/SS1.c **** 
  91:../Generated_Code/SS1.c **** #define AVAILABLE_EVENTS_MASK (LDD_SPISLAVE_ON_BLOCK_RECEIVED | LDD_SPISLAVE_ON_BLOCK_SENT)
  92:../Generated_Code/SS1.c **** 
  93:../Generated_Code/SS1.c **** /* These constants contain pins masks */
  94:../Generated_Code/SS1.c **** #define SS1_AVAILABLE_PIN_MASK (LDD_SPISLAVE_INPUT_PIN | LDD_SPISLAVE_OUTPUT_PIN | LDD_SPISLAVE_CLK
  95:../Generated_Code/SS1.c **** 
  96:../Generated_Code/SS1.c **** typedef struct {
  97:../Generated_Code/SS1.c ****   LDD_SPISLAVE_TError ErrFlag;         /* Error flags */
  98:../Generated_Code/SS1.c ****   uint16_t InpRecvDataNum;             /* The counter of received characters */
  99:../Generated_Code/SS1.c ****   uint8_t *InpDataPtr;                 /* The buffer pointer for received characters */
 100:../Generated_Code/SS1.c ****   uint16_t InpDataNumReq;              /* The counter of characters to receive by ReceiveBlock() */
 101:../Generated_Code/SS1.c ****   uint16_t OutSentDataNum;             /* The counter of sent characters */
 102:../Generated_Code/SS1.c ****   uint8_t *OutDataPtr;                 /* The buffer pointer for data to be transmitted */
 103:../Generated_Code/SS1.c ****   uint16_t OutDataNumReq;              /* The counter of characters to be send by SendBlock() */
 104:../Generated_Code/SS1.c ****   LDD_TUserData *UserData;             /* User device data structure */
 105:../Generated_Code/SS1.c **** } SS1_TDeviceData;                     /* Device data structure type */
 106:../Generated_Code/SS1.c **** 
 107:../Generated_Code/SS1.c **** typedef SS1_TDeviceData* SS1_TDeviceDataPtr; /* Pointer to the device data structure */
 108:../Generated_Code/SS1.c **** 
 109:../Generated_Code/SS1.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 110:../Generated_Code/SS1.c **** static SS1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 111:../Generated_Code/SS1.c **** /* {Default RTOS Adapter} Global variable used for passing a parameter into ISR */
 112:../Generated_Code/SS1.c **** static SS1_TDeviceDataPtr INT_SPI1__DEFAULT_RTOS_ISRPARAM;
 113:../Generated_Code/SS1.c **** /* Internal method prototypes */
 114:../Generated_Code/SS1.c **** 
 115:../Generated_Code/SS1.c **** /*
 116:../Generated_Code/SS1.c **** ** ===================================================================
 117:../Generated_Code/SS1.c **** **     Method      :  SS1_Init (component SPISlave_LDD)
 118:../Generated_Code/SS1.c **** */
 119:../Generated_Code/SS1.c **** /*!
 120:../Generated_Code/SS1.c **** **     @brief
 121:../Generated_Code/SS1.c **** **         Initializes the device. Allocates memory for the device data
 122:../Generated_Code/SS1.c **** **         structure, allocates interrupt vectors and sets interrupt
 123:../Generated_Code/SS1.c **** **         priority, sets pin routing, sets timing, etc.
 124:../Generated_Code/SS1.c **** **         If the "Enable in init. code" is set to "yes" value then the
 125:../Generated_Code/SS1.c **** **         device is also enabled(see the description of the Enable()
 126:../Generated_Code/SS1.c **** **         method). In this case the Enable() method is not necessary
 127:../Generated_Code/SS1.c **** **         and needn't to be generated. 
 128:../Generated_Code/SS1.c **** **         This method can be called only once. Before the second call
 129:../Generated_Code/SS1.c **** **         of Init() the Deinit() must be called first.
 130:../Generated_Code/SS1.c **** **     @param
 131:../Generated_Code/SS1.c **** **         UserDataPtr     - Pointer to the user or
 132:../Generated_Code/SS1.c **** **                           RTOS specific data. This pointer will be
 133:../Generated_Code/SS1.c **** **                           passed as an event or callback parameter.
 134:../Generated_Code/SS1.c **** **     @return
 135:../Generated_Code/SS1.c **** **                         - Device data structure pointer.
 136:../Generated_Code/SS1.c **** */
 137:../Generated_Code/SS1.c **** /* ===================================================================*/
 138:../Generated_Code/SS1.c **** LDD_TDeviceData* SS1_Init(LDD_TUserData *UserDataPtr)
 139:../Generated_Code/SS1.c **** {
  38              		.loc 1 139 0
  39              		.cfi_startproc
  40 0000 80B5     		push	{r7, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  45 0002 84B0     		sub	sp, sp, #16
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 24
  48 0004 00AF     		add	r7, sp, #0
  49              	.LCFI2:
  50              		.cfi_def_cfa_register 7
  51 0006 7860     		str	r0, [r7, #4]
 140:../Generated_Code/SS1.c ****   /* Allocate LDD device structure */
 141:../Generated_Code/SS1.c ****   SS1_TDeviceDataPtr DeviceDataPrv;
 142:../Generated_Code/SS1.c **** 
 143:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 144:../Generated_Code/SS1.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  52              		.loc 1 144 0
  53 0008 3C4B     		ldr	r3, .L3
  54 000a FB60     		str	r3, [r7, #12]
 145:../Generated_Code/SS1.c ****   DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */
  55              		.loc 1 145 0
  56 000c FB68     		ldr	r3, [r7, #12]
  57 000e 7A68     		ldr	r2, [r7, #4]
  58 0010 9A61     		str	r2, [r3, #24]
 146:../Generated_Code/SS1.c ****   /* Interrupt vector(s) allocation */
 147:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the glo
 148:../Generated_Code/SS1.c ****   INT_SPI1__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
  59              		.loc 1 148 0
  60 0012 3B4B     		ldr	r3, .L3+4
  61 0014 FA68     		ldr	r2, [r7, #12]
  62 0016 1A60     		str	r2, [r3]
 149:../Generated_Code/SS1.c ****   DeviceDataPrv->ErrFlag = 0x00U;      /* Clear error flags */
  63              		.loc 1 149 0
  64 0018 FB68     		ldr	r3, [r7, #12]
  65 001a 0022     		mov	r2, #0
  66 001c 1A60     		str	r2, [r3]
 150:../Generated_Code/SS1.c ****   /* Clear the receive counters and pointer */
 151:../Generated_Code/SS1.c ****   DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
  67              		.loc 1 151 0
  68 001e FB68     		ldr	r3, [r7, #12]
  69 0020 0022     		mov	r2, #0
  70 0022 9A80     		strh	r2, [r3, #4]
 152:../Generated_Code/SS1.c ****   DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlo
  71              		.loc 1 152 0
  72 0024 FB68     		ldr	r3, [r7, #12]
  73 0026 0022     		mov	r2, #0
  74 0028 9A81     		strh	r2, [r3, #12]
 153:../Generated_Code/SS1.c ****   DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
  75              		.loc 1 153 0
  76 002a FB68     		ldr	r3, [r7, #12]
  77 002c 0022     		mov	r2, #0
  78 002e 9A60     		str	r2, [r3, #8]
 154:../Generated_Code/SS1.c ****   /* Clear the transmit counters and pointer */
 155:../Generated_Code/SS1.c ****   DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
  79              		.loc 1 155 0
  80 0030 FB68     		ldr	r3, [r7, #12]
  81 0032 0022     		mov	r2, #0
  82 0034 DA81     		strh	r2, [r3, #14]
 156:../Generated_Code/SS1.c ****   DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock(
  83              		.loc 1 156 0
  84 0036 FB68     		ldr	r3, [r7, #12]
  85 0038 0022     		mov	r2, #0
  86 003a 9A82     		strh	r2, [r3, #20]
 157:../Generated_Code/SS1.c ****   DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  87              		.loc 1 157 0
  88 003c FB68     		ldr	r3, [r7, #12]
  89 003e 0022     		mov	r2, #0
  90 0040 1A61     		str	r2, [r3, #16]
 158:../Generated_Code/SS1.c ****   /* SIM_SCGC4: SPI1=1 */
 159:../Generated_Code/SS1.c ****   SIM_SCGC4 |= SIM_SCGC4_SPI1_MASK;                                   
  91              		.loc 1 159 0
  92 0042 304A     		ldr	r2, .L3+8
  93 0044 2F49     		ldr	r1, .L3+8
  94 0046 304B     		ldr	r3, .L3+12
  95 0048 CB58     		ldr	r3, [r1, r3]
  96 004a 8021     		mov	r1, #128
  97 004c 0904     		lsl	r1, r1, #16
  98 004e 1943     		orr	r1, r3
  99 0050 2D4B     		ldr	r3, .L3+12
 100 0052 D150     		str	r1, [r2, r3]
 160:../Generated_Code/SS1.c ****   /* SPI1_C1: SPIE=0,SPE=0,SPTIE=0,MSTR=0,CPOL=0,CPHA=1,SSOE=0,LSBFE=0 */
 161:../Generated_Code/SS1.c ****   SPI1_C1 = SPI_C1_CPHA_MASK;          /* Clear control register */
 101              		.loc 1 161 0
 102 0054 2D4B     		ldr	r3, .L3+16
 103 0056 0422     		mov	r2, #4
 104 0058 1A70     		strb	r2, [r3]
 162:../Generated_Code/SS1.c ****   /* Interrupt vector(s) priority setting */
 163:../Generated_Code/SS1.c ****   /* NVIC_IPR2: PRI_11=0x40 */
 164:../Generated_Code/SS1.c ****   NVIC_IPR2 = (uint32_t)((NVIC_IPR2 & (uint32_t)~(uint32_t)(
 105              		.loc 1 164 0
 106 005a 2D4A     		ldr	r2, .L3+20
 107 005c 2C49     		ldr	r1, .L3+20
 108 005e C223     		mov	r3, #194
 109 0060 9B00     		lsl	r3, r3, #2
 110 0062 CB58     		ldr	r3, [r1, r3]
 111 0064 1B02     		lsl	r3, r3, #8
 112 0066 1B0A     		lsr	r3, r3, #8
 113 0068 8021     		mov	r1, #128
 114 006a C905     		lsl	r1, r1, #23
 115 006c 1943     		orr	r1, r3
 116 006e C223     		mov	r3, #194
 117 0070 9B00     		lsl	r3, r3, #2
 118 0072 D150     		str	r1, [r2, r3]
 165:../Generated_Code/SS1.c ****                NVIC_IP_PRI_11(0xBF)
 166:../Generated_Code/SS1.c ****               )) | (uint32_t)(
 167:../Generated_Code/SS1.c ****                NVIC_IP_PRI_11(0x40)
 168:../Generated_Code/SS1.c ****               ));                                  
 169:../Generated_Code/SS1.c ****   /* NVIC_ISER: SETENA|=0x0800 */
 170:../Generated_Code/SS1.c ****   NVIC_ISER |= NVIC_ISER_SETENA(0x0800);                                   
 119              		.loc 1 170 0
 120 0074 264B     		ldr	r3, .L3+20
 121 0076 264A     		ldr	r2, .L3+20
 122 0078 1268     		ldr	r2, [r2]
 123 007a 8021     		mov	r1, #128
 124 007c 0901     		lsl	r1, r1, #4
 125 007e 0A43     		orr	r2, r1
 126 0080 1A60     		str	r2, [r3]
 171:../Generated_Code/SS1.c ****   /* PORTE_PCR1: ISF=0,MUX=2 */
 172:../Generated_Code/SS1.c ****   PORTE_PCR1 = (uint32_t)((PORTE_PCR1 & (uint32_t)~(uint32_t)(
 127              		.loc 1 172 0
 128 0082 244B     		ldr	r3, .L3+24
 129 0084 234A     		ldr	r2, .L3+24
 130 0086 5168     		ldr	r1, [r2, #4]
 131 0088 234A     		ldr	r2, .L3+28
 132 008a 0A40     		and	r2, r1
 133 008c 8021     		mov	r1, #128
 134 008e 8900     		lsl	r1, r1, #2
 135 0090 0A43     		orr	r2, r1
 136 0092 5A60     		str	r2, [r3, #4]
 173:../Generated_Code/SS1.c ****                 PORT_PCR_ISF_MASK |
 174:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x05)
 175:../Generated_Code/SS1.c ****                )) | (uint32_t)(
 176:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x02)
 177:../Generated_Code/SS1.c ****                ));                                  
 178:../Generated_Code/SS1.c ****   /* PORTE_PCR3: ISF=0,MUX=2 */
 179:../Generated_Code/SS1.c ****   PORTE_PCR3 = (uint32_t)((PORTE_PCR3 & (uint32_t)~(uint32_t)(
 137              		.loc 1 179 0
 138 0094 1F4B     		ldr	r3, .L3+24
 139 0096 1F4A     		ldr	r2, .L3+24
 140 0098 D168     		ldr	r1, [r2, #12]
 141 009a 1F4A     		ldr	r2, .L3+28
 142 009c 0A40     		and	r2, r1
 143 009e 8021     		mov	r1, #128
 144 00a0 8900     		lsl	r1, r1, #2
 145 00a2 0A43     		orr	r2, r1
 146 00a4 DA60     		str	r2, [r3, #12]
 180:../Generated_Code/SS1.c ****                 PORT_PCR_ISF_MASK |
 181:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x05)
 182:../Generated_Code/SS1.c ****                )) | (uint32_t)(
 183:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x02)
 184:../Generated_Code/SS1.c ****                ));                                  
 185:../Generated_Code/SS1.c ****   /* PORTE_PCR2: ISF=0,MUX=2 */
 186:../Generated_Code/SS1.c ****   PORTE_PCR2 = (uint32_t)((PORTE_PCR2 & (uint32_t)~(uint32_t)(
 147              		.loc 1 186 0
 148 00a6 1B4B     		ldr	r3, .L3+24
 149 00a8 1A4A     		ldr	r2, .L3+24
 150 00aa 9168     		ldr	r1, [r2, #8]
 151 00ac 1A4A     		ldr	r2, .L3+28
 152 00ae 0A40     		and	r2, r1
 153 00b0 8021     		mov	r1, #128
 154 00b2 8900     		lsl	r1, r1, #2
 155 00b4 0A43     		orr	r2, r1
 156 00b6 9A60     		str	r2, [r3, #8]
 187:../Generated_Code/SS1.c ****                 PORT_PCR_ISF_MASK |
 188:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x05)
 189:../Generated_Code/SS1.c ****                )) | (uint32_t)(
 190:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x02)
 191:../Generated_Code/SS1.c ****                ));                                  
 192:../Generated_Code/SS1.c ****   /* PORTE_PCR4: ISF=0,MUX=2 */
 193:../Generated_Code/SS1.c ****   PORTE_PCR4 = (uint32_t)((PORTE_PCR4 & (uint32_t)~(uint32_t)(
 157              		.loc 1 193 0
 158 00b8 164B     		ldr	r3, .L3+24
 159 00ba 164A     		ldr	r2, .L3+24
 160 00bc 1169     		ldr	r1, [r2, #16]
 161 00be 164A     		ldr	r2, .L3+28
 162 00c0 0A40     		and	r2, r1
 163 00c2 8021     		mov	r1, #128
 164 00c4 8900     		lsl	r1, r1, #2
 165 00c6 0A43     		orr	r2, r1
 166 00c8 1A61     		str	r2, [r3, #16]
 194:../Generated_Code/SS1.c ****                 PORT_PCR_ISF_MASK |
 195:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x05)
 196:../Generated_Code/SS1.c ****                )) | (uint32_t)(
 197:../Generated_Code/SS1.c ****                 PORT_PCR_MUX(0x02)
 198:../Generated_Code/SS1.c ****                ));                                  
 199:../Generated_Code/SS1.c ****   /* SPI1_C1: SPIE=0,SPE=0,SPTIE=0,MSTR=0,CPOL=1,CPHA=1,SSOE=0,LSBFE=0 */
 200:../Generated_Code/SS1.c ****   SPI1_C1 = (SPI_C1_CPOL_MASK | SPI_C1_CPHA_MASK); /* Set Configuration register */
 167              		.loc 1 200 0
 168 00ca 104B     		ldr	r3, .L3+16
 169 00cc 0C22     		mov	r2, #12
 170 00ce 1A70     		strb	r2, [r3]
 201:../Generated_Code/SS1.c ****   /* SPI1_C2: SPMIE=0,??=0,TXDMAE=0,MODFEN=0,BIDIROE=0,RXDMAE=0,SPISWAI=0,SPC0=0 */
 202:../Generated_Code/SS1.c ****   SPI1_C2 = 0x00U;                     /* Set Configuration register */
 171              		.loc 1 202 0
 172 00d0 0E4B     		ldr	r3, .L3+16
 173 00d2 0022     		mov	r2, #0
 174 00d4 5A70     		strb	r2, [r3, #1]
 203:../Generated_Code/SS1.c ****   /* SPI1_BR: ??=0,SPPR=0,SPR=0 */
 204:../Generated_Code/SS1.c ****   SPI1_BR = (SPI_BR_SPPR(0x00) | SPI_BR_SPR(0x00)); /* Set baud rate register */
 175              		.loc 1 204 0
 176 00d6 0D4B     		ldr	r3, .L3+16
 177 00d8 0022     		mov	r2, #0
 178 00da 9A70     		strb	r2, [r3, #2]
 205:../Generated_Code/SS1.c ****   /* SPI1_C1: SPE=1 */
 206:../Generated_Code/SS1.c ****   SPI1_C1 |= SPI_C1_SPE_MASK;          /* Enable device */
 179              		.loc 1 206 0
 180 00dc 0B4B     		ldr	r3, .L3+16
 181 00de 0B4A     		ldr	r2, .L3+16
 182 00e0 1278     		ldrb	r2, [r2]
 183 00e2 D2B2     		uxtb	r2, r2
 184 00e4 4021     		mov	r1, #64
 185 00e6 0A43     		orr	r2, r1
 186 00e8 D2B2     		uxtb	r2, r2
 187 00ea 1A70     		strb	r2, [r3]
 207:../Generated_Code/SS1.c ****   /* Registration of the device structure */
 208:../Generated_Code/SS1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_SS1_ID,DeviceDataPrv);
 188              		.loc 1 208 0
 189 00ec 0B4B     		ldr	r3, .L3+32
 190 00ee FA68     		ldr	r2, [r7, #12]
 191 00f0 5A61     		str	r2, [r3, #20]
 209:../Generated_Code/SS1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
 192              		.loc 1 209 0
 193 00f2 FB68     		ldr	r3, [r7, #12]
 210:../Generated_Code/SS1.c **** }
 194              		.loc 1 210 0
 195 00f4 181C     		mov	r0, r3
 196 00f6 BD46     		mov	sp, r7
 197 00f8 04B0     		add	sp, sp, #16
 198              		@ sp needed for prologue
 199 00fa 80BD     		pop	{r7, pc}
 200              	.L4:
 201              		.align	2
 202              	.L3:
 203 00fc 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 204 0100 00000000 		.word	INT_SPI1__DEFAULT_RTOS_ISRPARAM
 205 0104 00700440 		.word	1074032640
 206 0108 34100000 		.word	4148
 207 010c 00700740 		.word	1074229248
 208 0110 00E100E0 		.word	-536813312
 209 0114 00D00440 		.word	1074057216
 210 0118 FFF8FFFE 		.word	-16779009
 211 011c 00000000 		.word	PE_LDD_DeviceDataList
 212              		.cfi_endproc
 213              	.LFE0:
 215              		.section	.text.SS1_Deinit,"ax",%progbits
 216              		.align	2
 217              		.global	SS1_Deinit
 218              		.code	16
 219              		.thumb_func
 221              	SS1_Deinit:
 222              	.LFB1:
 211:../Generated_Code/SS1.c **** 
 212:../Generated_Code/SS1.c **** /*
 213:../Generated_Code/SS1.c **** ** ===================================================================
 214:../Generated_Code/SS1.c **** **     Method      :  SS1_Deinit (component SPISlave_LDD)
 215:../Generated_Code/SS1.c **** */
 216:../Generated_Code/SS1.c **** /*!
 217:../Generated_Code/SS1.c **** **     @brief
 218:../Generated_Code/SS1.c **** **         This method deinitializes the device. It switches off the
 219:../Generated_Code/SS1.c **** **         device, frees the device data structure memory, interrupts
 220:../Generated_Code/SS1.c **** **         vectors, etc.
 221:../Generated_Code/SS1.c **** **     @param
 222:../Generated_Code/SS1.c **** **         DeviceDataPtr   - Device data structure
 223:../Generated_Code/SS1.c **** **                           pointer returned by <Init> method.
 224:../Generated_Code/SS1.c **** */
 225:../Generated_Code/SS1.c **** /* ===================================================================*/
 226:../Generated_Code/SS1.c **** void SS1_Deinit(LDD_TDeviceData *DeviceDataPtr)
 227:../Generated_Code/SS1.c **** {
 223              		.loc 1 227 0
 224              		.cfi_startproc
 225 0000 80B5     		push	{r7, lr}
 226              	.LCFI3:
 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 7, -8
 229              		.cfi_offset 14, -4
 230 0002 82B0     		sub	sp, sp, #8
 231              	.LCFI4:
 232              		.cfi_def_cfa_offset 16
 233 0004 00AF     		add	r7, sp, #0
 234              	.LCFI5:
 235              		.cfi_def_cfa_register 7
 236 0006 7860     		str	r0, [r7, #4]
 228:../Generated_Code/SS1.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 229:../Generated_Code/SS1.c ****   /* SPI1_C1: SPIE=0,SPE=0,SPTIE=0,MSTR=0,CPOL=0,CPHA=1,SSOE=0,LSBFE=0 */
 230:../Generated_Code/SS1.c ****   SPI1_C1 = SPI_C1_CPHA_MASK;          /* Disable device */
 237              		.loc 1 230 0
 238 0008 084B     		ldr	r3, .L6
 239 000a 0422     		mov	r2, #4
 240 000c 1A70     		strb	r2, [r3]
 231:../Generated_Code/SS1.c ****   /* Restoring the interrupt vector */
 232:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Restore interrupt vector: IVT is static, no code is generated */
 233:../Generated_Code/SS1.c ****   /* Unregistration of the device structure */
 234:../Generated_Code/SS1.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_SS1_ID);
 241              		.loc 1 234 0
 242 000e 084B     		ldr	r3, .L6+4
 243 0010 0022     		mov	r2, #0
 244 0012 5A61     		str	r2, [r3, #20]
 235:../Generated_Code/SS1.c ****   /* Deallocation of the device structure */
 236:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 237:../Generated_Code/SS1.c ****   /* SIM_SCGC4: SPI1=0 */
 238:../Generated_Code/SS1.c ****   SIM_SCGC4 &= (uint32_t)~(uint32_t)(SIM_SCGC4_SPI1_MASK);                                   
 245              		.loc 1 238 0
 246 0014 074A     		ldr	r2, .L6+8
 247 0016 0749     		ldr	r1, .L6+8
 248 0018 074B     		ldr	r3, .L6+12
 249 001a C958     		ldr	r1, [r1, r3]
 250 001c 074B     		ldr	r3, .L6+16
 251 001e 1940     		and	r1, r3
 252 0020 054B     		ldr	r3, .L6+12
 253 0022 D150     		str	r1, [r2, r3]
 239:../Generated_Code/SS1.c **** }
 254              		.loc 1 239 0
 255 0024 BD46     		mov	sp, r7
 256 0026 02B0     		add	sp, sp, #8
 257              		@ sp needed for prologue
 258 0028 80BD     		pop	{r7, pc}
 259              	.L7:
 260 002a C046     		.align	2
 261              	.L6:
 262 002c 00700740 		.word	1074229248
 263 0030 00000000 		.word	PE_LDD_DeviceDataList
 264 0034 00700440 		.word	1074032640
 265 0038 34100000 		.word	4148
 266 003c FFFF7FFF 		.word	-8388609
 267              		.cfi_endproc
 268              	.LFE1:
 270              		.section	.text.SS1_ReceiveBlock,"ax",%progbits
 271              		.align	2
 272              		.global	SS1_ReceiveBlock
 273              		.code	16
 274              		.thumb_func
 276              	SS1_ReceiveBlock:
 277              	.LFB2:
 240:../Generated_Code/SS1.c **** 
 241:../Generated_Code/SS1.c **** /*
 242:../Generated_Code/SS1.c **** ** ===================================================================
 243:../Generated_Code/SS1.c **** **     Method      :  SS1_ReceiveBlock (component SPISlave_LDD)
 244:../Generated_Code/SS1.c **** */
 245:../Generated_Code/SS1.c **** /*!
 246:../Generated_Code/SS1.c **** **     @brief
 247:../Generated_Code/SS1.c **** **         This method specifies the number of data to receive. The
 248:../Generated_Code/SS1.c **** **         method returns ERR_BUSY until the specified number of
 249:../Generated_Code/SS1.c **** **         characters is received. The method <CancelBlockReception>
 250:../Generated_Code/SS1.c **** **         can be used to cancel a running receive operation.
 251:../Generated_Code/SS1.c **** **     @param
 252:../Generated_Code/SS1.c **** **         DeviceDataPtr   - Device data structure
 253:../Generated_Code/SS1.c **** **                           pointer returned by <Init> method.
 254:../Generated_Code/SS1.c **** **     @param
 255:../Generated_Code/SS1.c **** **         BufferPtr       - Pointer to A buffer where
 256:../Generated_Code/SS1.c **** **                           received characters will be stored.
 257:../Generated_Code/SS1.c **** **     @param
 258:../Generated_Code/SS1.c **** **         Size            - Size of the block
 259:../Generated_Code/SS1.c **** **     @return
 260:../Generated_Code/SS1.c **** **                         - Error code, possible codes:
 261:../Generated_Code/SS1.c **** **                           ERR_OK - OK
 262:../Generated_Code/SS1.c **** **                           ERR_DISABLED - Component is disabled
 263:../Generated_Code/SS1.c **** **                           ERR_BUSY - The previous receive request is
 264:../Generated_Code/SS1.c **** **                           pending
 265:../Generated_Code/SS1.c **** */
 266:../Generated_Code/SS1.c **** /* ===================================================================*/
 267:../Generated_Code/SS1.c **** LDD_TError SS1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
 268:../Generated_Code/SS1.c **** {
 278              		.loc 1 268 0
 279              		.cfi_startproc
 280 0000 80B5     		push	{r7, lr}
 281              	.LCFI6:
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 7, -8
 284              		.cfi_offset 14, -4
 285 0002 84B0     		sub	sp, sp, #16
 286              	.LCFI7:
 287              		.cfi_def_cfa_offset 24
 288 0004 00AF     		add	r7, sp, #0
 289              	.LCFI8:
 290              		.cfi_def_cfa_register 7
 291 0006 F860     		str	r0, [r7, #12]
 292 0008 B960     		str	r1, [r7, #8]
 293 000a BB1D     		add	r3, r7, #6
 294 000c 1A80     		strh	r2, [r3]
 269:../Generated_Code/SS1.c ****   if (((SS1_TDeviceDataPtr)DeviceDataPtr)->InpDataNumReq != 0x00U) { /* Is the previous receive ope
 295              		.loc 1 269 0
 296 000e FB68     		ldr	r3, [r7, #12]
 297 0010 9B89     		ldrh	r3, [r3, #12]
 298 0012 002B     		cmp	r3, #0
 299 0014 01D0     		beq	.L9
 270:../Generated_Code/SS1.c ****     return ERR_BUSY;                   /* If yes then error */
 300              		.loc 1 270 0
 301 0016 0823     		mov	r3, #8
 302 0018 39E0     		b	.L10
 303              	.L9:
 271:../Generated_Code/SS1.c ****   }
 272:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 273:../Generated_Code/SS1.c ****   EnterCritical();
 304              		.loc 1 273 0
 305 001a 1F4B     		ldr	r3, .L14
 306 001c 1B78     		ldrb	r3, [r3]
 307 001e DBB2     		uxtb	r3, r3
 308 0020 0133     		add	r3, r3, #1
 309 0022 DBB2     		uxtb	r3, r3
 310 0024 1C4A     		ldr	r2, .L14
 311 0026 191C     		add	r1, r3, #0
 312 0028 1170     		strb	r1, [r2]
 313 002a 012B     		cmp	r3, #1
 314 002c 04D1     		bne	.L11
 315              		.loc 1 273 0 is_stmt 0
 316 002e 1B4B     		ldr	r3, .L14+4
 317              	@ 273 "../Generated_Code/SS1.c" 1
 318 0030 EFF31080 		MRS R0, PRIMASK
 319 0034 72B6     		CPSID i
 320 0036 1870     		STRB R0, [r3]
 321              	@ 0 "" 2
 322              		.code	16
 323              	.L11:
 274:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->InpDataPtr = (uint8_t*)BufferPtr; /* Store a pointer to the 
 324              		.loc 1 274 0 is_stmt 1
 325 0038 FB68     		ldr	r3, [r7, #12]
 326 003a BA68     		ldr	r2, [r7, #8]
 327 003c 9A60     		str	r2, [r3, #8]
 275:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->InpDataNumReq = Size; /* Store a number of characters to be 
 328              		.loc 1 275 0
 329 003e FB68     		ldr	r3, [r7, #12]
 330 0040 BA1D     		add	r2, r7, #6
 331 0042 1288     		ldrh	r2, [r2]
 332 0044 9A81     		strh	r2, [r3, #12]
 276:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->InpRecvDataNum = 0x00U; /* Set number of received characters
 333              		.loc 1 276 0
 334 0046 FB68     		ldr	r3, [r7, #12]
 335 0048 0022     		mov	r2, #0
 336 004a 9A80     		strh	r2, [r3, #4]
 277:../Generated_Code/SS1.c ****   if ((SPI_PDD_ReadStatusReg(SPI1_BASE_PTR) & SPI_PDD_RX_BUFFER_FULL) != 0U) {
 337              		.loc 1 277 0
 338 004c 144B     		ldr	r3, .L14+8
 339 004e DB78     		ldrb	r3, [r3, #3]
 340 0050 DBB2     		uxtb	r3, r3
 341 0052 DBB2     		uxtb	r3, r3
 342 0054 5BB2     		sxtb	r3, r3
 343 0056 002B     		cmp	r3, #0
 344 0058 01DA     		bge	.L12
 278:../Generated_Code/SS1.c ****     (void)SPI_PDD_ReadData8bit(SPI1_BASE_PTR); /* Dummy read of the data register */
 345              		.loc 1 278 0
 346 005a 114B     		ldr	r3, .L14+8
 347 005c 5B79     		ldrb	r3, [r3, #5]
 348              	.L12:
 279:../Generated_Code/SS1.c ****   }
 280:../Generated_Code/SS1.c ****   SPI_PDD_EnableInterruptMask(SPI1_BASE_PTR, SPI_PDD_RX_BUFFER_FULL_OR_FAULT); /* Enable Rx buffer 
 349              		.loc 1 280 0
 350 005e 104B     		ldr	r3, .L14+8
 351 0060 0F4A     		ldr	r2, .L14+8
 352 0062 1278     		ldrb	r2, [r2]
 353 0064 D2B2     		uxtb	r2, r2
 354 0066 8021     		mov	r1, #128
 355 0068 4942     		neg	r1, r1
 356 006a 0A43     		orr	r2, r1
 357 006c D2B2     		uxtb	r2, r2
 358 006e 1A70     		strb	r2, [r3]
 281:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 282:../Generated_Code/SS1.c ****   ExitCritical();
 359              		.loc 1 282 0
 360 0070 094B     		ldr	r3, .L14
 361 0072 1B78     		ldrb	r3, [r3]
 362 0074 DBB2     		uxtb	r3, r3
 363 0076 013B     		sub	r3, r3, #1
 364 0078 DBB2     		uxtb	r3, r3
 365 007a 074A     		ldr	r2, .L14
 366 007c 191C     		add	r1, r3, #0
 367 007e 1170     		strb	r1, [r2]
 368 0080 002B     		cmp	r3, #0
 369 0082 03D1     		bne	.L13
 370              		.loc 1 282 0 is_stmt 0
 371 0084 054B     		ldr	r3, .L14+4
 372              	@ 282 "../Generated_Code/SS1.c" 1
 373 0086 1878     		ldrb r0, [r3]
 374 0088 80F31088 		msr PRIMASK,r0;
 375              		
 376              	@ 0 "" 2
 377              		.code	16
 378              	.L13:
 283:../Generated_Code/SS1.c ****   return ERR_OK;                       /* OK */
 379              		.loc 1 283 0 is_stmt 1
 380 008c 0023     		mov	r3, #0
 381              	.L10:
 284:../Generated_Code/SS1.c **** }
 382              		.loc 1 284 0
 383 008e 181C     		mov	r0, r3
 384 0090 BD46     		mov	sp, r7
 385 0092 04B0     		add	sp, sp, #16
 386              		@ sp needed for prologue
 387 0094 80BD     		pop	{r7, pc}
 388              	.L15:
 389 0096 C046     		.align	2
 390              	.L14:
 391 0098 00000000 		.word	SR_lock
 392 009c 00000000 		.word	SR_reg
 393 00a0 00700740 		.word	1074229248
 394              		.cfi_endproc
 395              	.LFE2:
 397              		.section	.text.SS1_SendBlock,"ax",%progbits
 398              		.align	2
 399              		.global	SS1_SendBlock
 400              		.code	16
 401              		.thumb_func
 403              	SS1_SendBlock:
 404              	.LFB3:
 285:../Generated_Code/SS1.c **** 
 286:../Generated_Code/SS1.c **** /*
 287:../Generated_Code/SS1.c **** ** ===================================================================
 288:../Generated_Code/SS1.c **** **     Method      :  SS1_SendBlock (component SPISlave_LDD)
 289:../Generated_Code/SS1.c **** */
 290:../Generated_Code/SS1.c **** /*!
 291:../Generated_Code/SS1.c **** **     @brief
 292:../Generated_Code/SS1.c **** **         This method sends a block of characters. The method returns
 293:../Generated_Code/SS1.c **** **         ERR_BUSY when the previous block transmission is not
 294:../Generated_Code/SS1.c **** **         completed. The method <CancelBlockTransmission> can be used
 295:../Generated_Code/SS1.c **** **         to cancel a transmit operation.
 296:../Generated_Code/SS1.c **** **     @param
 297:../Generated_Code/SS1.c **** **         DeviceDataPtr   - Device data structure
 298:../Generated_Code/SS1.c **** **                           pointer returned by <Init> method.
 299:../Generated_Code/SS1.c **** **     @param
 300:../Generated_Code/SS1.c **** **         BufferPtr       - Pointer to the block of data
 301:../Generated_Code/SS1.c **** **                           to send.
 302:../Generated_Code/SS1.c **** **     @param
 303:../Generated_Code/SS1.c **** **         Size            - Number of characters in the buffer.
 304:../Generated_Code/SS1.c **** **     @return
 305:../Generated_Code/SS1.c **** **                         - Error code, possible codes:
 306:../Generated_Code/SS1.c **** **                           ERR_OK - OK
 307:../Generated_Code/SS1.c **** **                           ERR_DISABLED - Component is disabled
 308:../Generated_Code/SS1.c **** **                           ERR_BUSY - The previous transmit request is
 309:../Generated_Code/SS1.c **** **                           pending
 310:../Generated_Code/SS1.c **** */
 311:../Generated_Code/SS1.c **** /* ===================================================================*/
 312:../Generated_Code/SS1.c **** LDD_TError SS1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
 313:../Generated_Code/SS1.c **** {
 405              		.loc 1 313 0
 406              		.cfi_startproc
 407 0000 80B5     		push	{r7, lr}
 408              	.LCFI9:
 409              		.cfi_def_cfa_offset 8
 410              		.cfi_offset 7, -8
 411              		.cfi_offset 14, -4
 412 0002 84B0     		sub	sp, sp, #16
 413              	.LCFI10:
 414              		.cfi_def_cfa_offset 24
 415 0004 00AF     		add	r7, sp, #0
 416              	.LCFI11:
 417              		.cfi_def_cfa_register 7
 418 0006 F860     		str	r0, [r7, #12]
 419 0008 B960     		str	r1, [r7, #8]
 420 000a BB1D     		add	r3, r7, #6
 421 000c 1A80     		strh	r2, [r3]
 314:../Generated_Code/SS1.c ****   if (((SS1_TDeviceDataPtr)DeviceDataPtr)->OutDataNumReq != 0x00U) { /* Is the previous transmit op
 422              		.loc 1 314 0
 423 000e FB68     		ldr	r3, [r7, #12]
 424 0010 9B8A     		ldrh	r3, [r3, #20]
 425 0012 002B     		cmp	r3, #0
 426 0014 01D0     		beq	.L17
 315:../Generated_Code/SS1.c ****     return ERR_BUSY;                   /* If yes then error */
 427              		.loc 1 315 0
 428 0016 0823     		mov	r3, #8
 429 0018 2FE0     		b	.L18
 430              	.L17:
 316:../Generated_Code/SS1.c ****   }
 317:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 318:../Generated_Code/SS1.c ****   EnterCritical();
 431              		.loc 1 318 0
 432 001a 1A4B     		ldr	r3, .L21
 433 001c 1B78     		ldrb	r3, [r3]
 434 001e DBB2     		uxtb	r3, r3
 435 0020 0133     		add	r3, r3, #1
 436 0022 DBB2     		uxtb	r3, r3
 437 0024 174A     		ldr	r2, .L21
 438 0026 191C     		add	r1, r3, #0
 439 0028 1170     		strb	r1, [r2]
 440 002a 012B     		cmp	r3, #1
 441 002c 04D1     		bne	.L19
 442              		.loc 1 318 0 is_stmt 0
 443 002e 164B     		ldr	r3, .L21+4
 444              	@ 318 "../Generated_Code/SS1.c" 1
 445 0030 EFF31080 		MRS R0, PRIMASK
 446 0034 72B6     		CPSID i
 447 0036 1870     		STRB R0, [r3]
 448              	@ 0 "" 2
 449              		.code	16
 450              	.L19:
 319:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the ou
 451              		.loc 1 319 0 is_stmt 1
 452 0038 FB68     		ldr	r3, [r7, #12]
 453 003a BA68     		ldr	r2, [r7, #8]
 454 003c 1A61     		str	r2, [r3, #16]
 320:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->OutDataNumReq = Size; /* Set the counter of characters to be
 455              		.loc 1 320 0
 456 003e FB68     		ldr	r3, [r7, #12]
 457 0040 BA1D     		add	r2, r7, #6
 458 0042 1288     		ldrh	r2, [r2]
 459 0044 9A82     		strh	r2, [r3, #20]
 321:../Generated_Code/SS1.c ****   ((SS1_TDeviceDataPtr)DeviceDataPtr)->OutSentDataNum = 0x00U; /* Clear the counter of sent charact
 460              		.loc 1 321 0
 461 0046 FB68     		ldr	r3, [r7, #12]
 462 0048 0022     		mov	r2, #0
 463 004a DA81     		strh	r2, [r3, #14]
 322:../Generated_Code/SS1.c ****   SPI_PDD_EnableInterruptMask(SPI1_BASE_PTR, SPI_PDD_TX_BUFFER_EMPTY); /* Enable Tx buffer empty in
 464              		.loc 1 322 0
 465 004c 0F4B     		ldr	r3, .L21+8
 466 004e 0F4A     		ldr	r2, .L21+8
 467 0050 1278     		ldrb	r2, [r2]
 468 0052 D2B2     		uxtb	r2, r2
 469 0054 2021     		mov	r1, #32
 470 0056 0A43     		orr	r2, r1
 471 0058 D2B2     		uxtb	r2, r2
 472 005a 1A70     		strb	r2, [r3]
 323:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 324:../Generated_Code/SS1.c ****   ExitCritical();
 473              		.loc 1 324 0
 474 005c 094B     		ldr	r3, .L21
 475 005e 1B78     		ldrb	r3, [r3]
 476 0060 DBB2     		uxtb	r3, r3
 477 0062 013B     		sub	r3, r3, #1
 478 0064 DBB2     		uxtb	r3, r3
 479 0066 074A     		ldr	r2, .L21
 480 0068 191C     		add	r1, r3, #0
 481 006a 1170     		strb	r1, [r2]
 482 006c 002B     		cmp	r3, #0
 483 006e 03D1     		bne	.L20
 484              		.loc 1 324 0 is_stmt 0
 485 0070 054B     		ldr	r3, .L21+4
 486              	@ 324 "../Generated_Code/SS1.c" 1
 487 0072 1878     		ldrb r0, [r3]
 488 0074 80F31088 		msr PRIMASK,r0;
 489              		
 490              	@ 0 "" 2
 491              		.code	16
 492              	.L20:
 325:../Generated_Code/SS1.c ****   return ERR_OK;                       /* OK */
 493              		.loc 1 325 0 is_stmt 1
 494 0078 0023     		mov	r3, #0
 495              	.L18:
 326:../Generated_Code/SS1.c **** }
 496              		.loc 1 326 0
 497 007a 181C     		mov	r0, r3
 498 007c BD46     		mov	sp, r7
 499 007e 04B0     		add	sp, sp, #16
 500              		@ sp needed for prologue
 501 0080 80BD     		pop	{r7, pc}
 502              	.L22:
 503 0082 C046     		.align	2
 504              	.L21:
 505 0084 00000000 		.word	SR_lock
 506 0088 00000000 		.word	SR_reg
 507 008c 00700740 		.word	1074229248
 508              		.cfi_endproc
 509              	.LFE3:
 511              		.section	.text.SS1_GetReceivedDataNum,"ax",%progbits
 512              		.align	2
 513              		.global	SS1_GetReceivedDataNum
 514              		.code	16
 515              		.thumb_func
 517              	SS1_GetReceivedDataNum:
 518              	.LFB4:
 327:../Generated_Code/SS1.c **** 
 328:../Generated_Code/SS1.c **** /*
 329:../Generated_Code/SS1.c **** ** ===================================================================
 330:../Generated_Code/SS1.c **** **     Method      :  SS1_GetReceivedDataNum (component SPISlave_LDD)
 331:../Generated_Code/SS1.c **** */
 332:../Generated_Code/SS1.c **** /*!
 333:../Generated_Code/SS1.c **** **     @brief
 334:../Generated_Code/SS1.c **** **         Returns the number of received characters in the receive
 335:../Generated_Code/SS1.c **** **         buffer. This method is available only if the ReceiveBlock
 336:../Generated_Code/SS1.c **** **         method is enabled.
 337:../Generated_Code/SS1.c **** **     @param
 338:../Generated_Code/SS1.c **** **         DeviceDataPtr   - Device data structure
 339:../Generated_Code/SS1.c **** **                           pointer returned by <Init> method.
 340:../Generated_Code/SS1.c **** **     @return
 341:../Generated_Code/SS1.c **** **                         - The number of characters in the input
 342:../Generated_Code/SS1.c **** **                           buffer.
 343:../Generated_Code/SS1.c **** */
 344:../Generated_Code/SS1.c **** /* ===================================================================*/
 345:../Generated_Code/SS1.c **** uint16_t SS1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr)
 346:../Generated_Code/SS1.c **** {
 519              		.loc 1 346 0
 520              		.cfi_startproc
 521 0000 80B5     		push	{r7, lr}
 522              	.LCFI12:
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 7, -8
 525              		.cfi_offset 14, -4
 526 0002 82B0     		sub	sp, sp, #8
 527              	.LCFI13:
 528              		.cfi_def_cfa_offset 16
 529 0004 00AF     		add	r7, sp, #0
 530              	.LCFI14:
 531              		.cfi_def_cfa_register 7
 532 0006 7860     		str	r0, [r7, #4]
 347:../Generated_Code/SS1.c ****   return (((SS1_TDeviceDataPtr)DeviceDataPtr)->InpRecvDataNum); /* Return the number of received ch
 533              		.loc 1 347 0
 534 0008 7B68     		ldr	r3, [r7, #4]
 535 000a 9B88     		ldrh	r3, [r3, #4]
 348:../Generated_Code/SS1.c **** }
 536              		.loc 1 348 0
 537 000c 181C     		mov	r0, r3
 538 000e BD46     		mov	sp, r7
 539 0010 02B0     		add	sp, sp, #8
 540              		@ sp needed for prologue
 541 0012 80BD     		pop	{r7, pc}
 542              		.cfi_endproc
 543              	.LFE4:
 545              		.section	.text.SS1_GetSentDataNum,"ax",%progbits
 546              		.align	2
 547              		.global	SS1_GetSentDataNum
 548              		.code	16
 549              		.thumb_func
 551              	SS1_GetSentDataNum:
 552              	.LFB5:
 349:../Generated_Code/SS1.c **** 
 350:../Generated_Code/SS1.c **** /*
 351:../Generated_Code/SS1.c **** ** ===================================================================
 352:../Generated_Code/SS1.c **** **     Method      :  SS1_GetSentDataNum (component SPISlave_LDD)
 353:../Generated_Code/SS1.c **** */
 354:../Generated_Code/SS1.c **** /*!
 355:../Generated_Code/SS1.c **** **     @brief
 356:../Generated_Code/SS1.c **** **         Returns the number of sent characters. This method is
 357:../Generated_Code/SS1.c **** **         available only if method SendBlock is enabled.
 358:../Generated_Code/SS1.c **** **     @param
 359:../Generated_Code/SS1.c **** **         DeviceDataPtr   - Device data structure
 360:../Generated_Code/SS1.c **** **                           pointer returned by <Init> method.
 361:../Generated_Code/SS1.c **** **     @return
 362:../Generated_Code/SS1.c **** **                         - The number of characters in the output
 363:../Generated_Code/SS1.c **** **                           buffer.
 364:../Generated_Code/SS1.c **** */
 365:../Generated_Code/SS1.c **** /* ===================================================================*/
 366:../Generated_Code/SS1.c **** uint16_t SS1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr)
 367:../Generated_Code/SS1.c **** {
 553              		.loc 1 367 0
 554              		.cfi_startproc
 555 0000 80B5     		push	{r7, lr}
 556              	.LCFI15:
 557              		.cfi_def_cfa_offset 8
 558              		.cfi_offset 7, -8
 559              		.cfi_offset 14, -4
 560 0002 82B0     		sub	sp, sp, #8
 561              	.LCFI16:
 562              		.cfi_def_cfa_offset 16
 563 0004 00AF     		add	r7, sp, #0
 564              	.LCFI17:
 565              		.cfi_def_cfa_register 7
 566 0006 7860     		str	r0, [r7, #4]
 368:../Generated_Code/SS1.c ****   return (((SS1_TDeviceDataPtr)DeviceDataPtr)->OutSentDataNum); /* Return the number of sent charac
 567              		.loc 1 368 0
 568 0008 7B68     		ldr	r3, [r7, #4]
 569 000a DB89     		ldrh	r3, [r3, #14]
 369:../Generated_Code/SS1.c **** }
 570              		.loc 1 369 0
 571 000c 181C     		mov	r0, r3
 572 000e BD46     		mov	sp, r7
 573 0010 02B0     		add	sp, sp, #8
 574              		@ sp needed for prologue
 575 0012 80BD     		pop	{r7, pc}
 576              		.cfi_endproc
 577              	.LFE5:
 579              		.section	.text.SS1_Interrupt,"ax",%progbits
 580              		.align	2
 581              		.global	SS1_Interrupt
 582              		.code	16
 583              		.thumb_func
 585              	SS1_Interrupt:
 586              	.LFB6:
 370:../Generated_Code/SS1.c **** 
 371:../Generated_Code/SS1.c **** /*
 372:../Generated_Code/SS1.c **** ** ===================================================================
 373:../Generated_Code/SS1.c **** **     Method      :  SS1_Interrupt (component SPISlave_LDD)
 374:../Generated_Code/SS1.c **** **
 375:../Generated_Code/SS1.c **** **     Description :
 376:../Generated_Code/SS1.c **** **         The ISR function handling the device receive/transmit 
 377:../Generated_Code/SS1.c **** **         interrupt.
 378:../Generated_Code/SS1.c **** **         This method is internal. It is used by Processor Expert only.
 379:../Generated_Code/SS1.c **** ** ===================================================================
 380:../Generated_Code/SS1.c **** */
 381:../Generated_Code/SS1.c **** PE_ISR(SS1_Interrupt)
 382:../Generated_Code/SS1.c **** {
 587              		.loc 1 382 0
 588              		.cfi_startproc
 589 0000 80B5     		push	{r7, lr}
 590              	.LCFI18:
 591              		.cfi_def_cfa_offset 8
 592              		.cfi_offset 7, -8
 593              		.cfi_offset 14, -4
 594 0002 82B0     		sub	sp, sp, #8
 595              	.LCFI19:
 596              		.cfi_def_cfa_offset 16
 597 0004 00AF     		add	r7, sp, #0
 598              	.LCFI20:
 599              		.cfi_def_cfa_register 7
 383:../Generated_Code/SS1.c ****   /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
 384:../Generated_Code/SS1.c ****   SS1_TDeviceDataPtr DeviceDataPrv = INT_SPI1__DEFAULT_RTOS_ISRPARAM;
 600              		.loc 1 384 0
 601 0006 344B     		ldr	r3, .L31
 602 0008 1B68     		ldr	r3, [r3]
 603 000a 7B60     		str	r3, [r7, #4]
 385:../Generated_Code/SS1.c ****   uint8_t StatReg = SPI_PDD_ReadStatusReg(SPI1_BASE_PTR); /* Read status register */
 604              		.loc 1 385 0
 605 000c 334A     		ldr	r2, .L31+4
 606 000e FB1C     		add	r3, r7, #3
 607 0010 D278     		ldrb	r2, [r2, #3]
 608 0012 1A70     		strb	r2, [r3]
 386:../Generated_Code/SS1.c **** 
 387:../Generated_Code/SS1.c ****   (void)DeviceDataPrv;                 /* Supress unused variable warning if needed */
 388:../Generated_Code/SS1.c ****   if ((StatReg & SPI_PDD_RX_BUFFER_FULL) != 0U) { /* Is any char in HW Rx buffer? */
 609              		.loc 1 388 0
 610 0014 FB1C     		add	r3, r7, #3
 611 0016 1B78     		ldrb	r3, [r3]
 612 0018 5BB2     		sxtb	r3, r3
 613 001a 002B     		cmp	r3, #0
 614 001c 28DA     		bge	.L28
 389:../Generated_Code/SS1.c ****     if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
 615              		.loc 1 389 0
 616 001e 7B68     		ldr	r3, [r7, #4]
 617 0020 9B89     		ldrh	r3, [r3, #12]
 618 0022 002B     		cmp	r3, #0
 619 0024 24D0     		beq	.L28
 390:../Generated_Code/SS1.c ****       *(DeviceDataPrv->InpDataPtr++) = SPI_PDD_ReadData8bit(SPI1_BASE_PTR); /* Put a character to t
 620              		.loc 1 390 0
 621 0026 7B68     		ldr	r3, [r7, #4]
 622 0028 9B68     		ldr	r3, [r3, #8]
 623 002a 2C4A     		ldr	r2, .L31+4
 624 002c 5279     		ldrb	r2, [r2, #5]
 625 002e D2B2     		uxtb	r2, r2
 626 0030 1A70     		strb	r2, [r3]
 627 0032 5A1C     		add	r2, r3, #1
 628 0034 7B68     		ldr	r3, [r7, #4]
 629 0036 9A60     		str	r2, [r3, #8]
 391:../Generated_Code/SS1.c ****       DeviceDataPrv->InpRecvDataNum++; /* Increment received char. counter */
 630              		.loc 1 391 0
 631 0038 7B68     		ldr	r3, [r7, #4]
 632 003a 9B88     		ldrh	r3, [r3, #4]
 633 003c 0133     		add	r3, r3, #1
 634 003e 9AB2     		uxth	r2, r3
 635 0040 7B68     		ldr	r3, [r7, #4]
 636 0042 9A80     		strh	r2, [r3, #4]
 392:../Generated_Code/SS1.c ****       if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested numb
 637              		.loc 1 392 0
 638 0044 7B68     		ldr	r3, [r7, #4]
 639 0046 9A88     		ldrh	r2, [r3, #4]
 640 0048 7B68     		ldr	r3, [r7, #4]
 641 004a 9B89     		ldrh	r3, [r3, #12]
 642 004c 9A42     		cmp	r2, r3
 643 004e 0FD1     		bne	.L28
 393:../Generated_Code/SS1.c ****         SPI_PDD_DisableInterruptMask(SPI1_BASE_PTR, SPI_PDD_RX_BUFFER_FULL_OR_FAULT); /* Disable Rx
 644              		.loc 1 393 0
 645 0050 224B     		ldr	r3, .L31+4
 646 0052 224A     		ldr	r2, .L31+4
 647 0054 1278     		ldrb	r2, [r2]
 648 0056 D1B2     		uxtb	r1, r2
 649 0058 7F22     		mov	r2, #127
 650 005a 0A40     		and	r2, r1
 651 005c D2B2     		uxtb	r2, r2
 652 005e 1A70     		strb	r2, [r3]
 394:../Generated_Code/SS1.c ****         DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters t
 653              		.loc 1 394 0
 654 0060 7B68     		ldr	r3, [r7, #4]
 655 0062 0022     		mov	r2, #0
 656 0064 9A81     		strh	r2, [r3, #12]
 395:../Generated_Code/SS1.c ****         SS1_OnBlockReceived(DeviceDataPrv->UserData);
 657              		.loc 1 395 0
 658 0066 7B68     		ldr	r3, [r7, #4]
 659 0068 9B69     		ldr	r3, [r3, #24]
 660 006a 181C     		mov	r0, r3
 661 006c FFF7FEFF 		bl	SS1_OnBlockReceived
 662              	.L28:
 396:../Generated_Code/SS1.c ****       }
 397:../Generated_Code/SS1.c ****     }
 398:../Generated_Code/SS1.c ****   }
 399:../Generated_Code/SS1.c ****   if ((StatReg & SPI_PDD_TX_BUFFER_EMPTYG) != 0U) { /* Is HW Tx buffer empty? */
 663              		.loc 1 399 0
 664 0070 FB1C     		add	r3, r7, #3
 665 0072 1A78     		ldrb	r2, [r3]
 666 0074 2023     		mov	r3, #32
 667 0076 1340     		and	r3, r2
 668 0078 2AD0     		beq	.L27
 400:../Generated_Code/SS1.c ****     if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent charac
 669              		.loc 1 400 0
 670 007a 7B68     		ldr	r3, [r7, #4]
 671 007c DA89     		ldrh	r2, [r3, #14]
 672 007e 7B68     		ldr	r3, [r7, #4]
 673 0080 9B8A     		ldrh	r3, [r3, #20]
 674 0082 9A42     		cmp	r2, r3
 675 0084 1CD2     		bcs	.L30
 401:../Generated_Code/SS1.c ****       SPI_PDD_WriteData8Bit(SPI1_BASE_PTR, (*((uint8_t *)DeviceDataPrv->OutDataPtr++))); /* Put a c
 676              		.loc 1 401 0
 677 0086 154A     		ldr	r2, .L31+4
 678 0088 7B68     		ldr	r3, [r7, #4]
 679 008a 1B69     		ldr	r3, [r3, #16]
 680 008c 1978     		ldrb	r1, [r3]
 681 008e 5171     		strb	r1, [r2, #5]
 682 0090 5A1C     		add	r2, r3, #1
 683 0092 7B68     		ldr	r3, [r7, #4]
 684 0094 1A61     		str	r2, [r3, #16]
 402:../Generated_Code/SS1.c ****       DeviceDataPrv->OutSentDataNum++; /* Increment the counter of sent characters. */
 685              		.loc 1 402 0
 686 0096 7B68     		ldr	r3, [r7, #4]
 687 0098 DB89     		ldrh	r3, [r3, #14]
 688 009a 0133     		add	r3, r3, #1
 689 009c 9AB2     		uxth	r2, r3
 690 009e 7B68     		ldr	r3, [r7, #4]
 691 00a0 DA81     		strh	r2, [r3, #14]
 403:../Generated_Code/SS1.c ****       if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
 692              		.loc 1 403 0
 693 00a2 7B68     		ldr	r3, [r7, #4]
 694 00a4 DA89     		ldrh	r2, [r3, #14]
 695 00a6 7B68     		ldr	r3, [r7, #4]
 696 00a8 9B8A     		ldrh	r3, [r3, #20]
 697 00aa 9A42     		cmp	r2, r3
 698 00ac 10D1     		bne	.L27
 404:../Generated_Code/SS1.c ****         DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by Send
 699              		.loc 1 404 0
 700 00ae 7B68     		ldr	r3, [r7, #4]
 701 00b0 0022     		mov	r2, #0
 702 00b2 9A82     		strh	r2, [r3, #20]
 405:../Generated_Code/SS1.c ****         SS1_OnBlockSent(DeviceDataPrv->UserData);
 703              		.loc 1 405 0
 704 00b4 7B68     		ldr	r3, [r7, #4]
 705 00b6 9B69     		ldr	r3, [r3, #24]
 706 00b8 181C     		mov	r0, r3
 707 00ba FFF7FEFF 		bl	SS1_OnBlockSent
 708 00be 07E0     		b	.L27
 709              	.L30:
 406:../Generated_Code/SS1.c ****       }
 407:../Generated_Code/SS1.c ****     } else {
 408:../Generated_Code/SS1.c ****       SPI_PDD_DisableInterruptMask(SPI1_BASE_PTR, SPI_PDD_TX_BUFFER_EMPTY); /* Disable TX interrupt
 710              		.loc 1 408 0
 711 00c0 064B     		ldr	r3, .L31+4
 712 00c2 064A     		ldr	r2, .L31+4
 713 00c4 1278     		ldrb	r2, [r2]
 714 00c6 D2B2     		uxtb	r2, r2
 715 00c8 2021     		mov	r1, #32
 716 00ca 8A43     		bic	r2, r1
 717 00cc D2B2     		uxtb	r2, r2
 718 00ce 1A70     		strb	r2, [r3]
 719              	.L27:
 409:../Generated_Code/SS1.c ****     }
 410:../Generated_Code/SS1.c ****   }
 411:../Generated_Code/SS1.c **** }
 720              		.loc 1 411 0
 721 00d0 BD46     		mov	sp, r7
 722 00d2 02B0     		add	sp, sp, #8
 723              		@ sp needed for prologue
 724 00d4 80BD     		pop	{r7, pc}
 725              	.L32:
 726 00d6 C046     		.align	2
 727              	.L31:
 728 00d8 00000000 		.word	INT_SPI1__DEFAULT_RTOS_ISRPARAM
 729 00dc 00700740 		.word	1074229248
 730              		.cfi_endproc
 731              	.LFE6:
 733              		.text
 734              	.Letext0:
 735              		.file 2 "E:/Freescale/CW MCU v10.5/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 736              		.file 3 "D:/kuaipan/SEMG/FRDM_KL25Z_SPI/spi_demo/Generated_Code/PE_Types.h"
 737              		.file 4 "D:/kuaipan/SEMG/FRDM_KL25Z_SPI/spi_demo/Generated_Code/IO_Map.h"
 738              		.file 5 "D:/kuaipan/SEMG/FRDM_KL25Z_SPI/spi_demo/Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 SS1.c
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:24     .bss.INT_SPI1__DEFAULT_RTOS_ISRPARAM:00000000 $d
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:27     .bss.INT_SPI1__DEFAULT_RTOS_ISRPARAM:00000000 INT_SPI1__DEFAULT_RTOS_ISRPARAM
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:30     .text.SS1_Init:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:35     .text.SS1_Init:00000000 SS1_Init
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:203    .text.SS1_Init:000000fc $d
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:216    .text.SS1_Deinit:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:221    .text.SS1_Deinit:00000000 SS1_Deinit
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:262    .text.SS1_Deinit:0000002c $d
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:271    .text.SS1_ReceiveBlock:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:276    .text.SS1_ReceiveBlock:00000000 SS1_ReceiveBlock
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:391    .text.SS1_ReceiveBlock:00000098 $d
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:398    .text.SS1_SendBlock:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:403    .text.SS1_SendBlock:00000000 SS1_SendBlock
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:505    .text.SS1_SendBlock:00000084 $d
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:512    .text.SS1_GetReceivedDataNum:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:517    .text.SS1_GetReceivedDataNum:00000000 SS1_GetReceivedDataNum
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:546    .text.SS1_GetSentDataNum:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:551    .text.SS1_GetSentDataNum:00000000 SS1_GetSentDataNum
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:580    .text.SS1_Interrupt:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:585    .text.SS1_Interrupt:00000000 SS1_Interrupt
C:\Users\lab\AppData\Local\Temp\ccvUbgD9.s:728    .text.SS1_Interrupt:000000d8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
SR_lock
SR_reg
SS1_OnBlockReceived
SS1_OnBlockSent

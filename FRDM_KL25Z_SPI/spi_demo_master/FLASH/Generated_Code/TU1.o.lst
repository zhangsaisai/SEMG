   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TU1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	12
  22      00000000 
  22      00000000 
  23              		.section	.bss.INT_TPM0__DEFAULT_RTOS_ISRPARAM,"aw",%nobits
  24              		.align	2
  27              	INT_TPM0__DEFAULT_RTOS_ISRPARAM:
  28 0000 00000000 		.space	4
  29              		.section	.text.TU1_Init,"ax",%progbits
  30              		.align	2
  31              		.global	TU1_Init
  32              		.code	16
  33              		.thumb_func
  35              	TU1_Init:
  36              	.LFB0:
  37              		.file 1 "../Generated_Code/TU1.c"
   1:../Generated_Code/TU1.c **** /* ###################################################################
   2:../Generated_Code/TU1.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/TU1.c **** **     Filename    : TU1.c
   4:../Generated_Code/TU1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/TU1.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/TU1.c **** **     Component   : TimerUnit_LDD
   7:../Generated_Code/TU1.c **** **     Version     : Component 01.158, Driver 01.11, CPU db: 3.00.000
   8:../Generated_Code/TU1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/TU1.c **** **     Date/Time   : 2015-10-18, 10:29, # CodeGen: 22
  10:../Generated_Code/TU1.c **** **     Abstract    :
  11:../Generated_Code/TU1.c **** **          This TimerUnit component provides a low level API for unified hardware access across
  12:../Generated_Code/TU1.c **** **          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
  13:../Generated_Code/TU1.c **** **     Settings    :
  14:../Generated_Code/TU1.c **** **          Component name                                 : TU1
  15:../Generated_Code/TU1.c **** **          Module name                                    : TPM0
  16:../Generated_Code/TU1.c **** **          Counter                                        : TPM0_CNT
  17:../Generated_Code/TU1.c **** **          Counter direction                              : Up
  18:../Generated_Code/TU1.c **** **          Counter width                                  : 16 bits
  19:../Generated_Code/TU1.c **** **          Value type                                     : uint16_t
  20:../Generated_Code/TU1.c **** **          Input clock source                             : Internal
  21:../Generated_Code/TU1.c **** **            Counter frequency                            : Auto select
  22:../Generated_Code/TU1.c **** **          Counter restart                                : On-match
  23:../Generated_Code/TU1.c **** **            Period device                                : TPM0_MOD
  24:../Generated_Code/TU1.c **** **            Period                                       : 100 ms
  25:../Generated_Code/TU1.c **** **            Interrupt                                    : Enabled
  26:../Generated_Code/TU1.c **** **              Interrupt                                  : INT_TPM0
  27:../Generated_Code/TU1.c **** **              Interrupt priority                         : minimal priority
  28:../Generated_Code/TU1.c **** **          Channel list                                   : 0
  29:../Generated_Code/TU1.c **** **          Initialization                                 : 
  30:../Generated_Code/TU1.c **** **            Enabled in init. code                        : yes
  31:../Generated_Code/TU1.c **** **            Auto initialization                          : no
  32:../Generated_Code/TU1.c **** **            Event mask                                   : 
  33:../Generated_Code/TU1.c **** **              OnCounterRestart                           : Enabled
  34:../Generated_Code/TU1.c **** **              OnChannel0                                 : Disabled
  35:../Generated_Code/TU1.c **** **              OnChannel1                                 : Disabled
  36:../Generated_Code/TU1.c **** **              OnChannel2                                 : Disabled
  37:../Generated_Code/TU1.c **** **              OnChannel3                                 : Disabled
  38:../Generated_Code/TU1.c **** **              OnChannel4                                 : Disabled
  39:../Generated_Code/TU1.c **** **              OnChannel5                                 : Disabled
  40:../Generated_Code/TU1.c **** **              OnChannel6                                 : Disabled
  41:../Generated_Code/TU1.c **** **              OnChannel7                                 : Disabled
  42:../Generated_Code/TU1.c **** **          CPU clock/configuration selection              : 
  43:../Generated_Code/TU1.c **** **            Clock configuration 0                        : This component enabled
  44:../Generated_Code/TU1.c **** **            Clock configuration 1                        : This component disabled
  45:../Generated_Code/TU1.c **** **            Clock configuration 2                        : This component disabled
  46:../Generated_Code/TU1.c **** **            Clock configuration 3                        : This component disabled
  47:../Generated_Code/TU1.c **** **            Clock configuration 4                        : This component disabled
  48:../Generated_Code/TU1.c **** **            Clock configuration 5                        : This component disabled
  49:../Generated_Code/TU1.c **** **            Clock configuration 6                        : This component disabled
  50:../Generated_Code/TU1.c **** **            Clock configuration 7                        : This component disabled
  51:../Generated_Code/TU1.c **** **     Contents    :
  52:../Generated_Code/TU1.c **** **         Init - LDD_TDeviceData* TU1_Init(LDD_TUserData *UserDataPtr);
  53:../Generated_Code/TU1.c **** **
  54:../Generated_Code/TU1.c **** **     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
  55:../Generated_Code/TU1.c **** **     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
  56:../Generated_Code/TU1.c **** **     
  57:../Generated_Code/TU1.c **** **     http      : www.freescale.com
  58:../Generated_Code/TU1.c **** **     mail      : support@freescale.com
  59:../Generated_Code/TU1.c **** ** ###################################################################*/
  60:../Generated_Code/TU1.c **** /*!
  61:../Generated_Code/TU1.c **** ** @file TU1.c
  62:../Generated_Code/TU1.c **** ** @version 01.11
  63:../Generated_Code/TU1.c **** ** @brief
  64:../Generated_Code/TU1.c **** **          This TimerUnit component provides a low level API for unified hardware access across
  65:../Generated_Code/TU1.c **** **          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
  66:../Generated_Code/TU1.c **** */         
  67:../Generated_Code/TU1.c **** /*!
  68:../Generated_Code/TU1.c **** **  @addtogroup TU1_module TU1 module documentation
  69:../Generated_Code/TU1.c **** **  @{
  70:../Generated_Code/TU1.c **** */         
  71:../Generated_Code/TU1.c **** 
  72:../Generated_Code/TU1.c **** /* MODULE TU1. */
  73:../Generated_Code/TU1.c **** 
  74:../Generated_Code/TU1.c **** #include "TimerIntLdd1.h"
  75:../Generated_Code/TU1.c **** #include "TU1.h"
  76:../Generated_Code/TU1.c **** /* {Default RTOS Adapter} No RTOS includes */
  77:../Generated_Code/TU1.c **** #include "IO_Map.h"
  78:../Generated_Code/TU1.c **** 
  79:../Generated_Code/TU1.c **** #ifdef __cplusplus
  80:../Generated_Code/TU1.c **** extern "C" {
  81:../Generated_Code/TU1.c **** #endif 
  82:../Generated_Code/TU1.c **** 
  83:../Generated_Code/TU1.c **** 
  84:../Generated_Code/TU1.c **** typedef struct {
  85:../Generated_Code/TU1.c ****   LDD_TEventMask EnEvents;             /* Enable/Disable events mask */
  86:../Generated_Code/TU1.c ****   uint8_t InitCntr;                    /* Number of initialization */
  87:../Generated_Code/TU1.c ****   LDD_TUserData *UserDataPtr;          /* RTOS device data structure */
  88:../Generated_Code/TU1.c **** } TU1_TDeviceData;
  89:../Generated_Code/TU1.c **** 
  90:../Generated_Code/TU1.c **** typedef TU1_TDeviceData *TU1_TDeviceDataPtr; /* Pointer to the device data structure. */
  91:../Generated_Code/TU1.c **** 
  92:../Generated_Code/TU1.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
  93:../Generated_Code/TU1.c **** static TU1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  94:../Generated_Code/TU1.c **** /* {Default RTOS Adapter} Global variable used for passing a parameter into ISR */
  95:../Generated_Code/TU1.c **** static TU1_TDeviceDataPtr INT_TPM0__DEFAULT_RTOS_ISRPARAM;
  96:../Generated_Code/TU1.c **** 
  97:../Generated_Code/TU1.c **** #define AVAILABLE_EVENTS_MASK (LDD_TEventMask)(LDD_TIMERUNIT_ON_COUNTER_RESTART)
  98:../Generated_Code/TU1.c **** 
  99:../Generated_Code/TU1.c **** /* Internal method prototypes */
 100:../Generated_Code/TU1.c **** /*
 101:../Generated_Code/TU1.c **** ** ===================================================================
 102:../Generated_Code/TU1.c **** **     Method      :  TU1_Init (component TimerUnit_LDD)
 103:../Generated_Code/TU1.c **** */
 104:../Generated_Code/TU1.c **** /*!
 105:../Generated_Code/TU1.c **** **     @brief
 106:../Generated_Code/TU1.c **** **         Initializes the device. Allocates memory for the device data
 107:../Generated_Code/TU1.c **** **         structure, allocates interrupt vectors and sets interrupt
 108:../Generated_Code/TU1.c **** **         priority, sets pin routing, sets timing, etc. If the
 109:../Generated_Code/TU1.c **** **         property ["Enable in init. code"] is set to "yes" value then
 110:../Generated_Code/TU1.c **** **         the device is also enabled (see the description of the
 111:../Generated_Code/TU1.c **** **         [Enable] method). In this case the [Enable] method is not
 112:../Generated_Code/TU1.c **** **         necessary and needn't to be generated. This method can be
 113:../Generated_Code/TU1.c **** **         called only once. Before the second call of Init the [Deinit]
 114:../Generated_Code/TU1.c **** **         must be called first.
 115:../Generated_Code/TU1.c **** **     @param
 116:../Generated_Code/TU1.c **** **         UserDataPtr     - Pointer to the user or
 117:../Generated_Code/TU1.c **** **                           RTOS specific data. This pointer will be
 118:../Generated_Code/TU1.c **** **                           passed as an event or callback parameter.
 119:../Generated_Code/TU1.c **** **     @return
 120:../Generated_Code/TU1.c **** **                         - Pointer to the dynamically allocated private
 121:../Generated_Code/TU1.c **** **                           structure or NULL if there was an error.
 122:../Generated_Code/TU1.c **** */
 123:../Generated_Code/TU1.c **** /* ===================================================================*/
 124:../Generated_Code/TU1.c **** LDD_TDeviceData* TU1_Init(LDD_TUserData *UserDataPtr)
 125:../Generated_Code/TU1.c **** {
  38              		.loc 1 125 0
  39              		.cfi_startproc
  40 0000 80B5     		push	{r7, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  45 0002 84B0     		sub	sp, sp, #16
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 24
  48 0004 00AF     		add	r7, sp, #0
  49              	.LCFI2:
  50              		.cfi_def_cfa_register 7
  51 0006 7860     		str	r0, [r7, #4]
 126:../Generated_Code/TU1.c ****   TU1_TDeviceData *DeviceDataPrv;
 127:../Generated_Code/TU1.c **** 
 128:../Generated_Code/TU1.c ****   if (PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU1_ID] == NULL) {
  52              		.loc 1 128 0
  53 0008 314B     		ldr	r3, .L4
  54 000a 9B68     		ldr	r3, [r3, #8]
  55 000c 002B     		cmp	r3, #0
  56 000e 4ED1     		bne	.L2
 129:../Generated_Code/TU1.c ****     /* Allocate device structure */
 130:../Generated_Code/TU1.c ****     /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointe
 131:../Generated_Code/TU1.c ****     DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  57              		.loc 1 131 0
  58 0010 304B     		ldr	r3, .L4+4
  59 0012 FB60     		str	r3, [r7, #12]
 132:../Generated_Code/TU1.c ****     DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  60              		.loc 1 132 0
  61 0014 FB68     		ldr	r3, [r7, #12]
  62 0016 7A68     		ldr	r2, [r7, #4]
  63 0018 9A60     		str	r2, [r3, #8]
 133:../Generated_Code/TU1.c ****     DeviceDataPrv->InitCntr = 1U;      /* First initialization */
  64              		.loc 1 133 0
  65 001a FB68     		ldr	r3, [r7, #12]
  66 001c 0122     		mov	r2, #1
  67 001e 1A71     		strb	r2, [r3, #4]
 134:../Generated_Code/TU1.c ****   }
 135:../Generated_Code/TU1.c ****   else {
 136:../Generated_Code/TU1.c ****     /* Memory is already allocated */
 137:../Generated_Code/TU1.c ****     DeviceDataPrv = (TU1_TDeviceDataPtr) PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU1_ID];
 138:../Generated_Code/TU1.c ****     DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
 139:../Generated_Code/TU1.c ****     DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
 140:../Generated_Code/TU1.c ****     return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
 141:../Generated_Code/TU1.c ****   }
 142:../Generated_Code/TU1.c ****   /* Interrupt vector(s) allocation */
 143:../Generated_Code/TU1.c ****   /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the glo
 144:../Generated_Code/TU1.c ****   INT_TPM0__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
  68              		.loc 1 144 0
  69 0020 2D4B     		ldr	r3, .L4+8
  70 0022 FA68     		ldr	r2, [r7, #12]
  71 0024 1A60     		str	r2, [r3]
 145:../Generated_Code/TU1.c ****   /* SIM_SCGC6: TPM0=1 */
 146:../Generated_Code/TU1.c ****   SIM_SCGC6 |= SIM_SCGC6_TPM0_MASK;                                   
  72              		.loc 1 146 0
  73 0026 2D4A     		ldr	r2, .L4+12
  74 0028 2C49     		ldr	r1, .L4+12
  75 002a 2D4B     		ldr	r3, .L4+16
  76 002c CB58     		ldr	r3, [r1, r3]
  77 002e 8021     		mov	r1, #128
  78 0030 4904     		lsl	r1, r1, #17
  79 0032 1943     		orr	r1, r3
  80 0034 2A4B     		ldr	r3, .L4+16
  81 0036 D150     		str	r1, [r2, r3]
 147:../Generated_Code/TU1.c ****   /* TPM0_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 148:../Generated_Code/TU1.c ****   TPM0_SC = (TPM_SC_CMOD(0x00) | TPM_SC_PS(0x00)); /* Clear status and control register */
  82              		.loc 1 148 0
  83 0038 2A4B     		ldr	r3, .L4+20
  84 003a 0022     		mov	r2, #0
  85 003c 1A60     		str	r2, [r3]
 149:../Generated_Code/TU1.c ****   /* TPM0_CNT: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUN
 150:../Generated_Code/TU1.c ****   TPM0_CNT = TPM_CNT_COUNT(0x00);      /* Reset counter register */
  86              		.loc 1 150 0
  87 003e 294B     		ldr	r3, .L4+20
  88 0040 0022     		mov	r2, #0
  89 0042 5A60     		str	r2, [r3, #4]
 151:../Generated_Code/TU1.c ****   /* TPM0_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 152:../Generated_Code/TU1.c ****   TPM0_C0SC = 0x00U;                   /* Clear channel status and control register */
  90              		.loc 1 152 0
  91 0044 274B     		ldr	r3, .L4+20
  92 0046 0022     		mov	r2, #0
  93 0048 DA60     		str	r2, [r3, #12]
 153:../Generated_Code/TU1.c ****   /* TPM0_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 154:../Generated_Code/TU1.c ****   TPM0_C1SC = 0x00U;                   /* Clear channel status and control register */
  94              		.loc 1 154 0
  95 004a 264B     		ldr	r3, .L4+20
  96 004c 0022     		mov	r2, #0
  97 004e 5A61     		str	r2, [r3, #20]
 155:../Generated_Code/TU1.c ****   /* TPM0_C2SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 156:../Generated_Code/TU1.c ****   TPM0_C2SC = 0x00U;                   /* Clear channel status and control register */
  98              		.loc 1 156 0
  99 0050 244B     		ldr	r3, .L4+20
 100 0052 0022     		mov	r2, #0
 101 0054 DA61     		str	r2, [r3, #28]
 157:../Generated_Code/TU1.c ****   /* TPM0_C3SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 158:../Generated_Code/TU1.c ****   TPM0_C3SC = 0x00U;                   /* Clear channel status and control register */
 102              		.loc 1 158 0
 103 0056 234B     		ldr	r3, .L4+20
 104 0058 0022     		mov	r2, #0
 105 005a 5A62     		str	r2, [r3, #36]
 159:../Generated_Code/TU1.c ****   /* TPM0_C4SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 160:../Generated_Code/TU1.c ****   TPM0_C4SC = 0x00U;                   /* Clear channel status and control register */
 106              		.loc 1 160 0
 107 005c 214B     		ldr	r3, .L4+20
 108 005e 0022     		mov	r2, #0
 109 0060 DA62     		str	r2, [r3, #44]
 161:../Generated_Code/TU1.c ****   /* TPM0_C5SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 162:../Generated_Code/TU1.c ****   TPM0_C5SC = 0x00U;                   /* Clear channel status and control register */
 110              		.loc 1 162 0
 111 0062 204B     		ldr	r3, .L4+20
 112 0064 0022     		mov	r2, #0
 113 0066 5A63     		str	r2, [r3, #52]
 163:../Generated_Code/TU1.c ****   /* TPM0_MOD: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,MOD=
 164:../Generated_Code/TU1.c ****   TPM0_MOD = TPM_MOD_MOD(0x927B);      /* Set up modulo register */
 114              		.loc 1 164 0
 115 0068 1E4B     		ldr	r3, .L4+20
 116 006a 1F4A     		ldr	r2, .L4+24
 117 006c 9A60     		str	r2, [r3, #8]
 165:../Generated_Code/TU1.c ****   DeviceDataPrv->EnEvents = 0x0100U;   /* Enable selected events */
 118              		.loc 1 165 0
 119 006e FB68     		ldr	r3, [r7, #12]
 120 0070 8022     		mov	r2, #128
 121 0072 5200     		lsl	r2, r2, #1
 122 0074 1A60     		str	r2, [r3]
 166:../Generated_Code/TU1.c ****   /* NVIC_IPR4: PRI_17=0xC0 */
 167:../Generated_Code/TU1.c ****   NVIC_IPR4 = (uint32_t)((NVIC_IPR4 & (uint32_t)~(uint32_t)(
 123              		.loc 1 167 0
 124 0076 1D4A     		ldr	r2, .L4+28
 125 0078 1C49     		ldr	r1, .L4+28
 126 007a C423     		mov	r3, #196
 127 007c 9B00     		lsl	r3, r3, #2
 128 007e C958     		ldr	r1, [r1, r3]
 129 0080 1B4B     		ldr	r3, .L4+32
 130 0082 0B40     		and	r3, r1
 131 0084 C021     		mov	r1, #192
 132 0086 0902     		lsl	r1, r1, #8
 133 0088 1943     		orr	r1, r3
 134 008a C423     		mov	r3, #196
 135 008c 9B00     		lsl	r3, r3, #2
 136 008e D150     		str	r1, [r2, r3]
 168:../Generated_Code/TU1.c ****                NVIC_IP_PRI_17(0x3F)
 169:../Generated_Code/TU1.c ****               )) | (uint32_t)(
 170:../Generated_Code/TU1.c ****                NVIC_IP_PRI_17(0xC0)
 171:../Generated_Code/TU1.c ****               ));                                  
 172:../Generated_Code/TU1.c ****   /* NVIC_ISER: SETENA|=0x00020000 */
 173:../Generated_Code/TU1.c ****   NVIC_ISER |= NVIC_ISER_SETENA(0x00020000);                                   
 137              		.loc 1 173 0
 138 0090 164B     		ldr	r3, .L4+28
 139 0092 164A     		ldr	r2, .L4+28
 140 0094 1268     		ldr	r2, [r2]
 141 0096 8021     		mov	r1, #128
 142 0098 8902     		lsl	r1, r1, #10
 143 009a 0A43     		orr	r2, r1
 144 009c 1A60     		str	r2, [r3]
 174:../Generated_Code/TU1.c ****   /* TPM0_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 175:../Generated_Code/TU1.c ****   TPM0_SC = (TPM_SC_TOIE_MASK | TPM_SC_CMOD(0x01) | TPM_SC_PS(0x06)); /* Set up status and control 
 145              		.loc 1 175 0
 146 009e 114B     		ldr	r3, .L4+20
 147 00a0 4E22     		mov	r2, #78
 148 00a2 1A60     		str	r2, [r3]
 176:../Generated_Code/TU1.c ****   /* Registration of the device structure */
 177:../Generated_Code/TU1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU1_ID,DeviceDataPrv);
 149              		.loc 1 177 0
 150 00a4 0A4B     		ldr	r3, .L4
 151 00a6 FA68     		ldr	r2, [r7, #12]
 152 00a8 9A60     		str	r2, [r3, #8]
 178:../Generated_Code/TU1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
 153              		.loc 1 178 0
 154 00aa FB68     		ldr	r3, [r7, #12]
 155 00ac 0CE0     		b	.L3
 156              	.L2:
 137:../Generated_Code/TU1.c ****     DeviceDataPrv = (TU1_TDeviceDataPtr) PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU1_ID];
 157              		.loc 1 137 0
 158 00ae 084B     		ldr	r3, .L4
 159 00b0 9B68     		ldr	r3, [r3, #8]
 160 00b2 FB60     		str	r3, [r7, #12]
 138:../Generated_Code/TU1.c ****     DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
 161              		.loc 1 138 0
 162 00b4 FB68     		ldr	r3, [r7, #12]
 163 00b6 7A68     		ldr	r2, [r7, #4]
 164 00b8 9A60     		str	r2, [r3, #8]
 139:../Generated_Code/TU1.c ****     DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
 165              		.loc 1 139 0
 166 00ba FB68     		ldr	r3, [r7, #12]
 167 00bc 1B79     		ldrb	r3, [r3, #4]
 168 00be 0133     		add	r3, r3, #1
 169 00c0 DAB2     		uxtb	r2, r3
 170 00c2 FB68     		ldr	r3, [r7, #12]
 171 00c4 1A71     		strb	r2, [r3, #4]
 140:../Generated_Code/TU1.c ****     return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
 172              		.loc 1 140 0
 173 00c6 FB68     		ldr	r3, [r7, #12]
 174              	.L3:
 179:../Generated_Code/TU1.c **** }
 175              		.loc 1 179 0
 176 00c8 181C     		mov	r0, r3
 177 00ca BD46     		mov	sp, r7
 178 00cc 04B0     		add	sp, sp, #16
 179              		@ sp needed for prologue
 180 00ce 80BD     		pop	{r7, pc}
 181              	.L5:
 182              		.align	2
 183              	.L4:
 184 00d0 00000000 		.word	PE_LDD_DeviceDataList
 185 00d4 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 186 00d8 00000000 		.word	INT_TPM0__DEFAULT_RTOS_ISRPARAM
 187 00dc 00700440 		.word	1074032640
 188 00e0 3C100000 		.word	4156
 189 00e4 00800340 		.word	1073971200
 190 00e8 7B920000 		.word	37499
 191 00ec 00E100E0 		.word	-536813312
 192 00f0 FF00FFFF 		.word	-65281
 193              		.cfi_endproc
 194              	.LFE0:
 196              		.section	.text.TU1_Interrupt,"ax",%progbits
 197              		.align	2
 198              		.global	TU1_Interrupt
 199              		.code	16
 200              		.thumb_func
 202              	TU1_Interrupt:
 203              	.LFB1:
 180:../Generated_Code/TU1.c **** 
 181:../Generated_Code/TU1.c **** /*
 182:../Generated_Code/TU1.c **** ** ===================================================================
 183:../Generated_Code/TU1.c **** **     Method      :  TU1_Interrupt (component TimerUnit_LDD)
 184:../Generated_Code/TU1.c **** **
 185:../Generated_Code/TU1.c **** **     Description :
 186:../Generated_Code/TU1.c **** **         The method services the interrupt of the selected peripheral(s)
 187:../Generated_Code/TU1.c **** **         and eventually invokes event(s) of the component.
 188:../Generated_Code/TU1.c **** **         This method is internal. It is used by Processor Expert only.
 189:../Generated_Code/TU1.c **** ** ===================================================================
 190:../Generated_Code/TU1.c **** */
 191:../Generated_Code/TU1.c **** PE_ISR(TU1_Interrupt)
 192:../Generated_Code/TU1.c **** {
 204              		.loc 1 192 0
 205              		.cfi_startproc
 206 0000 80B5     		push	{r7, lr}
 207              	.LCFI3:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 7, -8
 210              		.cfi_offset 14, -4
 211 0002 82B0     		sub	sp, sp, #8
 212              	.LCFI4:
 213              		.cfi_def_cfa_offset 16
 214 0004 00AF     		add	r7, sp, #0
 215              	.LCFI5:
 216              		.cfi_def_cfa_register 7
 193:../Generated_Code/TU1.c ****   /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
 194:../Generated_Code/TU1.c ****   TU1_TDeviceDataPtr DeviceDataPrv = INT_TPM0__DEFAULT_RTOS_ISRPARAM;
 217              		.loc 1 194 0
 218 0006 134B     		ldr	r3, .L9
 219 0008 1B68     		ldr	r3, [r3]
 220 000a 3B60     		str	r3, [r7]
 195:../Generated_Code/TU1.c **** 
 196:../Generated_Code/TU1.c ****   LDD_TEventMask State = 0U;
 221              		.loc 1 196 0
 222 000c 0023     		mov	r3, #0
 223 000e 7B60     		str	r3, [r7, #4]
 197:../Generated_Code/TU1.c **** 
 198:../Generated_Code/TU1.c ****   if ((TPM_PDD_GetOverflowInterruptFlag(TPM0_BASE_PTR)) != 0U) { /* Is the overflow interrupt flag 
 224              		.loc 1 198 0
 225 0010 114B     		ldr	r3, .L9+4
 226 0012 1A68     		ldr	r2, [r3]
 227 0014 8023     		mov	r3, #128
 228 0016 1340     		and	r3, r2
 229 0018 04D0     		beq	.L7
 199:../Generated_Code/TU1.c ****     State |= LDD_TIMERUNIT_ON_COUNTER_RESTART; /* and set mask */
 230              		.loc 1 199 0
 231 001a 7B68     		ldr	r3, [r7, #4]
 232 001c 8022     		mov	r2, #128
 233 001e 5200     		lsl	r2, r2, #1
 234 0020 1343     		orr	r3, r2
 235 0022 7B60     		str	r3, [r7, #4]
 236              	.L7:
 200:../Generated_Code/TU1.c ****   }
 201:../Generated_Code/TU1.c ****   State &= DeviceDataPrv->EnEvents;    /* Handle only enabled interrupts */
 237              		.loc 1 201 0
 238 0024 3B68     		ldr	r3, [r7]
 239 0026 1A68     		ldr	r2, [r3]
 240 0028 7B68     		ldr	r3, [r7, #4]
 241 002a 1340     		and	r3, r2
 242 002c 7B60     		str	r3, [r7, #4]
 202:../Generated_Code/TU1.c ****   if (State & LDD_TIMERUNIT_ON_COUNTER_RESTART) { /* Is the overflow interrupt flag pending? */
 243              		.loc 1 202 0
 244 002e 7A68     		ldr	r2, [r7, #4]
 245 0030 8023     		mov	r3, #128
 246 0032 5B00     		lsl	r3, r3, #1
 247 0034 1340     		and	r3, r2
 248 0036 0AD0     		beq	.L6
 203:../Generated_Code/TU1.c ****     TPM_PDD_ClearOverflowInterruptFlag(TPM0_BASE_PTR); /* Clear flag */
 249              		.loc 1 203 0
 250 0038 074B     		ldr	r3, .L9+4
 251 003a 074A     		ldr	r2, .L9+4
 252 003c 1268     		ldr	r2, [r2]
 253 003e 8021     		mov	r1, #128
 254 0040 0A43     		orr	r2, r1
 255 0042 1A60     		str	r2, [r3]
 204:../Generated_Code/TU1.c ****     TU1_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
 256              		.loc 1 204 0
 257 0044 3B68     		ldr	r3, [r7]
 258 0046 9B68     		ldr	r3, [r3, #8]
 259 0048 181C     		mov	r0, r3
 260 004a FFF7FEFF 		bl	TU1_OnCounterRestart
 261              	.L6:
 205:../Generated_Code/TU1.c ****   }
 206:../Generated_Code/TU1.c **** }
 262              		.loc 1 206 0
 263 004e BD46     		mov	sp, r7
 264 0050 02B0     		add	sp, sp, #8
 265              		@ sp needed for prologue
 266 0052 80BD     		pop	{r7, pc}
 267              	.L10:
 268              		.align	2
 269              	.L9:
 270 0054 00000000 		.word	INT_TPM0__DEFAULT_RTOS_ISRPARAM
 271 0058 00800340 		.word	1073971200
 272              		.cfi_endproc
 273              	.LFE1:
 275              		.text
 276              	.Letext0:
 277              		.file 2 "E:/Freescale/CW MCU v10.5/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 278              		.file 3 "../Generated_Code/PE_Types.h"
 279              		.file 4 "../Generated_Code/IO_Map.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TU1.c
C:\Users\lab\AppData\Local\Temp\ccO7Y3Zr.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\lab\AppData\Local\Temp\ccO7Y3Zr.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\lab\AppData\Local\Temp\ccO7Y3Zr.s:24     .bss.INT_TPM0__DEFAULT_RTOS_ISRPARAM:00000000 $d
C:\Users\lab\AppData\Local\Temp\ccO7Y3Zr.s:27     .bss.INT_TPM0__DEFAULT_RTOS_ISRPARAM:00000000 INT_TPM0__DEFAULT_RTOS_ISRPARAM
C:\Users\lab\AppData\Local\Temp\ccO7Y3Zr.s:30     .text.TU1_Init:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccO7Y3Zr.s:35     .text.TU1_Init:00000000 TU1_Init
C:\Users\lab\AppData\Local\Temp\ccO7Y3Zr.s:184    .text.TU1_Init:000000d0 $d
C:\Users\lab\AppData\Local\Temp\ccO7Y3Zr.s:197    .text.TU1_Interrupt:00000000 $t
C:\Users\lab\AppData\Local\Temp\ccO7Y3Zr.s:202    .text.TU1_Interrupt:00000000 TU1_Interrupt
C:\Users\lab\AppData\Local\Temp\ccO7Y3Zr.s:270    .text.TU1_Interrupt:00000054 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
TU1_OnCounterRestart

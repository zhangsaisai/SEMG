   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SR_reg,1,1
  18              		.global	SR_lock
  19              		.section	.bss.SR_lock,"aw",%nobits
  22              	SR_lock:
  23 0000 00       		.space	1
  24              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  25              		.align	2
  26              		.global	Cpu_INT_NMIInterrupt
  27              		.code	16
  28              		.thumb_func
  30              	Cpu_INT_NMIInterrupt:
  31              	.LFB0:
  32              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /* ###################################################################
   2:../Generated_Code/Cpu.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2015-10-18, 10:15, # CodeGen: 22
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         SetOperationMode - LDD_TError Cpu_SetOperationMode(LDD_TDriverOperationMode OperationMod
  17:../Generated_Code/Cpu.c **** **         EnableInt        - void Cpu_EnableInt(void);
  18:../Generated_Code/Cpu.c **** **         DisableInt       - void Cpu_DisableInt(void);
  19:../Generated_Code/Cpu.c **** **
  20:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
  21:../Generated_Code/Cpu.c **** **     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
  22:../Generated_Code/Cpu.c **** **     
  23:../Generated_Code/Cpu.c **** **     http      : www.freescale.com
  24:../Generated_Code/Cpu.c **** **     mail      : support@freescale.com
  25:../Generated_Code/Cpu.c **** ** ###################################################################*/
  26:../Generated_Code/Cpu.c **** /*!
  27:../Generated_Code/Cpu.c **** ** @file Cpu.c
  28:../Generated_Code/Cpu.c **** ** @version 01.04
  29:../Generated_Code/Cpu.c **** ** @brief
  30:../Generated_Code/Cpu.c **** **
  31:../Generated_Code/Cpu.c **** */         
  32:../Generated_Code/Cpu.c **** /*!
  33:../Generated_Code/Cpu.c **** **  @addtogroup Cpu_module Cpu module documentation
  34:../Generated_Code/Cpu.c **** **  @{
  35:../Generated_Code/Cpu.c **** */         
  36:../Generated_Code/Cpu.c **** 
  37:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  38:../Generated_Code/Cpu.c **** 
  39:../Generated_Code/Cpu.c **** /* {Default RTOS Adapter} No RTOS includes */
  40:../Generated_Code/Cpu.c **** #include "CsIO1.h"
  41:../Generated_Code/Cpu.c **** #include "IO1.h"
  42:../Generated_Code/Cpu.c **** #include "SS1.h"
  43:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  44:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  45:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  46:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  47:../Generated_Code/Cpu.c **** #include "Events.h"
  48:../Generated_Code/Cpu.c **** #include "Cpu.h"
  49:../Generated_Code/Cpu.c **** 
  50:../Generated_Code/Cpu.c **** #ifdef __cplusplus
  51:../Generated_Code/Cpu.c **** extern "C" {
  52:../Generated_Code/Cpu.c **** #endif 
  53:../Generated_Code/Cpu.c **** 
  54:../Generated_Code/Cpu.c **** /* Global variables */
  55:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  56:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  57:../Generated_Code/Cpu.c **** 
  58:../Generated_Code/Cpu.c **** 
  59:../Generated_Code/Cpu.c **** /*
  60:../Generated_Code/Cpu.c **** ** ===================================================================
  61:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MKL25Z128LK4)
  62:../Generated_Code/Cpu.c **** **
  63:../Generated_Code/Cpu.c **** **     Description :
  64:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
  65:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  66:../Generated_Code/Cpu.c **** ** ===================================================================
  67:../Generated_Code/Cpu.c **** */
  68:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_NMIInterrupt)
  69:../Generated_Code/Cpu.c **** {
  33              		.loc 1 69 0
  34              		.cfi_startproc
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 00AF     		add	r7, sp, #0
  41              	.LCFI1:
  42              		.cfi_def_cfa_register 7
  70:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT();
  43              		.loc 1 70 0
  44 0004 FFF7FEFF 		bl	Cpu_OnNMIINT
  71:../Generated_Code/Cpu.c **** }
  45              		.loc 1 71 0
  46 0008 BD46     		mov	sp, r7
  47              		@ sp needed for prologue
  48 000a 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE0:
  52              		.section	.text.Cpu_INT_Hard_FaultInterrupt,"ax",%progbits
  53              		.align	2
  54              		.global	Cpu_INT_Hard_FaultInterrupt
  55              		.code	16
  56              		.thumb_func
  58              	Cpu_INT_Hard_FaultInterrupt:
  59              	.LFB1:
  72:../Generated_Code/Cpu.c **** 
  73:../Generated_Code/Cpu.c **** /*
  74:../Generated_Code/Cpu.c **** ** ===================================================================
  75:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_Hard_FaultInterrupt (component MKL25Z128LK4)
  76:../Generated_Code/Cpu.c **** **
  77:../Generated_Code/Cpu.c **** **     Description :
  78:../Generated_Code/Cpu.c **** **         This ISR services the 'hard fault' interrupt.
  79:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  80:../Generated_Code/Cpu.c **** ** ===================================================================
  81:../Generated_Code/Cpu.c **** */
  82:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_Hard_FaultInterrupt)
  83:../Generated_Code/Cpu.c **** {
  60              		.loc 1 83 0
  61              		.cfi_startproc
  62 0000 80B5     		push	{r7, lr}
  63              	.LCFI2:
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 00AF     		add	r7, sp, #0
  68              	.LCFI3:
  69              		.cfi_def_cfa_register 7
  84:../Generated_Code/Cpu.c ****   Cpu_OnHardFault();
  70              		.loc 1 84 0
  71 0004 FFF7FEFF 		bl	Cpu_OnHardFault
  85:../Generated_Code/Cpu.c **** }
  72              		.loc 1 85 0
  73 0008 BD46     		mov	sp, r7
  74              		@ sp needed for prologue
  75 000a 80BD     		pop	{r7, pc}
  76              		.cfi_endproc
  77              	.LFE1:
  79              		.section	.text.Cpu_Interrupt,"ax",%progbits
  80              		.align	2
  81              		.global	Cpu_Interrupt
  82              		.code	16
  83              		.thumb_func
  85              	Cpu_Interrupt:
  86              	.LFB2:
  86:../Generated_Code/Cpu.c **** 
  87:../Generated_Code/Cpu.c **** /*
  88:../Generated_Code/Cpu.c **** ** ===================================================================
  89:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
  90:../Generated_Code/Cpu.c **** **
  91:../Generated_Code/Cpu.c **** **     Description :
  92:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
  93:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  94:../Generated_Code/Cpu.c **** ** ===================================================================
  95:../Generated_Code/Cpu.c **** */
  96:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
  97:../Generated_Code/Cpu.c **** {
  87              		.loc 1 97 0
  88              		.cfi_startproc
  89 0000 80B5     		push	{r7, lr}
  90              	.LCFI4:
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 7, -8
  93              		.cfi_offset 14, -4
  94 0002 00AF     		add	r7, sp, #0
  95              	.LCFI5:
  96              		.cfi_def_cfa_register 7
  98:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
  99:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  97              		.loc 1 99 0
  98              	@ 99 "../Generated_Code/Cpu.c" 1
  99 0004 FFBE     		BKPT 255
 100              	@ 0 "" 2
 100:../Generated_Code/Cpu.c **** }
 101              		.loc 1 100 0
 102              		.code	16
 103 0006 BD46     		mov	sp, r7
 104              		@ sp needed for prologue
 105 0008 80BD     		pop	{r7, pc}
 106              		.cfi_endproc
 107              	.LFE2:
 109 000a C046     		.section	.text.Cpu_SetOperationMode,"ax",%progbits
 110              		.align	2
 111              		.global	Cpu_SetOperationMode
 112              		.code	16
 113              		.thumb_func
 115              	Cpu_SetOperationMode:
 116              	.LFB3:
 101:../Generated_Code/Cpu.c **** 
 102:../Generated_Code/Cpu.c **** /*
 103:../Generated_Code/Cpu.c **** ** ===================================================================
 104:../Generated_Code/Cpu.c **** **     Method      :  Cpu_SetOperationMode (component MKL25Z128LK4)
 105:../Generated_Code/Cpu.c **** */
 106:../Generated_Code/Cpu.c **** /*!
 107:../Generated_Code/Cpu.c **** **     @brief
 108:../Generated_Code/Cpu.c **** **         This method requests to change the component's operation
 109:../Generated_Code/Cpu.c **** **         mode (RUN, WAIT, SLEEP, STOP). The target operation mode
 110:../Generated_Code/Cpu.c **** **         will be entered immediately. 
 111:../Generated_Code/Cpu.c **** **         See [Operation mode settings] for further details of the
 112:../Generated_Code/Cpu.c **** **         operation modes mapping to low power modes of the cpu.
 113:../Generated_Code/Cpu.c **** **     @param
 114:../Generated_Code/Cpu.c **** **         OperationMode   - Requested driver
 115:../Generated_Code/Cpu.c **** **                           operation mode
 116:../Generated_Code/Cpu.c **** **     @param
 117:../Generated_Code/Cpu.c **** **         ModeChangeCallback - Callback to
 118:../Generated_Code/Cpu.c **** **                           notify the upper layer once a mode has been
 119:../Generated_Code/Cpu.c **** **                           changed. Parameter is ignored, only for
 120:../Generated_Code/Cpu.c **** **                           compatibility of API with other components.
 121:../Generated_Code/Cpu.c **** **     @param
 122:../Generated_Code/Cpu.c **** **         ModeChangeCallbackParamPtr 
 123:../Generated_Code/Cpu.c **** **                           - Pointer to callback parameter to notify
 124:../Generated_Code/Cpu.c **** **                           the upper layer once a mode has been
 125:../Generated_Code/Cpu.c **** **                           changed. Parameter is ignored, only for
 126:../Generated_Code/Cpu.c **** **                           compatibility of API with other components.
 127:../Generated_Code/Cpu.c **** **     @return
 128:../Generated_Code/Cpu.c **** **                         - Error code
 129:../Generated_Code/Cpu.c **** **                           ERR_OK - OK
 130:../Generated_Code/Cpu.c **** **                           ERR_PARAM_MODE - Invalid operation mode
 131:../Generated_Code/Cpu.c **** */
 132:../Generated_Code/Cpu.c **** /* ===================================================================*/
 133:../Generated_Code/Cpu.c **** LDD_TError Cpu_SetOperationMode(LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCal
 134:../Generated_Code/Cpu.c **** {
 117              		.loc 1 134 0
 118              		.cfi_startproc
 119 0000 80B5     		push	{r7, lr}
 120              	.LCFI6:
 121              		.cfi_def_cfa_offset 8
 122              		.cfi_offset 7, -8
 123              		.cfi_offset 14, -4
 124 0002 84B0     		sub	sp, sp, #16
 125              	.LCFI7:
 126              		.cfi_def_cfa_offset 24
 127 0004 00AF     		add	r7, sp, #0
 128              	.LCFI8:
 129              		.cfi_def_cfa_register 7
 130 0006 B960     		str	r1, [r7, #8]
 131 0008 7A60     		str	r2, [r7, #4]
 132 000a 3B1C     		mov	r3, r7
 133 000c 0F33     		add	r3, r3, #15
 134 000e 021C     		add	r2, r0, #0
 135 0010 1A70     		strb	r2, [r3]
 135:../Generated_Code/Cpu.c ****   (void) ModeChangeCallback;           /* Parameter is not used, suppress unused argument warning *
 136:../Generated_Code/Cpu.c ****   (void) ModeChangeCallbackParamPtr;   /* Parameter is not used, suppress unused argument warning *
 137:../Generated_Code/Cpu.c ****   switch (OperationMode) {
 136              		.loc 1 137 0
 137 0012 3B1C     		mov	r3, r7
 138 0014 0F33     		add	r3, r3, #15
 139 0016 1B78     		ldrb	r3, [r3]
 140 0018 022B     		cmp	r3, #2
 141 001a 2DD0     		beq	.L7
 142 001c 02DC     		bgt	.L10
 143 001e 012B     		cmp	r3, #1
 144 0020 05D0     		beq	.L6
 145 0022 68E0     		b	.L5
 146              	.L10:
 147 0024 032B     		cmp	r3, #3
 148 0026 41D0     		beq	.L8
 149 0028 042B     		cmp	r3, #4
 150 002a 66D0     		beq	.L15
 151 002c 63E0     		b	.L5
 152              	.L6:
 138:../Generated_Code/Cpu.c ****     case DOM_RUN:
 139:../Generated_Code/Cpu.c ****       /* SCB_SCR: SLEEPDEEP=0,SLEEPONEXIT=0 */
 140:../Generated_Code/Cpu.c ****       SCB_SCR &= (uint32_t)~(uint32_t)(
 153              		.loc 1 140 0
 154 002e 374A     		ldr	r2, .L17
 155 0030 3649     		ldr	r1, .L17
 156 0032 D123     		mov	r3, #209
 157 0034 1B01     		lsl	r3, r3, #4
 158 0036 CB58     		ldr	r3, [r1, r3]
 159 0038 0621     		mov	r1, #6
 160 003a 181C     		mov	r0, r3
 161 003c 8843     		bic	r0, r1
 162 003e 011C     		mov	r1, r0
 163 0040 D123     		mov	r3, #209
 164 0042 1B01     		lsl	r3, r3, #4
 165 0044 D150     		str	r1, [r2, r3]
 141:../Generated_Code/Cpu.c ****                   SCB_SCR_SLEEPDEEP_MASK |
 142:../Generated_Code/Cpu.c ****                   SCB_SCR_SLEEPONEXIT_MASK
 143:../Generated_Code/Cpu.c ****                  );                                   
 144:../Generated_Code/Cpu.c ****       if ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) { /* If in PBE mode, switch to PEE. PEE to 
 166              		.loc 1 144 0
 167 0046 324B     		ldr	r3, .L17+4
 168 0048 9B79     		ldrb	r3, [r3, #6]
 169 004a DBB2     		uxtb	r3, r3
 170 004c 1A1C     		mov	r2, r3
 171 004e 0C23     		mov	r3, #12
 172 0050 1340     		and	r3, r2
 173 0052 0C2B     		cmp	r3, #12
 174 0054 53D0     		beq	.L16
 145:../Generated_Code/Cpu.c ****         /* MCG_C1: CLKS=0,IREFS=0 */
 146:../Generated_Code/Cpu.c ****         MCG_C1 &= (uint8_t)~(uint8_t)((MCG_C1_CLKS(0x03) | MCG_C1_IREFS_MASK));                    
 175              		.loc 1 146 0
 176 0056 2E4B     		ldr	r3, .L17+4
 177 0058 2D4A     		ldr	r2, .L17+4
 178 005a 1278     		ldrb	r2, [r2]
 179 005c D1B2     		uxtb	r1, r2
 180 005e 3B22     		mov	r2, #59
 181 0060 0A40     		and	r2, r1
 182 0062 D2B2     		uxtb	r2, r2
 183 0064 1A70     		strb	r2, [r3]
 147:../Generated_Code/Cpu.c ****         while( (MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait for PLL lock */
 184              		.loc 1 147 0
 185 0066 C046     		mov	r8, r8
 186              	.L12:
 187              		.loc 1 147 0 is_stmt 0
 188 0068 294B     		ldr	r3, .L17+4
 189 006a 9B79     		ldrb	r3, [r3, #6]
 190 006c DBB2     		uxtb	r3, r3
 191 006e 1A1C     		mov	r2, r3
 192 0070 4023     		mov	r3, #64
 193 0072 1340     		and	r3, r2
 194 0074 F8D0     		beq	.L12
 148:../Generated_Code/Cpu.c ****         }
 149:../Generated_Code/Cpu.c ****       }
 150:../Generated_Code/Cpu.c ****       break;
 195              		.loc 1 150 0 is_stmt 1
 196 0076 42E0     		b	.L16
 197              	.L7:
 151:../Generated_Code/Cpu.c ****     case DOM_WAIT:
 152:../Generated_Code/Cpu.c ****       /* SCB_SCR: SLEEPDEEP=0 */
 153:../Generated_Code/Cpu.c ****       SCB_SCR &= (uint32_t)~(uint32_t)(SCB_SCR_SLEEPDEEP_MASK);                                   
 198              		.loc 1 153 0
 199 0078 244A     		ldr	r2, .L17
 200 007a 2449     		ldr	r1, .L17
 201 007c D123     		mov	r3, #209
 202 007e 1B01     		lsl	r3, r3, #4
 203 0080 CB58     		ldr	r3, [r1, r3]
 204 0082 0421     		mov	r1, #4
 205 0084 181C     		mov	r0, r3
 206 0086 8843     		bic	r0, r1
 207 0088 011C     		mov	r1, r0
 208 008a D123     		mov	r3, #209
 209 008c 1B01     		lsl	r3, r3, #4
 210 008e D150     		str	r1, [r2, r3]
 154:../Generated_Code/Cpu.c ****       /* SCB_SCR: SLEEPONEXIT=0 */
 155:../Generated_Code/Cpu.c ****       SCB_SCR &= (uint32_t)~(uint32_t)(SCB_SCR_SLEEPONEXIT_MASK);                                  
 211              		.loc 1 155 0
 212 0090 1E4A     		ldr	r2, .L17
 213 0092 1E49     		ldr	r1, .L17
 214 0094 D123     		mov	r3, #209
 215 0096 1B01     		lsl	r3, r3, #4
 216 0098 CB58     		ldr	r3, [r1, r3]
 217 009a 0221     		mov	r1, #2
 218 009c 181C     		mov	r0, r3
 219 009e 8843     		bic	r0, r1
 220 00a0 011C     		mov	r1, r0
 221 00a2 D123     		mov	r3, #209
 222 00a4 1B01     		lsl	r3, r3, #4
 223 00a6 D150     		str	r1, [r2, r3]
 156:../Generated_Code/Cpu.c ****       PE_WFI();
 224              		.loc 1 156 0
 225              	@ 156 "../Generated_Code/Cpu.c" 1
 226 00a8 30BF     		WFI
 227              	@ 0 "" 2
 157:../Generated_Code/Cpu.c ****       break;
 228              		.loc 1 157 0
 229              		.code	16
 230 00aa 29E0     		b	.L13
 231              	.L8:
 158:../Generated_Code/Cpu.c ****     case DOM_SLEEP:
 159:../Generated_Code/Cpu.c ****       /* SCB_SCR: SLEEPDEEP=1 */
 160:../Generated_Code/Cpu.c ****       SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;                                   
 232              		.loc 1 160 0
 233 00ac 174A     		ldr	r2, .L17
 234 00ae 1749     		ldr	r1, .L17
 235 00b0 D123     		mov	r3, #209
 236 00b2 1B01     		lsl	r3, r3, #4
 237 00b4 CB58     		ldr	r3, [r1, r3]
 238 00b6 0421     		mov	r1, #4
 239 00b8 1943     		orr	r1, r3
 240 00ba D123     		mov	r3, #209
 241 00bc 1B01     		lsl	r3, r3, #4
 242 00be D150     		str	r1, [r2, r3]
 161:../Generated_Code/Cpu.c ****       /* SMC_STOPCTRL: PSTOPO=0,PORPO=0,??=0,??=0,VLLSM=0 */
 162:../Generated_Code/Cpu.c ****       SMC_STOPCTRL = (SMC_STOPCTRL_PSTOPO(0x00) | SMC_STOPCTRL_VLLSM(0x00));                       
 243              		.loc 1 162 0
 244 00c0 144B     		ldr	r3, .L17+8
 245 00c2 0022     		mov	r2, #0
 246 00c4 9A70     		strb	r2, [r3, #2]
 163:../Generated_Code/Cpu.c ****       /* SMC_PMCTRL: STOPM=0 */
 164:../Generated_Code/Cpu.c ****       SMC_PMCTRL &= (uint8_t)~(uint8_t)(SMC_PMCTRL_STOPM(0x07));                                   
 247              		.loc 1 164 0
 248 00c6 134B     		ldr	r3, .L17+8
 249 00c8 124A     		ldr	r2, .L17+8
 250 00ca 5278     		ldrb	r2, [r2, #1]
 251 00cc D2B2     		uxtb	r2, r2
 252 00ce 0721     		mov	r1, #7
 253 00d0 8A43     		bic	r2, r1
 254 00d2 D2B2     		uxtb	r2, r2
 255 00d4 5A70     		strb	r2, [r3, #1]
 165:../Generated_Code/Cpu.c ****       (void)(SMC_PMCTRL == 0U);        /* Dummy read of SMC_PMCTRL to ensure the register is writte
 256              		.loc 1 165 0
 257 00d6 0F4B     		ldr	r3, .L17+8
 258 00d8 5B78     		ldrb	r3, [r3, #1]
 166:../Generated_Code/Cpu.c ****       /* SCB_SCR: SLEEPONEXIT=0 */
 167:../Generated_Code/Cpu.c ****       SCB_SCR &= (uint32_t)~(uint32_t)(SCB_SCR_SLEEPONEXIT_MASK);                                  
 259              		.loc 1 167 0
 260 00da 0C4A     		ldr	r2, .L17
 261 00dc 0B49     		ldr	r1, .L17
 262 00de D123     		mov	r3, #209
 263 00e0 1B01     		lsl	r3, r3, #4
 264 00e2 CB58     		ldr	r3, [r1, r3]
 265 00e4 0221     		mov	r1, #2
 266 00e6 181C     		mov	r0, r3
 267 00e8 8843     		bic	r0, r1
 268 00ea 011C     		mov	r1, r0
 269 00ec D123     		mov	r3, #209
 270 00ee 1B01     		lsl	r3, r3, #4
 271 00f0 D150     		str	r1, [r2, r3]
 168:../Generated_Code/Cpu.c ****       PE_WFI();
 272              		.loc 1 168 0
 273              	@ 168 "../Generated_Code/Cpu.c" 1
 274 00f2 30BF     		WFI
 275              	@ 0 "" 2
 169:../Generated_Code/Cpu.c ****       break;
 276              		.loc 1 169 0
 277              		.code	16
 278 00f4 04E0     		b	.L13
 279              	.L5:
 170:../Generated_Code/Cpu.c ****     case DOM_STOP:
 171:../Generated_Code/Cpu.c ****       break;
 172:../Generated_Code/Cpu.c ****     default:
 173:../Generated_Code/Cpu.c ****       return ERR_PARAM_MODE;
 280              		.loc 1 173 0
 281 00f6 8123     		mov	r3, #129
 282 00f8 03E0     		b	.L14
 283              	.L15:
 171:../Generated_Code/Cpu.c ****       break;
 284              		.loc 1 171 0
 285 00fa C046     		mov	r8, r8
 286 00fc 00E0     		b	.L13
 287              	.L16:
 150:../Generated_Code/Cpu.c ****       break;
 288              		.loc 1 150 0
 289 00fe C046     		mov	r8, r8
 290              	.L13:
 174:../Generated_Code/Cpu.c ****   }
 175:../Generated_Code/Cpu.c ****   return ERR_OK;
 291              		.loc 1 175 0
 292 0100 0023     		mov	r3, #0
 293              	.L14:
 176:../Generated_Code/Cpu.c **** }
 294              		.loc 1 176 0
 295 0102 181C     		mov	r0, r3
 296 0104 BD46     		mov	sp, r7
 297 0106 04B0     		add	sp, sp, #16
 298              		@ sp needed for prologue
 299 0108 80BD     		pop	{r7, pc}
 300              	.L18:
 301 010a C046     		.align	2
 302              	.L17:
 303 010c 00E000E0 		.word	-536813568
 304 0110 00400640 		.word	1074151424
 305 0114 00E00740 		.word	1074257920
 306              		.cfi_endproc
 307              	.LFE3:
 309              		.section	.text.Cpu_EnableInt,"ax",%progbits
 310              		.align	2
 311              		.global	Cpu_EnableInt
 312              		.code	16
 313              		.thumb_func
 315              	Cpu_EnableInt:
 316              	.LFB4:
 177:../Generated_Code/Cpu.c **** 
 178:../Generated_Code/Cpu.c **** /*
 179:../Generated_Code/Cpu.c **** ** ===================================================================
 180:../Generated_Code/Cpu.c **** **     Method      :  Cpu_EnableInt (component MKL25Z128LK4)
 181:../Generated_Code/Cpu.c **** */
 182:../Generated_Code/Cpu.c **** /*!
 183:../Generated_Code/Cpu.c **** **     @brief
 184:../Generated_Code/Cpu.c **** **         Enables all maskable interrupts.
 185:../Generated_Code/Cpu.c **** */
 186:../Generated_Code/Cpu.c **** /* ===================================================================*/
 187:../Generated_Code/Cpu.c **** void Cpu_EnableInt(void)
 188:../Generated_Code/Cpu.c **** {
 317              		.loc 1 188 0
 318              		.cfi_startproc
 319 0000 80B5     		push	{r7, lr}
 320              	.LCFI9:
 321              		.cfi_def_cfa_offset 8
 322              		.cfi_offset 7, -8
 323              		.cfi_offset 14, -4
 324 0002 00AF     		add	r7, sp, #0
 325              	.LCFI10:
 326              		.cfi_def_cfa_register 7
 189:../Generated_Code/Cpu.c ****  __EI();
 327              		.loc 1 189 0
 328              	@ 189 "../Generated_Code/Cpu.c" 1
 329 0004 62B6     		CPSIE i
 330              	@ 0 "" 2
 190:../Generated_Code/Cpu.c **** }
 331              		.loc 1 190 0
 332              		.code	16
 333 0006 BD46     		mov	sp, r7
 334              		@ sp needed for prologue
 335 0008 80BD     		pop	{r7, pc}
 336              		.cfi_endproc
 337              	.LFE4:
 339 000a C046     		.section	.text.Cpu_DisableInt,"ax",%progbits
 340              		.align	2
 341              		.global	Cpu_DisableInt
 342              		.code	16
 343              		.thumb_func
 345              	Cpu_DisableInt:
 346              	.LFB5:
 191:../Generated_Code/Cpu.c **** 
 192:../Generated_Code/Cpu.c **** /*
 193:../Generated_Code/Cpu.c **** ** ===================================================================
 194:../Generated_Code/Cpu.c **** **     Method      :  Cpu_DisableInt (component MKL25Z128LK4)
 195:../Generated_Code/Cpu.c **** */
 196:../Generated_Code/Cpu.c **** /*!
 197:../Generated_Code/Cpu.c **** **     @brief
 198:../Generated_Code/Cpu.c **** **         Disables all maskable interrupts.
 199:../Generated_Code/Cpu.c **** */
 200:../Generated_Code/Cpu.c **** /* ===================================================================*/
 201:../Generated_Code/Cpu.c **** void Cpu_DisableInt(void)
 202:../Generated_Code/Cpu.c **** {
 347              		.loc 1 202 0
 348              		.cfi_startproc
 349 0000 80B5     		push	{r7, lr}
 350              	.LCFI11:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 00AF     		add	r7, sp, #0
 355              	.LCFI12:
 356              		.cfi_def_cfa_register 7
 203:../Generated_Code/Cpu.c ****  __DI();
 357              		.loc 1 203 0
 358              	@ 203 "../Generated_Code/Cpu.c" 1
 359 0004 72B6     		CPSID i
 360              	@ 0 "" 2
 204:../Generated_Code/Cpu.c **** }
 361              		.loc 1 204 0
 362              		.code	16
 363 0006 BD46     		mov	sp, r7
 364              		@ sp needed for prologue
 365 0008 80BD     		pop	{r7, pc}
 366              		.cfi_endproc
 367              	.LFE5:
 369 000a C046     		.section	.text.__init_hardware,"ax",%progbits
 370              		.align	2
 371              		.global	__init_hardware
 372              		.code	16
 373              		.thumb_func
 375              	__init_hardware:
 376              	.LFB6:
 205:../Generated_Code/Cpu.c **** 
 206:../Generated_Code/Cpu.c **** 
 207:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
 208:../Generated_Code/Cpu.c **** 
 209:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
 210:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
 211:../Generated_Code/Cpu.c **** void __init_hardware(void)
 212:../Generated_Code/Cpu.c **** {
 377              		.loc 1 212 0
 378              		.cfi_startproc
 379 0000 80B5     		push	{r7, lr}
 380              	.LCFI13:
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 7, -8
 383              		.cfi_offset 14, -4
 384 0002 00AF     		add	r7, sp, #0
 385              	.LCFI14:
 386              		.cfi_def_cfa_register 7
 213:../Generated_Code/Cpu.c **** 
 214:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
 215:../Generated_Code/Cpu.c **** 
 216:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
 217:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
 218:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
 387              		.loc 1 218 0
 388 0004 534A     		ldr	r2, .L28
 389 0006 5449     		ldr	r1, .L28+4
 390 0008 544B     		ldr	r3, .L28+8
 391 000a D150     		str	r1, [r2, r3]
 219:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
 220:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
 221:../Generated_Code/Cpu.c ****   SIM_COPC = SIM_COPC_COPT(0x00);                                   
 392              		.loc 1 221 0
 393 000c 544A     		ldr	r2, .L28+12
 394 000e 8823     		mov	r3, #136
 395 0010 5B01     		lsl	r3, r3, #5
 396 0012 0021     		mov	r1, #0
 397 0014 D150     		str	r1, [r2, r3]
 222:../Generated_Code/Cpu.c **** 
 223:../Generated_Code/Cpu.c ****   /* System clock initialization */
 224:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,?
 225:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescale
 398              		.loc 1 225 0
 399 0016 524A     		ldr	r2, .L28+12
 400 0018 524B     		ldr	r3, .L28+16
 401 001a C021     		mov	r1, #192
 402 001c 8902     		lsl	r1, r1, #10
 403 001e D150     		str	r1, [r2, r3]
 226:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTE=1,PORTA=1 */
 227:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= (SIM_SCGC5_PORTE_MASK | SIM_SCGC5_PORTA_MASK); /* Enable clock gate for ports to ena
 404              		.loc 1 227 0
 405 0020 4F4A     		ldr	r2, .L28+12
 406 0022 4F49     		ldr	r1, .L28+12
 407 0024 504B     		ldr	r3, .L28+20
 408 0026 CB58     		ldr	r3, [r1, r3]
 409 0028 8821     		mov	r1, #136
 410 002a 8901     		lsl	r1, r1, #6
 411 002c 1943     		orr	r1, r3
 412 002e 4E4B     		ldr	r3, .L28+20
 413 0030 D150     		str	r1, [r2, r3]
 228:../Generated_Code/Cpu.c ****   if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
 414              		.loc 1 228 0
 415 0032 4E4B     		ldr	r3, .L28+24
 416 0034 9B78     		ldrb	r3, [r3, #2]
 417 0036 DBB2     		uxtb	r3, r3
 418 0038 1A1C     		mov	r2, r3
 419 003a 0823     		mov	r3, #8
 420 003c 1340     		and	r3, r2
 421 003e 07D0     		beq	.L22
 229:../Generated_Code/Cpu.c ****     /* PMC_REGSC: ACKISO=1 */
 230:../Generated_Code/Cpu.c ****     PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
 422              		.loc 1 230 0
 423 0040 4A4B     		ldr	r3, .L28+24
 424 0042 4A4A     		ldr	r2, .L28+24
 425 0044 9278     		ldrb	r2, [r2, #2]
 426 0046 D2B2     		uxtb	r2, r2
 427 0048 0821     		mov	r1, #8
 428 004a 0A43     		orr	r2, r1
 429 004c D2B2     		uxtb	r2, r2
 430 004e 9A70     		strb	r2, [r3, #2]
 431              	.L22:
 231:../Generated_Code/Cpu.c ****   }
 232:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,?
 233:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescaler
 432              		.loc 1 233 0
 433 0050 434A     		ldr	r2, .L28+12
 434 0052 444B     		ldr	r3, .L28+16
 435 0054 8021     		mov	r1, #128
 436 0056 4902     		lsl	r1, r1, #9
 437 0058 D150     		str	r1, [r2, r3]
 234:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=1 */
 235:../Generated_Code/Cpu.c ****   SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK; /* Select PLL as a clock source for various peripherals */
 438              		.loc 1 235 0
 439 005a 414A     		ldr	r2, .L28+12
 440 005c 4049     		ldr	r1, .L28+12
 441 005e 444B     		ldr	r3, .L28+28
 442 0060 CB58     		ldr	r3, [r1, r3]
 443 0062 8021     		mov	r1, #128
 444 0064 4902     		lsl	r1, r1, #9
 445 0066 1943     		orr	r1, r3
 446 0068 414B     		ldr	r3, .L28+28
 447 006a D150     		str	r1, [r2, r3]
 236:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=0 */
 237:../Generated_Code/Cpu.c ****   SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz
 448              		.loc 1 237 0
 449 006c 3C4B     		ldr	r3, .L28+12
 450 006e 3C4A     		ldr	r2, .L28+12
 451 0070 1168     		ldr	r1, [r2]
 452 0072 404A     		ldr	r2, .L28+32
 453 0074 0A40     		and	r2, r1
 454 0076 1A60     		str	r2, [r3]
 238:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 239:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 455              		.loc 1 239 0
 456 0078 394A     		ldr	r2, .L28+12
 457 007a 3949     		ldr	r1, .L28+12
 458 007c 3C4B     		ldr	r3, .L28+28
 459 007e C958     		ldr	r1, [r1, r3]
 460 0080 3D4B     		ldr	r3, .L28+36
 461 0082 0B40     		and	r3, r1
 462 0084 8021     		mov	r1, #128
 463 0086 4904     		lsl	r1, r1, #17
 464 0088 1943     		orr	r1, r3
 465 008a 394B     		ldr	r3, .L28+28
 466 008c D150     		str	r1, [r2, r3]
 240:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 241:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 242:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 243:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 244:../Generated_Code/Cpu.c ****   /* PORTA_PCR18: ISF=0,MUX=0 */
 245:../Generated_Code/Cpu.c ****   PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));                  
 467              		.loc 1 245 0
 468 008e 3B4B     		ldr	r3, .L28+40
 469 0090 3A4A     		ldr	r2, .L28+40
 470 0092 916C     		ldr	r1, [r2, #72]
 471 0094 3A4A     		ldr	r2, .L28+44
 472 0096 0A40     		and	r2, r1
 473 0098 9A64     		str	r2, [r3, #72]
 246:../Generated_Code/Cpu.c ****   /* PORTA_PCR19: ISF=0,MUX=0 */
 247:../Generated_Code/Cpu.c ****   PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));                  
 474              		.loc 1 247 0
 475 009a 384B     		ldr	r3, .L28+40
 476 009c 374A     		ldr	r2, .L28+40
 477 009e D16C     		ldr	r1, [r2, #76]
 478 00a0 374A     		ldr	r2, .L28+44
 479 00a2 0A40     		and	r2, r1
 480 00a4 DA64     		str	r2, [r3, #76]
 248:../Generated_Code/Cpu.c ****   /* MCG_SC: FCRDIV=1 */
 249:../Generated_Code/Cpu.c ****   MCG_SC = (uint8_t)((MCG_SC & (uint8_t)~(uint8_t)(
 481              		.loc 1 249 0
 482 00a6 374B     		ldr	r3, .L28+48
 483 00a8 364A     		ldr	r2, .L28+48
 484 00aa 127A     		ldrb	r2, [r2, #8]
 485 00ac D2B2     		uxtb	r2, r2
 486 00ae D2B2     		uxtb	r2, r2
 487 00b0 0E21     		mov	r1, #14
 488 00b2 8A43     		bic	r2, r1
 489 00b4 D2B2     		uxtb	r2, r2
 490 00b6 0221     		mov	r1, #2
 491 00b8 0A43     		orr	r2, r1
 492 00ba D2B2     		uxtb	r2, r2
 493 00bc D2B2     		uxtb	r2, r2
 494 00be 1A72     		strb	r2, [r3, #8]
 250:../Generated_Code/Cpu.c ****             MCG_SC_FCRDIV(0x06)
 251:../Generated_Code/Cpu.c ****            )) | (uint8_t)(
 252:../Generated_Code/Cpu.c ****             MCG_SC_FCRDIV(0x01)
 253:../Generated_Code/Cpu.c ****            ));                                  
 254:../Generated_Code/Cpu.c ****   /* Switch to FBE Mode */
 255:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=1 */
 256:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK | MCG_C2_IRCS_MASK);                          
 495              		.loc 1 256 0
 496 00c0 304B     		ldr	r3, .L28+48
 497 00c2 2522     		mov	r2, #37
 498 00c4 5A70     		strb	r2, [r3, #1]
 257:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 258:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;                                   
 499              		.loc 1 258 0
 500 00c6 304B     		ldr	r3, .L28+52
 501 00c8 8022     		mov	r2, #128
 502 00ca 1A70     		strb	r2, [r3]
 259:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 260:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);                         
 503              		.loc 1 260 0
 504 00cc 2D4B     		ldr	r3, .L28+48
 505 00ce 9A22     		mov	r2, #154
 506 00d0 1A70     		strb	r2, [r3]
 261:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 262:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));                      
 507              		.loc 1 262 0
 508 00d2 2C4B     		ldr	r3, .L28+48
 509 00d4 2B4A     		ldr	r2, .L28+48
 510 00d6 D278     		ldrb	r2, [r2, #3]
 511 00d8 D1B2     		uxtb	r1, r2
 512 00da 1F22     		mov	r2, #31
 513 00dc 0A40     		and	r2, r1
 514 00de D2B2     		uxtb	r2, r2
 515 00e0 DA70     		strb	r2, [r3, #3]
 263:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=3 */
 264:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x03);                                   
 516              		.loc 1 264 0
 517 00e2 284B     		ldr	r3, .L28+48
 518 00e4 0322     		mov	r2, #3
 519 00e6 1A71     		strb	r2, [r3, #4]
 265:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 266:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_VDIV0(0x00);                                   
 520              		.loc 1 266 0
 521 00e8 264B     		ldr	r3, .L28+48
 522 00ea 0022     		mov	r2, #0
 523 00ec 5A71     		strb	r2, [r3, #5]
 267:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock
 524              		.loc 1 267 0
 525 00ee C046     		mov	r8, r8
 526              	.L23:
 527              		.loc 1 267 0 is_stmt 0
 528 00f0 244B     		ldr	r3, .L28+48
 529 00f2 9B79     		ldrb	r3, [r3, #6]
 530 00f4 DBB2     		uxtb	r3, r3
 531 00f6 1A1C     		mov	r2, r3
 532 00f8 1023     		mov	r3, #16
 533 00fa 1340     		and	r3, r2
 534 00fc F8D1     		bne	.L23
 268:../Generated_Code/Cpu.c ****   }
 269:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 535              		.loc 1 269 0 is_stmt 1
 536 00fe C046     		mov	r8, r8
 537              	.L24:
 538              		.loc 1 269 0 is_stmt 0
 539 0100 204B     		ldr	r3, .L28+48
 540 0102 9B79     		ldrb	r3, [r3, #6]
 541 0104 DBB2     		uxtb	r3, r3
 542 0106 1A1C     		mov	r2, r3
 543 0108 0C23     		mov	r3, #12
 544 010a 1340     		and	r3, r2
 545 010c 082B     		cmp	r3, #8
 546 010e F7D1     		bne	.L24
 270:../Generated_Code/Cpu.c ****   }
 271:../Generated_Code/Cpu.c ****   /* Switch to PBE Mode */
 272:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
 273:../Generated_Code/Cpu.c ****   MCG_C6 = (MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0x00));                                   
 547              		.loc 1 273 0 is_stmt 1
 548 0110 1C4B     		ldr	r3, .L28+48
 549 0112 4022     		mov	r2, #64
 550 0114 5A71     		strb	r2, [r3, #5]
 274:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 551              		.loc 1 274 0
 552 0116 C046     		mov	r8, r8
 553              	.L25:
 554              		.loc 1 274 0 is_stmt 0
 555 0118 1A4B     		ldr	r3, .L28+48
 556 011a 9B79     		ldrb	r3, [r3, #6]
 557 011c DBB2     		uxtb	r3, r3
 558 011e 1A1C     		mov	r2, r3
 559 0120 0C23     		mov	r3, #12
 560 0122 1340     		and	r3, r2
 561 0124 082B     		cmp	r3, #8
 562 0126 F7D1     		bne	.L25
 275:../Generated_Code/Cpu.c ****   }
 276:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
 563              		.loc 1 276 0 is_stmt 1
 564 0128 C046     		mov	r8, r8
 565              	.L26:
 566              		.loc 1 276 0 is_stmt 0
 567 012a 164B     		ldr	r3, .L28+48
 568 012c 9B79     		ldrb	r3, [r3, #6]
 569 012e DBB2     		uxtb	r3, r3
 570 0130 1A1C     		mov	r2, r3
 571 0132 4023     		mov	r3, #64
 572 0134 1340     		and	r3, r2
 573 0136 F8D0     		beq	.L26
 277:../Generated_Code/Cpu.c ****   }
 278:../Generated_Code/Cpu.c ****   /* Switch to PEE Mode */
 279:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 280:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x00) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);                         
 574              		.loc 1 280 0 is_stmt 1
 575 0138 124B     		ldr	r3, .L28+48
 576 013a 1A22     		mov	r2, #26
 577 013c 1A70     		strb	r2, [r3]
 281:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
 578              		.loc 1 281 0
 579 013e C046     		mov	r8, r8
 580              	.L27:
 581              		.loc 1 281 0 is_stmt 0
 582 0140 104B     		ldr	r3, .L28+48
 583 0142 9B79     		ldrb	r3, [r3, #6]
 584 0144 DBB2     		uxtb	r3, r3
 585 0146 1A1C     		mov	r2, r3
 586 0148 0C23     		mov	r3, #12
 587 014a 1340     		and	r3, r2
 588 014c 0C2B     		cmp	r3, #12
 589 014e F7D1     		bne	.L27
 282:../Generated_Code/Cpu.c ****   }
 283:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 284:../Generated_Code/Cpu.c **** 
 285:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 286:../Generated_Code/Cpu.c **** 
 287:../Generated_Code/Cpu.c **** }
 590              		.loc 1 287 0 is_stmt 1
 591 0150 BD46     		mov	sp, r7
 592              		@ sp needed for prologue
 593 0152 80BD     		pop	{r7, pc}
 594              	.L29:
 595              		.align	2
 596              	.L28:
 597 0154 00E000E0 		.word	-536813568
 598 0158 00000000 		.word	__vect_table
 599 015c 080D0000 		.word	3336
 600 0160 00700440 		.word	1074032640
 601 0164 44100000 		.word	4164
 602 0168 38100000 		.word	4152
 603 016c 00D00740 		.word	1074253824
 604 0170 04100000 		.word	4100
 605 0174 FFFFF3FF 		.word	-786433
 606 0178 FFFFFFFC 		.word	-50331649
 607 017c 00900440 		.word	1074040832
 608 0180 FFF8FFFE 		.word	-16779009
 609 0184 00400640 		.word	1074151424
 610 0188 00500640 		.word	1074155520
 611              		.cfi_endproc
 612              	.LFE6:
 614              		.section	.text.PE_low_level_init,"ax",%progbits
 615              		.align	2
 616              		.global	PE_low_level_init
 617              		.code	16
 618              		.thumb_func
 620              	PE_low_level_init:
 621              	.LFB7:
 288:../Generated_Code/Cpu.c **** 
 289:../Generated_Code/Cpu.c **** 
 290:../Generated_Code/Cpu.c **** 
 291:../Generated_Code/Cpu.c **** /*
 292:../Generated_Code/Cpu.c **** ** ===================================================================
 293:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 294:../Generated_Code/Cpu.c **** **
 295:../Generated_Code/Cpu.c **** **     Description :
 296:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 297:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 298:../Generated_Code/Cpu.c **** **         application initialization code.
 299:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 300:../Generated_Code/Cpu.c **** ** ===================================================================
 301:../Generated_Code/Cpu.c **** */
 302:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 303:../Generated_Code/Cpu.c **** {
 622              		.loc 1 303 0
 623              		.cfi_startproc
 624 0000 80B5     		push	{r7, lr}
 625              	.LCFI15:
 626              		.cfi_def_cfa_offset 8
 627              		.cfi_offset 7, -8
 628              		.cfi_offset 14, -4
 629 0002 00AF     		add	r7, sp, #0
 630              	.LCFI16:
 631              		.cfi_def_cfa_register 7
 304:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 305:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 306:../Generated_Code/Cpu.c ****   #endif
 307:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 308:../Generated_Code/Cpu.c ****   /* PORTA_PCR4: ISF=0,MUX=7 */
 309:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 632              		.loc 1 309 0
 633 0004 2C4B     		ldr	r3, .L31
 634 0006 2C4A     		ldr	r2, .L31
 635 0008 1169     		ldr	r1, [r2, #16]
 636 000a 2C4A     		ldr	r2, .L31+4
 637 000c 0A40     		and	r2, r1
 638 000e E021     		mov	r1, #224
 639 0010 C900     		lsl	r1, r1, #3
 640 0012 0A43     		orr	r2, r1
 641 0014 1A61     		str	r2, [r3, #16]
 310:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK
 311:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 312:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x07)
 313:../Generated_Code/Cpu.c ****                ));                                  
 314:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 315:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 316:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));                                   
 642              		.loc 1 316 0
 643 0016 2A4B     		ldr	r3, .L31+8
 644 0018 294A     		ldr	r2, .L31+8
 645 001a 5279     		ldrb	r2, [r2, #5]
 646 001c D2B2     		uxtb	r2, r2
 647 001e 1F21     		mov	r1, #31
 648 0020 8A43     		bic	r2, r1
 649 0022 D2B2     		uxtb	r2, r2
 650 0024 5A71     		strb	r2, [r3, #5]
 317:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 318:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 651              		.loc 1 318 0
 652 0026 264B     		ldr	r3, .L31+8
 653 0028 254A     		ldr	r2, .L31+8
 654 002a 1279     		ldrb	r2, [r2, #4]
 655 002c D2B2     		uxtb	r2, r2
 656 002e 0721     		mov	r1, #7
 657 0030 8A43     		bic	r2, r1
 658 0032 D2B2     		uxtb	r2, r2
 659 0034 1A71     		strb	r2, [r3, #4]
 319:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 320:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 321:../Generated_Code/Cpu.c ****               );                                   
 322:../Generated_Code/Cpu.c ****         /* Initialization of the FTFL_FlashConfig module */
 323:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 324:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 325:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 660              		.loc 1 325 0
 661 0036 234B     		ldr	r3, .L31+12
 662 0038 224A     		ldr	r2, .L31+12
 663 003a 1278     		ldrb	r2, [r2]
 664 003c D2B2     		uxtb	r2, r2
 665 003e D2B2     		uxtb	r2, r2
 666 0040 7321     		mov	r1, #115
 667 0042 8A43     		bic	r2, r1
 668 0044 D2B2     		uxtb	r2, r2
 669 0046 5021     		mov	r1, #80
 670 0048 0A43     		orr	r2, r1
 671 004a D2B2     		uxtb	r2, r2
 672 004c D2B2     		uxtb	r2, r2
 673 004e 1A70     		strb	r2, [r3]
 326:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 327:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 328:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 329:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 330:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 331:../Generated_Code/Cpu.c ****                ));                                  
 332:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 333:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 674              		.loc 1 333 0
 675 0050 1C4B     		ldr	r3, .L31+12
 676 0052 1C4A     		ldr	r2, .L31+12
 677 0054 5278     		ldrb	r2, [r2, #1]
 678 0056 D2B2     		uxtb	r2, r2
 679 0058 D2B2     		uxtb	r2, r2
 680 005a 6321     		mov	r1, #99
 681 005c 8A43     		bic	r2, r1
 682 005e D2B2     		uxtb	r2, r2
 683 0060 4021     		mov	r1, #64
 684 0062 0A43     		orr	r2, r1
 685 0064 D2B2     		uxtb	r2, r2
 686 0066 D2B2     		uxtb	r2, r2
 687 0068 5A70     		strb	r2, [r3, #1]
 334:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 335:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 336:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 337:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 338:../Generated_Code/Cpu.c ****                ));                                  
 339:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 340:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 688              		.loc 1 340 0
 689 006a 164B     		ldr	r3, .L31+12
 690 006c 154A     		ldr	r2, .L31+12
 691 006e 9278     		ldrb	r2, [r2, #2]
 692 0070 D2B2     		uxtb	r2, r2
 693 0072 1921     		mov	r1, #25
 694 0074 8A43     		bic	r2, r1
 695 0076 D2B2     		uxtb	r2, r2
 696 0078 9A70     		strb	r2, [r3, #2]
 341:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 342:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 343:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 344:../Generated_Code/Cpu.c ****                );                                   
 345:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 346:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 697              		.loc 1 346 0
 698 007a 134B     		ldr	r3, .L31+16
 699 007c 0022     		mov	r2, #0
 700 007e 1A70     		strb	r2, [r3]
 347:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 348:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 349:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 701              		.loc 1 349 0
 702 0080 0D4B     		ldr	r3, .L31
 703 0082 0D4A     		ldr	r2, .L31
 704 0084 116D     		ldr	r1, [r2, #80]
 705 0086 0D4A     		ldr	r2, .L31+4
 706 0088 0A40     		and	r2, r1
 707 008a E021     		mov	r1, #224
 708 008c C900     		lsl	r1, r1, #3
 709 008e 0A43     		orr	r2, r1
 710 0090 1A65     		str	r2, [r3, #80]
 350:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 351:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 352:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 353:../Generated_Code/Cpu.c ****                 ));                                  
 354:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 355:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));                                   
 711              		.loc 1 355 0
 712 0092 0E4A     		ldr	r2, .L31+20
 713 0094 0D49     		ldr	r1, .L31+20
 714 0096 C123     		mov	r3, #193
 715 0098 9B00     		lsl	r3, r3, #2
 716 009a C958     		ldr	r1, [r1, r3]
 717 009c 0C4B     		ldr	r3, .L31+24
 718 009e 1940     		and	r1, r3
 719 00a0 C123     		mov	r3, #193
 720 00a2 9B00     		lsl	r3, r3, #2
 721 00a4 D150     		str	r1, [r2, r3]
 356:../Generated_Code/Cpu.c ****   /* ### Serial_LDD "IO1" component auto initialization. Auto initialization feature can be disable
 357:../Generated_Code/Cpu.c ****   (void)IO1_Init(NULL);
 722              		.loc 1 357 0
 723 00a6 0020     		mov	r0, #0
 724 00a8 FFF7FEFF 		bl	IO1_Init
 358:../Generated_Code/Cpu.c ****   /* ### SPISlave_LDD "SS1" component auto initializatation. Auto initialization feature can be dis
 359:../Generated_Code/Cpu.c ****   (void)SS1_Init(NULL);
 725              		.loc 1 359 0
 726 00ac 0020     		mov	r0, #0
 727 00ae FFF7FEFF 		bl	SS1_Init
 360:../Generated_Code/Cpu.c ****   __EI();
 728              		.loc 1 360 0
 729              	@ 360 "../Generated_Code/Cpu.c" 1
 730 00b2 62B6     		CPSIE i
 731              	@ 0 "" 2
 361:../Generated_Code/Cpu.c **** }
 732              		.loc 1 361 0
 733              		.code	16
 734 00b4 BD46     		mov	sp, r7
 735              		@ sp needed for prologue
 736 00b6 80BD     		pop	{r7, pc}
 737              	.L32:
 738              		.align	2
 739              	.L31:
 740 00b8 00900440 		.word	1074040832
 741 00bc FFF8FFFE 		.word	-16779009
 742 00c0 00F00740 		.word	1074262016
 743 00c4 00D00740 		.word	1074253824
 744 00c8 00E00740 		.word	1074257920
 745 00cc 00E100E0 		.word	-536813312
 746 00d0 FFFF00FF 		.word	-16711681
 747              		.cfi_endproc
 748              	.LFE7:
 750              		.global	_cfm
 751              		.section	.cfmconfig,"a",%progbits
 752              		.align	2
 755              	_cfm:
 756 0000 FF       		.byte	-1
 757 0001 FF       		.byte	-1
 758 0002 FF       		.byte	-1
 759 0003 FF       		.byte	-1
 760 0004 FF       		.byte	-1
 761 0005 FF       		.byte	-1
 762 0006 FF       		.byte	-1
 763 0007 FF       		.byte	-1
 764 0008 FF       		.byte	-1
 765 0009 FF       		.byte	-1
 766 000a FF       		.byte	-1
 767 000b FF       		.byte	-1
 768 000c 7E       		.byte	126
 769 000d FF       		.byte	-1
 770 000e FF       		.byte	-1
 771 000f FF       		.byte	-1
 772              		.text
 773              	.Letext0:
 774              		.file 2 "E:/Freescale/CW MCU v10.5/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 775              		.file 3 "../Generated_Code/PE_Types.h"
 776              		.file 4 "../Generated_Code/IO_Map.h"
 777              		.file 5 "../Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
                            *COM*:00000001 SR_reg
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:22     .bss.SR_lock:00000000 SR_lock
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:23     .bss.SR_lock:00000000 $d
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:25     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:30     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:53     .text.Cpu_INT_Hard_FaultInterrupt:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:58     .text.Cpu_INT_Hard_FaultInterrupt:00000000 Cpu_INT_Hard_FaultInterrupt
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:80     .text.Cpu_Interrupt:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:85     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:110    .text.Cpu_SetOperationMode:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:115    .text.Cpu_SetOperationMode:00000000 Cpu_SetOperationMode
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:303    .text.Cpu_SetOperationMode:0000010c $d
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:310    .text.Cpu_EnableInt:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:315    .text.Cpu_EnableInt:00000000 Cpu_EnableInt
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:340    .text.Cpu_DisableInt:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:345    .text.Cpu_DisableInt:00000000 Cpu_DisableInt
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:370    .text.__init_hardware:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:375    .text.__init_hardware:00000000 __init_hardware
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:597    .text.__init_hardware:00000154 $d
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:615    .text.PE_low_level_init:00000000 $t
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:620    .text.PE_low_level_init:00000000 PE_low_level_init
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:740    .text.PE_low_level_init:000000b8 $d
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:755    .cfmconfig:00000000 _cfm
C:\Users\lab\AppData\Local\Temp\cc1418hk.s:752    .cfmconfig:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Cpu_OnNMIINT
Cpu_OnHardFault
__vect_table
IO1_Init
SS1_Init

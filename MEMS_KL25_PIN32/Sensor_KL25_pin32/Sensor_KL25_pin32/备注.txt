1.HMC5883和MPU6050采用模拟IIC
2.读取HMC5883和MPU6050原始传感数据
3.进行HMC5883传感器校正,但现在采用循环采集数据，采集次数无法确定，之后可以考虑和上位机通讯启动校正。
4.磁传感器进行倾角补偿，但在debug时调试器经常会脱离连接，无法验证补偿是否准确。
5.加入了USB通信模块，bulk传输，暂时未调试。
6.加入了数据打包机制、双缓存机制、数据通信协议。
7.加入同步机制和自定义请求机制
8.USB通信正常，同步机制正常，传感器采集到的数据正常
9.传感器数据和USB传输联合调试,通信正常
10.采样频率：50HZ，此为用在车载传感器节点上的程序。


在以上基础上进行pin32MCU 和 SPI 的移植：
1.加入SPI相关代码和DMA相关代码。
2.HMC5883和MPU6050的引脚驱动已经修改。
3.暂时未调试SPI传输。
4.MPU6050采样频率设定为50HZ，在MPU6050的DRDY信号准备好以后，进入中断，在中断里面读取传感器的信号。
5.之前将磁传感器设定为单次转换，但测试表明单次转换速度太慢，因此将磁传感器转换速率改为75HZ,在DRDY中断中读取磁传感器信号。转换速率实际仍然为50HZ。
6.SPI通信协议:
上位机先发送一个SPI命令，从机的SPI中断一直打开，在收到这个SPI命令以后，进入SPI中断。
在中段里面，切换缓存，从机发送数据给主机。
7.加入SPI中断传输
8.SPI中断传输协议：
（1）在进入主循环之前，slave不发送，只进行接收操作(因为第一次通信的目的是主机发命令给从机，因此从机不需要发送给主机)，之后进入for循环；
（2）主循环中：master第一次发送“0x01”，不进行接收操作（第一次通信的目的是主机发命令给从机）。之后slave进入中断：
（3）中断处理函数中：
在slave中断中，判断出首字节是“0x01”，则将15个字节的数据应答填充到slave_send，之后
进行slave_send操作。之后进行一次slave_receive操作，以便于下次在从机发数据给主机时进入中断，以此来开启从机下一次接收命令时的接收中断。
（4）主循环中：master发送15个字节的空数据，同时进行接收操作。在master发送同时，slave也同时发出之前填充的slave_send。
（5）中断处理函数：master进入中断，接收到从机响应的15个字节数据。。
slave进入中断，接收到主机发出的15个字节的空数据，dummy，开启下次接收命令的接收中断。
（6）继续从2执行主循环。

以上通信协议在SPI进行如下修改：
（1）0xB8	      DataLenH	   DataLenL	   stateH 	stateL 	 Data	 0xED
96个字节（采样频率50HZ）
（2）main函数中不断进行SPI的receive操作，无论何时主机发起传输，从机都准备好了接收操作。
在从机的SPI中断接收中，进行交换缓存和发送数据的操作。


本程序为最终版SPUI通信版本。
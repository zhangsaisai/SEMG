   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"SM1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	28
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              		.section	.bss.INT_SPI0__DEFAULT_RTOS_ISRPARAM,"aw",%nobits
  24              		.align	2
  27              	INT_SPI0__DEFAULT_RTOS_ISRPARAM:
  28 0000 00000000 		.space	4
  29              		.section	.text.SM1_Init,"ax",%progbits
  30              		.align	2
  31              		.global	SM1_Init
  32              		.code	16
  33              		.thumb_func
  35              	SM1_Init:
  36              	.LFB0:
  37              		.file 1 "../Generated_Code/SM1.c"
   1:../Generated_Code/SM1.c **** /* ###################################################################
   2:../Generated_Code/SM1.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/SM1.c **** **     Filename    : SM1.c
   4:../Generated_Code/SM1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/SM1.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/SM1.c **** **     Component   : SPIMaster_LDD
   7:../Generated_Code/SM1.c **** **     Version     : Component 01.109, Driver 01.02, CPU db: 3.00.000
   8:../Generated_Code/SM1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/SM1.c **** **     Date/Time   : 2015-10-17, 20:43, # CodeGen: 17
  10:../Generated_Code/SM1.c **** **     Abstract    :
  11:../Generated_Code/SM1.c **** **         This component "SPIMaster_LDD" implements MASTER part of synchronous
  12:../Generated_Code/SM1.c **** **         serial master-slave communication.
  13:../Generated_Code/SM1.c **** **     Settings    :
  14:../Generated_Code/SM1.c **** **          Component name                                 : SM1
  15:../Generated_Code/SM1.c **** **          Device                                         : SPI0
  16:../Generated_Code/SM1.c **** **          Interrupt service/event                        : Enabled
  17:../Generated_Code/SM1.c **** **            Input interrupt                              : INT_SPI0
  18:../Generated_Code/SM1.c **** **            Input interrupt priority                     : medium priority
  19:../Generated_Code/SM1.c **** **            Output interrupt                             : INT_SPI0
  20:../Generated_Code/SM1.c **** **            Output interrupt priority                    : medium priority
  21:../Generated_Code/SM1.c **** **          Settings                                       : 
  22:../Generated_Code/SM1.c **** **            Input pin                                    : Enabled
  23:../Generated_Code/SM1.c **** **              Pin                                        : PTA16/SPI0_MOSI/SPI0_MISO
  24:../Generated_Code/SM1.c **** **              Pin signal                                 : 
  25:../Generated_Code/SM1.c **** **            Output pin                                   : Enabled
  26:../Generated_Code/SM1.c **** **              Pin                                        : PTA17/SPI0_MISO/SPI0_MOSI
  27:../Generated_Code/SM1.c **** **              Pin signal                                 : 
  28:../Generated_Code/SM1.c **** **            Clock pin                                    : 
  29:../Generated_Code/SM1.c **** **              Pin                                        : PTC5/LLWU_P9/SPI0_SCK/LPTMR0_ALT2/CMP0
  30:../Generated_Code/SM1.c **** **              Pin signal                                 : 
  31:../Generated_Code/SM1.c **** **            Chip select list                             : 0
  32:../Generated_Code/SM1.c **** **            Attribute set list                           : 1
  33:../Generated_Code/SM1.c **** **              Attribute set 0                            : 
  34:../Generated_Code/SM1.c **** **                Width                                    : 8 bits
  35:../Generated_Code/SM1.c **** **                MSB first                                : yes
  36:../Generated_Code/SM1.c **** **                Clock polarity                           : High
  37:../Generated_Code/SM1.c **** **                Clock phase                              : Change on leading edge
  38:../Generated_Code/SM1.c **** **                Parity                                   : None
  39:../Generated_Code/SM1.c **** **                Chip select toggling                     : no
  40:../Generated_Code/SM1.c **** **                Clock rate index                         : 0
  41:../Generated_Code/SM1.c **** **            Clock rate                                   : 8 ?s
  42:../Generated_Code/SM1.c **** **            HW input buffer size                         : 1
  43:../Generated_Code/SM1.c **** **            HW input watermark                           : 1
  44:../Generated_Code/SM1.c **** **            Receiver DMA                                 : Disabled
  45:../Generated_Code/SM1.c **** **            HW output buffer size                        : 1
  46:../Generated_Code/SM1.c **** **            HW output watermark                          : 1
  47:../Generated_Code/SM1.c **** **            Transmitter DMA                              : Disabled
  48:../Generated_Code/SM1.c **** **          Initialization                                 : 
  49:../Generated_Code/SM1.c **** **            Initial chip select                          : 0
  50:../Generated_Code/SM1.c **** **            Initial attribute set                        : 0
  51:../Generated_Code/SM1.c **** **            Enabled in init. code                        : yes
  52:../Generated_Code/SM1.c **** **            Auto initialization                          : yes
  53:../Generated_Code/SM1.c **** **            Event mask                                   : 
  54:../Generated_Code/SM1.c **** **              OnBlockSent                                : Enabled
  55:../Generated_Code/SM1.c **** **              OnBlockReceived                            : Enabled
  56:../Generated_Code/SM1.c **** **              OnError                                    : Disabled
  57:../Generated_Code/SM1.c **** **          CPU clock/configuration selection              : 
  58:../Generated_Code/SM1.c **** **            Clock configuration 0                        : This component enabled
  59:../Generated_Code/SM1.c **** **            Clock configuration 1                        : This component disabled
  60:../Generated_Code/SM1.c **** **            Clock configuration 2                        : This component disabled
  61:../Generated_Code/SM1.c **** **            Clock configuration 3                        : This component disabled
  62:../Generated_Code/SM1.c **** **            Clock configuration 4                        : This component disabled
  63:../Generated_Code/SM1.c **** **            Clock configuration 5                        : This component disabled
  64:../Generated_Code/SM1.c **** **            Clock configuration 6                        : This component disabled
  65:../Generated_Code/SM1.c **** **            Clock configuration 7                        : This component disabled
  66:../Generated_Code/SM1.c **** **     Contents    :
  67:../Generated_Code/SM1.c **** **         Init               - LDD_TDeviceData* SM1_Init(LDD_TUserData *UserDataPtr);
  68:../Generated_Code/SM1.c **** **         Deinit             - void SM1_Deinit(LDD_TDeviceData *DeviceDataPtr);
  69:../Generated_Code/SM1.c **** **         SendBlock          - LDD_TError SM1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData.
  70:../Generated_Code/SM1.c **** **         ReceiveBlock       - LDD_TError SM1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TDa
  71:../Generated_Code/SM1.c **** **         GetSentDataNum     - uint16_t SM1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr);
  72:../Generated_Code/SM1.c **** **         GetReceivedDataNum - uint16_t SM1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr);
  73:../Generated_Code/SM1.c **** **
  74:../Generated_Code/SM1.c **** **     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
  75:../Generated_Code/SM1.c **** **     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
  76:../Generated_Code/SM1.c **** **     
  77:../Generated_Code/SM1.c **** **     http      : www.freescale.com
  78:../Generated_Code/SM1.c **** **     mail      : support@freescale.com
  79:../Generated_Code/SM1.c **** ** ###################################################################*/
  80:../Generated_Code/SM1.c **** /*!
  81:../Generated_Code/SM1.c **** ** @file SM1.c
  82:../Generated_Code/SM1.c **** ** @version 01.02
  83:../Generated_Code/SM1.c **** ** @brief
  84:../Generated_Code/SM1.c **** **         This component "SPIMaster_LDD" implements MASTER part of synchronous
  85:../Generated_Code/SM1.c **** **         serial master-slave communication.
  86:../Generated_Code/SM1.c **** */         
  87:../Generated_Code/SM1.c **** /*!
  88:../Generated_Code/SM1.c **** **  @addtogroup SM1_module SM1 module documentation
  89:../Generated_Code/SM1.c **** **  @{
  90:../Generated_Code/SM1.c **** */         
  91:../Generated_Code/SM1.c **** 
  92:../Generated_Code/SM1.c **** /* MODULE SM1. */
  93:../Generated_Code/SM1.c **** /*lint -save  -e926 -e927 -e928 -e929 Disable MISRA rule (11.4) checking. */
  94:../Generated_Code/SM1.c **** 
  95:../Generated_Code/SM1.c **** #include "Events.h"
  96:../Generated_Code/SM1.c **** #include "SM1.h"
  97:../Generated_Code/SM1.c **** /* {Default RTOS Adapter} No RTOS includes */
  98:../Generated_Code/SM1.c **** 
  99:../Generated_Code/SM1.c **** #ifdef __cplusplus
 100:../Generated_Code/SM1.c **** extern "C" {
 101:../Generated_Code/SM1.c **** #endif 
 102:../Generated_Code/SM1.c **** 
 103:../Generated_Code/SM1.c **** #define AVAILABLE_EVENTS_MASK (LDD_SPIMASTER_ON_BLOCK_RECEIVED | LDD_SPIMASTER_ON_BLOCK_SENT)
 104:../Generated_Code/SM1.c **** 
 105:../Generated_Code/SM1.c **** /* These constants contain pins masks */
 106:../Generated_Code/SM1.c **** #define SM1_AVAILABLE_PIN_MASK (LDD_SPIMASTER_INPUT_PIN | LDD_SPIMASTER_OUTPUT_PIN | LDD_SPIMASTER_
 107:../Generated_Code/SM1.c **** 
 108:../Generated_Code/SM1.c **** typedef struct {
 109:../Generated_Code/SM1.c ****   LDD_SPIMASTER_TError ErrFlag;        /* Error flags */
 110:../Generated_Code/SM1.c ****   uint16_t InpRecvDataNum;             /* The counter of received characters */
 111:../Generated_Code/SM1.c ****   uint8_t *InpDataPtr;                 /* The buffer pointer for received characters */
 112:../Generated_Code/SM1.c ****   uint16_t InpDataNumReq;              /* The counter of characters to receive by ReceiveBlock() */
 113:../Generated_Code/SM1.c ****   uint16_t OutSentDataNum;             /* The counter of sent characters */
 114:../Generated_Code/SM1.c ****   uint8_t *OutDataPtr;                 /* The buffer pointer for data to be transmitted */
 115:../Generated_Code/SM1.c ****   uint16_t OutDataNumReq;              /* The counter of characters to be send by SendBlock() */
 116:../Generated_Code/SM1.c ****   LDD_TUserData *UserData;             /* User device data structure */
 117:../Generated_Code/SM1.c **** } SM1_TDeviceData;                     /* Device data structure type */
 118:../Generated_Code/SM1.c **** 
 119:../Generated_Code/SM1.c **** typedef SM1_TDeviceData* SM1_TDeviceDataPtr; /* Pointer to the device data structure */
 120:../Generated_Code/SM1.c **** 
 121:../Generated_Code/SM1.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 122:../Generated_Code/SM1.c **** static SM1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 123:../Generated_Code/SM1.c **** /* {Default RTOS Adapter} Global variable used for passing a parameter into ISR */
 124:../Generated_Code/SM1.c **** static SM1_TDeviceDataPtr INT_SPI0__DEFAULT_RTOS_ISRPARAM;
 125:../Generated_Code/SM1.c **** /* Internal method prototypes */
 126:../Generated_Code/SM1.c **** 
 127:../Generated_Code/SM1.c **** /*
 128:../Generated_Code/SM1.c **** ** ===================================================================
 129:../Generated_Code/SM1.c **** **     Method      :  SM1_Init (component SPIMaster_LDD)
 130:../Generated_Code/SM1.c **** */
 131:../Generated_Code/SM1.c **** /*!
 132:../Generated_Code/SM1.c **** **     @brief
 133:../Generated_Code/SM1.c **** **         Initializes the device. Allocates memory for the device data
 134:../Generated_Code/SM1.c **** **         structure, allocates interrupt vectors and sets interrupt
 135:../Generated_Code/SM1.c **** **         priority, sets pin routing, sets timing, etc.
 136:../Generated_Code/SM1.c **** **         If the "Enable in init. code" is set to "yes" value then the
 137:../Generated_Code/SM1.c **** **         device is also enabled(see the description of the Enable()
 138:../Generated_Code/SM1.c **** **         method). In this case the Enable() method is not necessary
 139:../Generated_Code/SM1.c **** **         and needn't to be generated. 
 140:../Generated_Code/SM1.c **** **         This method can be called only once. Before the second call
 141:../Generated_Code/SM1.c **** **         of Init() the Deinit() must be called first.
 142:../Generated_Code/SM1.c **** **     @param
 143:../Generated_Code/SM1.c **** **         UserDataPtr     - Pointer to the user or
 144:../Generated_Code/SM1.c **** **                           RTOS specific data. This pointer will be
 145:../Generated_Code/SM1.c **** **                           passed as an event or callback parameter.
 146:../Generated_Code/SM1.c **** **     @return
 147:../Generated_Code/SM1.c **** **                         - Device data structure pointer.
 148:../Generated_Code/SM1.c **** */
 149:../Generated_Code/SM1.c **** /* ===================================================================*/
 150:../Generated_Code/SM1.c **** LDD_TDeviceData* SM1_Init(LDD_TUserData *UserDataPtr)
 151:../Generated_Code/SM1.c **** {
  38              		.loc 1 151 0
  39              		.cfi_startproc
  40 0000 80B5     		push	{r7, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  45 0002 84B0     		sub	sp, sp, #16
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 24
  48 0004 00AF     		add	r7, sp, #0
  49              	.LCFI2:
  50              		.cfi_def_cfa_register 7
  51 0006 7860     		str	r0, [r7, #4]
 152:../Generated_Code/SM1.c ****   /* Allocate LDD device structure */
 153:../Generated_Code/SM1.c ****   SM1_TDeviceDataPtr DeviceDataPrv;
 154:../Generated_Code/SM1.c **** 
 155:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 156:../Generated_Code/SM1.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  52              		.loc 1 156 0
  53 0008 354B     		ldr	r3, .L3
  54 000a FB60     		str	r3, [r7, #12]
 157:../Generated_Code/SM1.c ****   DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */
  55              		.loc 1 157 0
  56 000c FB68     		ldr	r3, [r7, #12]
  57 000e 7A68     		ldr	r2, [r7, #4]
  58 0010 9A61     		str	r2, [r3, #24]
 158:../Generated_Code/SM1.c ****   /* Interrupt vector(s) allocation */
 159:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the glo
 160:../Generated_Code/SM1.c ****   INT_SPI0__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
  59              		.loc 1 160 0
  60 0012 344B     		ldr	r3, .L3+4
  61 0014 FA68     		ldr	r2, [r7, #12]
  62 0016 1A60     		str	r2, [r3]
 161:../Generated_Code/SM1.c ****   DeviceDataPrv->ErrFlag = 0x00U;      /* Clear error flags */
  63              		.loc 1 161 0
  64 0018 FB68     		ldr	r3, [r7, #12]
  65 001a 0022     		mov	r2, #0
  66 001c 1A60     		str	r2, [r3]
 162:../Generated_Code/SM1.c ****   /* Clear the receive counters and pointer */
 163:../Generated_Code/SM1.c ****   DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
  67              		.loc 1 163 0
  68 001e FB68     		ldr	r3, [r7, #12]
  69 0020 0022     		mov	r2, #0
  70 0022 9A80     		strh	r2, [r3, #4]
 164:../Generated_Code/SM1.c ****   DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlo
  71              		.loc 1 164 0
  72 0024 FB68     		ldr	r3, [r7, #12]
  73 0026 0022     		mov	r2, #0
  74 0028 9A81     		strh	r2, [r3, #12]
 165:../Generated_Code/SM1.c ****   DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
  75              		.loc 1 165 0
  76 002a FB68     		ldr	r3, [r7, #12]
  77 002c 0022     		mov	r2, #0
  78 002e 9A60     		str	r2, [r3, #8]
 166:../Generated_Code/SM1.c ****   /* Clear the transmit counters and pointer */
 167:../Generated_Code/SM1.c ****   DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
  79              		.loc 1 167 0
  80 0030 FB68     		ldr	r3, [r7, #12]
  81 0032 0022     		mov	r2, #0
  82 0034 DA81     		strh	r2, [r3, #14]
 168:../Generated_Code/SM1.c ****   DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock(
  83              		.loc 1 168 0
  84 0036 FB68     		ldr	r3, [r7, #12]
  85 0038 0022     		mov	r2, #0
  86 003a 9A82     		strh	r2, [r3, #20]
 169:../Generated_Code/SM1.c ****   DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  87              		.loc 1 169 0
  88 003c FB68     		ldr	r3, [r7, #12]
  89 003e 0022     		mov	r2, #0
  90 0040 1A61     		str	r2, [r3, #16]
 170:../Generated_Code/SM1.c ****   /* SIM_SCGC4: SPI0=1 */
 171:../Generated_Code/SM1.c ****   SIM_SCGC4 |= SIM_SCGC4_SPI0_MASK;                                   
  91              		.loc 1 171 0
  92 0042 294A     		ldr	r2, .L3+8
  93 0044 2849     		ldr	r1, .L3+8
  94 0046 294B     		ldr	r3, .L3+12
  95 0048 CB58     		ldr	r3, [r1, r3]
  96 004a 8021     		mov	r1, #128
  97 004c C903     		lsl	r1, r1, #15
  98 004e 1943     		orr	r1, r3
  99 0050 264B     		ldr	r3, .L3+12
 100 0052 D150     		str	r1, [r2, r3]
 172:../Generated_Code/SM1.c ****   /* Interrupt vector(s) priority setting */
 173:../Generated_Code/SM1.c ****   /* NVIC_IPR2: PRI_10=0x80 */
 174:../Generated_Code/SM1.c ****   NVIC_IPR2 = (uint32_t)((NVIC_IPR2 & (uint32_t)~(uint32_t)(
 101              		.loc 1 174 0
 102 0054 264A     		ldr	r2, .L3+16
 103 0056 2649     		ldr	r1, .L3+16
 104 0058 C223     		mov	r3, #194
 105 005a 9B00     		lsl	r3, r3, #2
 106 005c C958     		ldr	r1, [r1, r3]
 107 005e 254B     		ldr	r3, .L3+20
 108 0060 0B40     		and	r3, r1
 109 0062 8021     		mov	r1, #128
 110 0064 0904     		lsl	r1, r1, #16
 111 0066 1943     		orr	r1, r3
 112 0068 C223     		mov	r3, #194
 113 006a 9B00     		lsl	r3, r3, #2
 114 006c D150     		str	r1, [r2, r3]
 175:../Generated_Code/SM1.c ****                NVIC_IP_PRI_10(0x7F)
 176:../Generated_Code/SM1.c ****               )) | (uint32_t)(
 177:../Generated_Code/SM1.c ****                NVIC_IP_PRI_10(0x80)
 178:../Generated_Code/SM1.c ****               ));                                  
 179:../Generated_Code/SM1.c ****   /* NVIC_ISER: SETENA|=0x0400 */
 180:../Generated_Code/SM1.c ****   NVIC_ISER |= NVIC_ISER_SETENA(0x0400);                                   
 115              		.loc 1 180 0
 116 006e 204B     		ldr	r3, .L3+16
 117 0070 1F4A     		ldr	r2, .L3+16
 118 0072 1268     		ldr	r2, [r2]
 119 0074 8021     		mov	r1, #128
 120 0076 C900     		lsl	r1, r1, #3
 121 0078 0A43     		orr	r2, r1
 122 007a 1A60     		str	r2, [r3]
 181:../Generated_Code/SM1.c ****   /* PORTA_PCR16: ISF=0,MUX=5 */
 182:../Generated_Code/SM1.c ****   PORTA_PCR16 = (uint32_t)((PORTA_PCR16 & (uint32_t)~(uint32_t)(
 123              		.loc 1 182 0
 124 007c 1E4B     		ldr	r3, .L3+24
 125 007e 1E4A     		ldr	r2, .L3+24
 126 0080 116C     		ldr	r1, [r2, #64]
 127 0082 1E4A     		ldr	r2, .L3+28
 128 0084 0A40     		and	r2, r1
 129 0086 A021     		mov	r1, #160
 130 0088 C900     		lsl	r1, r1, #3
 131 008a 0A43     		orr	r2, r1
 132 008c 1A64     		str	r2, [r3, #64]
 183:../Generated_Code/SM1.c ****                  PORT_PCR_ISF_MASK |
 184:../Generated_Code/SM1.c ****                  PORT_PCR_MUX(0x02)
 185:../Generated_Code/SM1.c ****                 )) | (uint32_t)(
 186:../Generated_Code/SM1.c ****                  PORT_PCR_MUX(0x05)
 187:../Generated_Code/SM1.c ****                 ));                                  
 188:../Generated_Code/SM1.c ****   /* PORTA_PCR17: ISF=0,MUX=5 */
 189:../Generated_Code/SM1.c ****   PORTA_PCR17 = (uint32_t)((PORTA_PCR17 & (uint32_t)~(uint32_t)(
 133              		.loc 1 189 0
 134 008e 1A4B     		ldr	r3, .L3+24
 135 0090 194A     		ldr	r2, .L3+24
 136 0092 516C     		ldr	r1, [r2, #68]
 137 0094 194A     		ldr	r2, .L3+28
 138 0096 0A40     		and	r2, r1
 139 0098 A021     		mov	r1, #160
 140 009a C900     		lsl	r1, r1, #3
 141 009c 0A43     		orr	r2, r1
 142 009e 5A64     		str	r2, [r3, #68]
 190:../Generated_Code/SM1.c ****                  PORT_PCR_ISF_MASK |
 191:../Generated_Code/SM1.c ****                  PORT_PCR_MUX(0x02)
 192:../Generated_Code/SM1.c ****                 )) | (uint32_t)(
 193:../Generated_Code/SM1.c ****                  PORT_PCR_MUX(0x05)
 194:../Generated_Code/SM1.c ****                 ));                                  
 195:../Generated_Code/SM1.c ****   /* PORTC_PCR5: ISF=0,MUX=2 */
 196:../Generated_Code/SM1.c ****   PORTC_PCR5 = (uint32_t)((PORTC_PCR5 & (uint32_t)~(uint32_t)(
 143              		.loc 1 196 0
 144 00a0 174B     		ldr	r3, .L3+32
 145 00a2 174A     		ldr	r2, .L3+32
 146 00a4 5169     		ldr	r1, [r2, #20]
 147 00a6 154A     		ldr	r2, .L3+28
 148 00a8 0A40     		and	r2, r1
 149 00aa 8021     		mov	r1, #128
 150 00ac 8900     		lsl	r1, r1, #2
 151 00ae 0A43     		orr	r2, r1
 152 00b0 5A61     		str	r2, [r3, #20]
 197:../Generated_Code/SM1.c ****                 PORT_PCR_ISF_MASK |
 198:../Generated_Code/SM1.c ****                 PORT_PCR_MUX(0x05)
 199:../Generated_Code/SM1.c ****                )) | (uint32_t)(
 200:../Generated_Code/SM1.c ****                 PORT_PCR_MUX(0x02)
 201:../Generated_Code/SM1.c ****                ));                                  
 202:../Generated_Code/SM1.c ****   /* SPI0_C1: SPIE=0,SPE=0,SPTIE=0,MSTR=1,CPOL=1,CPHA=1,SSOE=1,LSBFE=0 */
 203:../Generated_Code/SM1.c ****   SPI0_C1 = SPI_C1_MSTR_MASK |
 153              		.loc 1 203 0
 154 00b2 144B     		ldr	r3, .L3+36
 155 00b4 1E22     		mov	r2, #30
 156 00b6 1A70     		strb	r2, [r3]
 204:../Generated_Code/SM1.c ****             SPI_C1_CPOL_MASK |
 205:../Generated_Code/SM1.c ****             SPI_C1_CPHA_MASK |
 206:../Generated_Code/SM1.c ****             SPI_C1_SSOE_MASK;          /* Set configuration register */
 207:../Generated_Code/SM1.c ****   
 208:../Generated_Code/SM1.c ****   /* SPI0_C2: SPMIE=0,??=0,TXDMAE=0,MODFEN=1,BIDIROE=0,RXDMAE=0,SPISWAI=0,SPC0=0 */
 209:../Generated_Code/SM1.c ****   //SPI0_C2 = SPI_C2_MODFEN_MASK;        /* Set configuration register */
 210:../Generated_Code/SM1.c ****   
 211:../Generated_Code/SM1.c ****   /* SPI0_BR: ??=0,SPPR=2,SPR=5 */
 212:../Generated_Code/SM1.c ****   SPI0_BR = (SPI_BR_SPPR(0x02) | SPI_BR_SPR(0x05)); /* Set baud rate register */
 157              		.loc 1 212 0
 158 00b8 124B     		ldr	r3, .L3+36
 159 00ba 2522     		mov	r2, #37
 160 00bc 9A70     		strb	r2, [r3, #2]
 213:../Generated_Code/SM1.c ****   /* SPI0_C1: SPE=1 */
 214:../Generated_Code/SM1.c ****   SPI0_C1 |= SPI_C1_SPE_MASK;          /* Enable SPI module */
 161              		.loc 1 214 0
 162 00be 114B     		ldr	r3, .L3+36
 163 00c0 104A     		ldr	r2, .L3+36
 164 00c2 1278     		ldrb	r2, [r2]
 165 00c4 D2B2     		uxtb	r2, r2
 166 00c6 4021     		mov	r1, #64
 167 00c8 0A43     		orr	r2, r1
 168 00ca D2B2     		uxtb	r2, r2
 169 00cc 1A70     		strb	r2, [r3]
 215:../Generated_Code/SM1.c ****   /* Registration of the device structure */
 216:../Generated_Code/SM1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_SM1_ID,DeviceDataPrv);
 170              		.loc 1 216 0
 171 00ce 0E4B     		ldr	r3, .L3+40
 172 00d0 FA68     		ldr	r2, [r7, #12]
 173 00d2 5A60     		str	r2, [r3, #4]
 217:../Generated_Code/SM1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
 174              		.loc 1 217 0
 175 00d4 FB68     		ldr	r3, [r7, #12]
 218:../Generated_Code/SM1.c **** }
 176              		.loc 1 218 0
 177 00d6 181C     		mov	r0, r3
 178 00d8 BD46     		mov	sp, r7
 179 00da 04B0     		add	sp, sp, #16
 180              		@ sp needed for prologue
 181 00dc 80BD     		pop	{r7, pc}
 182              	.L4:
 183 00de C046     		.align	2
 184              	.L3:
 185 00e0 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 186 00e4 00000000 		.word	INT_SPI0__DEFAULT_RTOS_ISRPARAM
 187 00e8 00700440 		.word	1074032640
 188 00ec 34100000 		.word	4148
 189 00f0 00E100E0 		.word	-536813312
 190 00f4 FFFF00FF 		.word	-16711681
 191 00f8 00900440 		.word	1074040832
 192 00fc FFF8FFFE 		.word	-16779009
 193 0100 00B00440 		.word	1074049024
 194 0104 00600740 		.word	1074225152
 195 0108 00000000 		.word	PE_LDD_DeviceDataList
 196              		.cfi_endproc
 197              	.LFE0:
 199              		.section	.text.SM1_Deinit,"ax",%progbits
 200              		.align	2
 201              		.global	SM1_Deinit
 202              		.code	16
 203              		.thumb_func
 205              	SM1_Deinit:
 206              	.LFB1:
 219:../Generated_Code/SM1.c **** 
 220:../Generated_Code/SM1.c **** /*
 221:../Generated_Code/SM1.c **** ** ===================================================================
 222:../Generated_Code/SM1.c **** **     Method      :  SM1_Deinit (component SPIMaster_LDD)
 223:../Generated_Code/SM1.c **** */
 224:../Generated_Code/SM1.c **** /*!
 225:../Generated_Code/SM1.c **** **     @brief
 226:../Generated_Code/SM1.c **** **         This method deinitializes the device. It switches off the
 227:../Generated_Code/SM1.c **** **         device, frees the device data structure memory, interrupts
 228:../Generated_Code/SM1.c **** **         vectors, etc.
 229:../Generated_Code/SM1.c **** **     @param
 230:../Generated_Code/SM1.c **** **         DeviceDataPtr   - Device data structure
 231:../Generated_Code/SM1.c **** **                           pointer returned by <Init> method.
 232:../Generated_Code/SM1.c **** */
 233:../Generated_Code/SM1.c **** /* ===================================================================*/
 234:../Generated_Code/SM1.c **** void SM1_Deinit(LDD_TDeviceData *DeviceDataPtr)
 235:../Generated_Code/SM1.c **** {
 207              		.loc 1 235 0
 208              		.cfi_startproc
 209 0000 80B5     		push	{r7, lr}
 210              	.LCFI3:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 0002 82B0     		sub	sp, sp, #8
 215              	.LCFI4:
 216              		.cfi_def_cfa_offset 16
 217 0004 00AF     		add	r7, sp, #0
 218              	.LCFI5:
 219              		.cfi_def_cfa_register 7
 220 0006 7860     		str	r0, [r7, #4]
 236:../Generated_Code/SM1.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 237:../Generated_Code/SM1.c ****   /* SPI0_C1: SPIE=0,SPE=0,SPTIE=0,MSTR=0,CPOL=0,CPHA=1,SSOE=0,LSBFE=0 */
 238:../Generated_Code/SM1.c ****   SPI0_C1 = SPI_C1_CPHA_MASK;          /* Disable device */
 221              		.loc 1 238 0
 222 0008 084B     		ldr	r3, .L6
 223 000a 0422     		mov	r2, #4
 224 000c 1A70     		strb	r2, [r3]
 239:../Generated_Code/SM1.c ****   /* Restoring the interrupt vector */
 240:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Restore interrupt vector: IVT is static, no code is generated */
 241:../Generated_Code/SM1.c ****   /* Unregistration of the device structure */
 242:../Generated_Code/SM1.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_SM1_ID);
 225              		.loc 1 242 0
 226 000e 084B     		ldr	r3, .L6+4
 227 0010 0022     		mov	r2, #0
 228 0012 5A60     		str	r2, [r3, #4]
 243:../Generated_Code/SM1.c ****   /* Deallocation of the device structure */
 244:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 245:../Generated_Code/SM1.c ****   /* SIM_SCGC4: SPI0=0 */
 246:../Generated_Code/SM1.c ****   SIM_SCGC4 &= (uint32_t)~(uint32_t)(SIM_SCGC4_SPI0_MASK);                                   
 229              		.loc 1 246 0
 230 0014 074A     		ldr	r2, .L6+8
 231 0016 0749     		ldr	r1, .L6+8
 232 0018 074B     		ldr	r3, .L6+12
 233 001a C958     		ldr	r1, [r1, r3]
 234 001c 074B     		ldr	r3, .L6+16
 235 001e 1940     		and	r1, r3
 236 0020 054B     		ldr	r3, .L6+12
 237 0022 D150     		str	r1, [r2, r3]
 247:../Generated_Code/SM1.c **** }
 238              		.loc 1 247 0
 239 0024 BD46     		mov	sp, r7
 240 0026 02B0     		add	sp, sp, #8
 241              		@ sp needed for prologue
 242 0028 80BD     		pop	{r7, pc}
 243              	.L7:
 244 002a C046     		.align	2
 245              	.L6:
 246 002c 00600740 		.word	1074225152
 247 0030 00000000 		.word	PE_LDD_DeviceDataList
 248 0034 00700440 		.word	1074032640
 249 0038 34100000 		.word	4148
 250 003c FFFFBFFF 		.word	-4194305
 251              		.cfi_endproc
 252              	.LFE1:
 254              		.section	.text.SM1_ReceiveBlock,"ax",%progbits
 255              		.align	2
 256              		.global	SM1_ReceiveBlock
 257              		.code	16
 258              		.thumb_func
 260              	SM1_ReceiveBlock:
 261              	.LFB2:
 248:../Generated_Code/SM1.c **** 
 249:../Generated_Code/SM1.c **** /*
 250:../Generated_Code/SM1.c **** ** ===================================================================
 251:../Generated_Code/SM1.c **** **     Method      :  SM1_ReceiveBlock (component SPIMaster_LDD)
 252:../Generated_Code/SM1.c **** */
 253:../Generated_Code/SM1.c **** /*!
 254:../Generated_Code/SM1.c **** **     @brief
 255:../Generated_Code/SM1.c **** **         This method specifies the number of data to receive. The
 256:../Generated_Code/SM1.c **** **         method returns ERR_BUSY until the specified number of
 257:../Generated_Code/SM1.c **** **         characters is received. The method <CancelBlockReception>
 258:../Generated_Code/SM1.c **** **         can be used to cancel a running receive operation.
 259:../Generated_Code/SM1.c **** **     @param
 260:../Generated_Code/SM1.c **** **         DeviceDataPtr   - Device data structure
 261:../Generated_Code/SM1.c **** **                           pointer returned by <Init> method.
 262:../Generated_Code/SM1.c **** **     @param
 263:../Generated_Code/SM1.c **** **         BufferPtr       - Pointer to A buffer where
 264:../Generated_Code/SM1.c **** **                           received characters will be stored.
 265:../Generated_Code/SM1.c **** **     @param
 266:../Generated_Code/SM1.c **** **         Size            - Size of the block
 267:../Generated_Code/SM1.c **** **     @return
 268:../Generated_Code/SM1.c **** **                         - Error code, possible codes:
 269:../Generated_Code/SM1.c **** **                           ERR_OK - OK
 270:../Generated_Code/SM1.c **** **                           ERR_SPEED - This device does not work in
 271:../Generated_Code/SM1.c **** **                           the active clock configuration
 272:../Generated_Code/SM1.c **** **                           ERR_DISABLED - Component is disabled
 273:../Generated_Code/SM1.c **** **                           ERR_BUSY - The previous receive request is
 274:../Generated_Code/SM1.c **** **                           pending
 275:../Generated_Code/SM1.c **** */
 276:../Generated_Code/SM1.c **** /* ===================================================================*/
 277:../Generated_Code/SM1.c **** LDD_TError SM1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
 278:../Generated_Code/SM1.c **** {
 262              		.loc 1 278 0
 263              		.cfi_startproc
 264 0000 80B5     		push	{r7, lr}
 265              	.LCFI6:
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 7, -8
 268              		.cfi_offset 14, -4
 269 0002 84B0     		sub	sp, sp, #16
 270              	.LCFI7:
 271              		.cfi_def_cfa_offset 24
 272 0004 00AF     		add	r7, sp, #0
 273              	.LCFI8:
 274              		.cfi_def_cfa_register 7
 275 0006 F860     		str	r0, [r7, #12]
 276 0008 B960     		str	r1, [r7, #8]
 277 000a BB1D     		add	r3, r7, #6
 278 000c 1A80     		strh	r2, [r3]
 279:../Generated_Code/SM1.c ****   if (((SM1_TDeviceDataPtr)DeviceDataPtr)->InpDataNumReq != 0x00U) { /* Is the previous receive ope
 279              		.loc 1 279 0
 280 000e FB68     		ldr	r3, [r7, #12]
 281 0010 9B89     		ldrh	r3, [r3, #12]
 282 0012 002B     		cmp	r3, #0
 283 0014 01D0     		beq	.L9
 280:../Generated_Code/SM1.c ****     return ERR_BUSY;                   /* If yes then error */
 284              		.loc 1 280 0
 285 0016 0823     		mov	r3, #8
 286 0018 39E0     		b	.L10
 287              	.L9:
 281:../Generated_Code/SM1.c ****   }
 282:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 283:../Generated_Code/SM1.c ****   EnterCritical();
 288              		.loc 1 283 0
 289 001a 1F4B     		ldr	r3, .L14
 290 001c 1B78     		ldrb	r3, [r3]
 291 001e DBB2     		uxtb	r3, r3
 292 0020 0133     		add	r3, r3, #1
 293 0022 DBB2     		uxtb	r3, r3
 294 0024 1C4A     		ldr	r2, .L14
 295 0026 191C     		add	r1, r3, #0
 296 0028 1170     		strb	r1, [r2]
 297 002a 012B     		cmp	r3, #1
 298 002c 04D1     		bne	.L11
 299              		.loc 1 283 0 is_stmt 0
 300 002e 1B4B     		ldr	r3, .L14+4
 301              	@ 283 "../Generated_Code/SM1.c" 1
 302 0030 EFF31080 		MRS R0, PRIMASK
 303 0034 72B6     		CPSID i
 304 0036 1870     		STRB R0, [r3]
 305              	@ 0 "" 2
 306              		.code	16
 307              	.L11:
 284:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->InpDataPtr = (uint8_t*)BufferPtr; /* Store a pointer to the 
 308              		.loc 1 284 0 is_stmt 1
 309 0038 FB68     		ldr	r3, [r7, #12]
 310 003a BA68     		ldr	r2, [r7, #8]
 311 003c 9A60     		str	r2, [r3, #8]
 285:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->InpDataNumReq = Size; /* Store a number of characters to be 
 312              		.loc 1 285 0
 313 003e FB68     		ldr	r3, [r7, #12]
 314 0040 BA1D     		add	r2, r7, #6
 315 0042 1288     		ldrh	r2, [r2]
 316 0044 9A81     		strh	r2, [r3, #12]
 286:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->InpRecvDataNum = 0x00U; /* Set number of received characters
 317              		.loc 1 286 0
 318 0046 FB68     		ldr	r3, [r7, #12]
 319 0048 0022     		mov	r2, #0
 320 004a 9A80     		strh	r2, [r3, #4]
 287:../Generated_Code/SM1.c ****   if ((SPI_PDD_ReadStatusReg(SPI0_BASE_PTR) & SPI_PDD_RX_BUFFER_FULL) != 0U) {
 321              		.loc 1 287 0
 322 004c 144B     		ldr	r3, .L14+8
 323 004e DB78     		ldrb	r3, [r3, #3]
 324 0050 DBB2     		uxtb	r3, r3
 325 0052 DBB2     		uxtb	r3, r3
 326 0054 5BB2     		sxtb	r3, r3
 327 0056 002B     		cmp	r3, #0
 328 0058 01DA     		bge	.L12
 288:../Generated_Code/SM1.c ****     (void)SPI_PDD_ReadData8bit(SPI0_BASE_PTR); /* Dummy read of the data register */
 329              		.loc 1 288 0
 330 005a 114B     		ldr	r3, .L14+8
 331 005c 5B79     		ldrb	r3, [r3, #5]
 332              	.L12:
 289:../Generated_Code/SM1.c ****   }
 290:../Generated_Code/SM1.c ****   SPI_PDD_EnableInterruptMask(SPI0_BASE_PTR, SPI_PDD_RX_BUFFER_FULL_OR_FAULT); /* Enable Rx buffer 
 333              		.loc 1 290 0
 334 005e 104B     		ldr	r3, .L14+8
 335 0060 0F4A     		ldr	r2, .L14+8
 336 0062 1278     		ldrb	r2, [r2]
 337 0064 D2B2     		uxtb	r2, r2
 338 0066 8021     		mov	r1, #128
 339 0068 4942     		neg	r1, r1
 340 006a 0A43     		orr	r2, r1
 341 006c D2B2     		uxtb	r2, r2
 342 006e 1A70     		strb	r2, [r3]
 291:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 292:../Generated_Code/SM1.c ****   ExitCritical();
 343              		.loc 1 292 0
 344 0070 094B     		ldr	r3, .L14
 345 0072 1B78     		ldrb	r3, [r3]
 346 0074 DBB2     		uxtb	r3, r3
 347 0076 013B     		sub	r3, r3, #1
 348 0078 DBB2     		uxtb	r3, r3
 349 007a 074A     		ldr	r2, .L14
 350 007c 191C     		add	r1, r3, #0
 351 007e 1170     		strb	r1, [r2]
 352 0080 002B     		cmp	r3, #0
 353 0082 03D1     		bne	.L13
 354              		.loc 1 292 0 is_stmt 0
 355 0084 054B     		ldr	r3, .L14+4
 356              	@ 292 "../Generated_Code/SM1.c" 1
 357 0086 1878     		ldrb r0, [r3]
 358 0088 80F31088 		msr PRIMASK,r0;
 359              		
 360              	@ 0 "" 2
 361              		.code	16
 362              	.L13:
 293:../Generated_Code/SM1.c ****   return ERR_OK;                       /* OK */
 363              		.loc 1 293 0 is_stmt 1
 364 008c 0023     		mov	r3, #0
 365              	.L10:
 294:../Generated_Code/SM1.c **** }
 366              		.loc 1 294 0
 367 008e 181C     		mov	r0, r3
 368 0090 BD46     		mov	sp, r7
 369 0092 04B0     		add	sp, sp, #16
 370              		@ sp needed for prologue
 371 0094 80BD     		pop	{r7, pc}
 372              	.L15:
 373 0096 C046     		.align	2
 374              	.L14:
 375 0098 00000000 		.word	SR_lock
 376 009c 00000000 		.word	SR_reg
 377 00a0 00600740 		.word	1074225152
 378              		.cfi_endproc
 379              	.LFE2:
 381              		.section	.text.SM1_SendBlock,"ax",%progbits
 382              		.align	2
 383              		.global	SM1_SendBlock
 384              		.code	16
 385              		.thumb_func
 387              	SM1_SendBlock:
 388              	.LFB3:
 295:../Generated_Code/SM1.c **** 
 296:../Generated_Code/SM1.c **** /*
 297:../Generated_Code/SM1.c **** ** ===================================================================
 298:../Generated_Code/SM1.c **** **     Method      :  SM1_SendBlock (component SPIMaster_LDD)
 299:../Generated_Code/SM1.c **** */
 300:../Generated_Code/SM1.c **** /*!
 301:../Generated_Code/SM1.c **** **     @brief
 302:../Generated_Code/SM1.c **** **         This method sends a block of characters. The method returns
 303:../Generated_Code/SM1.c **** **         ERR_BUSY when the previous block transmission is not
 304:../Generated_Code/SM1.c **** **         completed. The method <CancelBlockTransmission> can be used
 305:../Generated_Code/SM1.c **** **         to cancel a transmit operation.
 306:../Generated_Code/SM1.c **** **     @param
 307:../Generated_Code/SM1.c **** **         DeviceDataPtr   - Device data structure
 308:../Generated_Code/SM1.c **** **                           pointer returned by <Init> method.
 309:../Generated_Code/SM1.c **** **     @param
 310:../Generated_Code/SM1.c **** **         BufferPtr       - Pointer to the block of data
 311:../Generated_Code/SM1.c **** **                           to send.
 312:../Generated_Code/SM1.c **** **     @param
 313:../Generated_Code/SM1.c **** **         Size            - Number of characters in the buffer.
 314:../Generated_Code/SM1.c **** **     @return
 315:../Generated_Code/SM1.c **** **                         - Error code, possible codes:
 316:../Generated_Code/SM1.c **** **                           ERR_OK - OK
 317:../Generated_Code/SM1.c **** **                           ERR_SPEED - This device does not work in
 318:../Generated_Code/SM1.c **** **                           the active clock configuration
 319:../Generated_Code/SM1.c **** **                           ERR_DISABLED - Component is disabled
 320:../Generated_Code/SM1.c **** **                           ERR_BUSY - The previous transmit request is
 321:../Generated_Code/SM1.c **** **                           pending
 322:../Generated_Code/SM1.c **** */
 323:../Generated_Code/SM1.c **** /* ===================================================================*/
 324:../Generated_Code/SM1.c **** LDD_TError SM1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
 325:../Generated_Code/SM1.c **** {
 389              		.loc 1 325 0
 390              		.cfi_startproc
 391 0000 80B5     		push	{r7, lr}
 392              	.LCFI9:
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 7, -8
 395              		.cfi_offset 14, -4
 396 0002 84B0     		sub	sp, sp, #16
 397              	.LCFI10:
 398              		.cfi_def_cfa_offset 24
 399 0004 00AF     		add	r7, sp, #0
 400              	.LCFI11:
 401              		.cfi_def_cfa_register 7
 402 0006 F860     		str	r0, [r7, #12]
 403 0008 B960     		str	r1, [r7, #8]
 404 000a BB1D     		add	r3, r7, #6
 405 000c 1A80     		strh	r2, [r3]
 326:../Generated_Code/SM1.c ****   if (((SM1_TDeviceDataPtr)DeviceDataPtr)->OutDataNumReq != 0x00U) { /* Is the previous transmit op
 406              		.loc 1 326 0
 407 000e FB68     		ldr	r3, [r7, #12]
 408 0010 9B8A     		ldrh	r3, [r3, #20]
 409 0012 002B     		cmp	r3, #0
 410 0014 01D0     		beq	.L17
 327:../Generated_Code/SM1.c ****     return ERR_BUSY;                   /* If yes then error */
 411              		.loc 1 327 0
 412 0016 0823     		mov	r3, #8
 413 0018 2FE0     		b	.L18
 414              	.L17:
 328:../Generated_Code/SM1.c ****   }
 329:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 330:../Generated_Code/SM1.c ****   EnterCritical();
 415              		.loc 1 330 0
 416 001a 1A4B     		ldr	r3, .L21
 417 001c 1B78     		ldrb	r3, [r3]
 418 001e DBB2     		uxtb	r3, r3
 419 0020 0133     		add	r3, r3, #1
 420 0022 DBB2     		uxtb	r3, r3
 421 0024 174A     		ldr	r2, .L21
 422 0026 191C     		add	r1, r3, #0
 423 0028 1170     		strb	r1, [r2]
 424 002a 012B     		cmp	r3, #1
 425 002c 04D1     		bne	.L19
 426              		.loc 1 330 0 is_stmt 0
 427 002e 164B     		ldr	r3, .L21+4
 428              	@ 330 "../Generated_Code/SM1.c" 1
 429 0030 EFF31080 		MRS R0, PRIMASK
 430 0034 72B6     		CPSID i
 431 0036 1870     		STRB R0, [r3]
 432              	@ 0 "" 2
 433              		.code	16
 434              	.L19:
 331:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the ou
 435              		.loc 1 331 0 is_stmt 1
 436 0038 FB68     		ldr	r3, [r7, #12]
 437 003a BA68     		ldr	r2, [r7, #8]
 438 003c 1A61     		str	r2, [r3, #16]
 332:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->OutDataNumReq = Size; /* Set the counter of characters to be
 439              		.loc 1 332 0
 440 003e FB68     		ldr	r3, [r7, #12]
 441 0040 BA1D     		add	r2, r7, #6
 442 0042 1288     		ldrh	r2, [r2]
 443 0044 9A82     		strh	r2, [r3, #20]
 333:../Generated_Code/SM1.c ****   ((SM1_TDeviceDataPtr)DeviceDataPtr)->OutSentDataNum = 0x00U; /* Clear the counter of sent charact
 444              		.loc 1 333 0
 445 0046 FB68     		ldr	r3, [r7, #12]
 446 0048 0022     		mov	r2, #0
 447 004a DA81     		strh	r2, [r3, #14]
 334:../Generated_Code/SM1.c ****   SPI_PDD_EnableInterruptMask(SPI0_BASE_PTR, SPI_PDD_TX_BUFFER_EMPTY); /* Enable Tx buffer empty in
 448              		.loc 1 334 0
 449 004c 0F4B     		ldr	r3, .L21+8
 450 004e 0F4A     		ldr	r2, .L21+8
 451 0050 1278     		ldrb	r2, [r2]
 452 0052 D2B2     		uxtb	r2, r2
 453 0054 2021     		mov	r1, #32
 454 0056 0A43     		orr	r2, r1
 455 0058 D2B2     		uxtb	r2, r2
 456 005a 1A70     		strb	r2, [r3]
 335:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 336:../Generated_Code/SM1.c ****   ExitCritical();
 457              		.loc 1 336 0
 458 005c 094B     		ldr	r3, .L21
 459 005e 1B78     		ldrb	r3, [r3]
 460 0060 DBB2     		uxtb	r3, r3
 461 0062 013B     		sub	r3, r3, #1
 462 0064 DBB2     		uxtb	r3, r3
 463 0066 074A     		ldr	r2, .L21
 464 0068 191C     		add	r1, r3, #0
 465 006a 1170     		strb	r1, [r2]
 466 006c 002B     		cmp	r3, #0
 467 006e 03D1     		bne	.L20
 468              		.loc 1 336 0 is_stmt 0
 469 0070 054B     		ldr	r3, .L21+4
 470              	@ 336 "../Generated_Code/SM1.c" 1
 471 0072 1878     		ldrb r0, [r3]
 472 0074 80F31088 		msr PRIMASK,r0;
 473              		
 474              	@ 0 "" 2
 475              		.code	16
 476              	.L20:
 337:../Generated_Code/SM1.c ****   return ERR_OK;                       /* OK */
 477              		.loc 1 337 0 is_stmt 1
 478 0078 0023     		mov	r3, #0
 479              	.L18:
 338:../Generated_Code/SM1.c **** }
 480              		.loc 1 338 0
 481 007a 181C     		mov	r0, r3
 482 007c BD46     		mov	sp, r7
 483 007e 04B0     		add	sp, sp, #16
 484              		@ sp needed for prologue
 485 0080 80BD     		pop	{r7, pc}
 486              	.L22:
 487 0082 C046     		.align	2
 488              	.L21:
 489 0084 00000000 		.word	SR_lock
 490 0088 00000000 		.word	SR_reg
 491 008c 00600740 		.word	1074225152
 492              		.cfi_endproc
 493              	.LFE3:
 495              		.section	.text.SM1_GetReceivedDataNum,"ax",%progbits
 496              		.align	2
 497              		.global	SM1_GetReceivedDataNum
 498              		.code	16
 499              		.thumb_func
 501              	SM1_GetReceivedDataNum:
 502              	.LFB4:
 339:../Generated_Code/SM1.c **** 
 340:../Generated_Code/SM1.c **** /*
 341:../Generated_Code/SM1.c **** ** ===================================================================
 342:../Generated_Code/SM1.c **** **     Method      :  SM1_GetReceivedDataNum (component SPIMaster_LDD)
 343:../Generated_Code/SM1.c **** */
 344:../Generated_Code/SM1.c **** /*!
 345:../Generated_Code/SM1.c **** **     @brief
 346:../Generated_Code/SM1.c **** **         Returns the number of received characters in the receive
 347:../Generated_Code/SM1.c **** **         buffer. This method is available only if the ReceiveBlock
 348:../Generated_Code/SM1.c **** **         method is enabled.
 349:../Generated_Code/SM1.c **** **     @param
 350:../Generated_Code/SM1.c **** **         DeviceDataPtr   - Device data structure
 351:../Generated_Code/SM1.c **** **                           pointer returned by <Init> method.
 352:../Generated_Code/SM1.c **** **     @return
 353:../Generated_Code/SM1.c **** **                         - The number of characters in the input
 354:../Generated_Code/SM1.c **** **                           buffer.
 355:../Generated_Code/SM1.c **** */
 356:../Generated_Code/SM1.c **** /* ===================================================================*/
 357:../Generated_Code/SM1.c **** uint16_t SM1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr)
 358:../Generated_Code/SM1.c **** {
 503              		.loc 1 358 0
 504              		.cfi_startproc
 505 0000 80B5     		push	{r7, lr}
 506              	.LCFI12:
 507              		.cfi_def_cfa_offset 8
 508              		.cfi_offset 7, -8
 509              		.cfi_offset 14, -4
 510 0002 82B0     		sub	sp, sp, #8
 511              	.LCFI13:
 512              		.cfi_def_cfa_offset 16
 513 0004 00AF     		add	r7, sp, #0
 514              	.LCFI14:
 515              		.cfi_def_cfa_register 7
 516 0006 7860     		str	r0, [r7, #4]
 359:../Generated_Code/SM1.c ****   return (((SM1_TDeviceDataPtr)DeviceDataPtr)->InpRecvDataNum); /* Return the number of received ch
 517              		.loc 1 359 0
 518 0008 7B68     		ldr	r3, [r7, #4]
 519 000a 9B88     		ldrh	r3, [r3, #4]
 360:../Generated_Code/SM1.c **** }
 520              		.loc 1 360 0
 521 000c 181C     		mov	r0, r3
 522 000e BD46     		mov	sp, r7
 523 0010 02B0     		add	sp, sp, #8
 524              		@ sp needed for prologue
 525 0012 80BD     		pop	{r7, pc}
 526              		.cfi_endproc
 527              	.LFE4:
 529              		.section	.text.SM1_GetSentDataNum,"ax",%progbits
 530              		.align	2
 531              		.global	SM1_GetSentDataNum
 532              		.code	16
 533              		.thumb_func
 535              	SM1_GetSentDataNum:
 536              	.LFB5:
 361:../Generated_Code/SM1.c **** 
 362:../Generated_Code/SM1.c **** /*
 363:../Generated_Code/SM1.c **** ** ===================================================================
 364:../Generated_Code/SM1.c **** **     Method      :  SM1_GetSentDataNum (component SPIMaster_LDD)
 365:../Generated_Code/SM1.c **** */
 366:../Generated_Code/SM1.c **** /*!
 367:../Generated_Code/SM1.c **** **     @brief
 368:../Generated_Code/SM1.c **** **         Returns the number of sent characters. This method is
 369:../Generated_Code/SM1.c **** **         available only if method SendBlock is enabled.
 370:../Generated_Code/SM1.c **** **     @param
 371:../Generated_Code/SM1.c **** **         DeviceDataPtr   - Device data structure
 372:../Generated_Code/SM1.c **** **                           pointer returned by <Init> method.
 373:../Generated_Code/SM1.c **** **     @return
 374:../Generated_Code/SM1.c **** **                         - The number of characters in the output
 375:../Generated_Code/SM1.c **** **                           buffer.
 376:../Generated_Code/SM1.c **** */
 377:../Generated_Code/SM1.c **** /* ===================================================================*/
 378:../Generated_Code/SM1.c **** uint16_t SM1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr)
 379:../Generated_Code/SM1.c **** {
 537              		.loc 1 379 0
 538              		.cfi_startproc
 539 0000 80B5     		push	{r7, lr}
 540              	.LCFI15:
 541              		.cfi_def_cfa_offset 8
 542              		.cfi_offset 7, -8
 543              		.cfi_offset 14, -4
 544 0002 82B0     		sub	sp, sp, #8
 545              	.LCFI16:
 546              		.cfi_def_cfa_offset 16
 547 0004 00AF     		add	r7, sp, #0
 548              	.LCFI17:
 549              		.cfi_def_cfa_register 7
 550 0006 7860     		str	r0, [r7, #4]
 380:../Generated_Code/SM1.c ****   return (((SM1_TDeviceDataPtr)DeviceDataPtr)->OutSentDataNum); /* Return the number of sent charac
 551              		.loc 1 380 0
 552 0008 7B68     		ldr	r3, [r7, #4]
 553 000a DB89     		ldrh	r3, [r3, #14]
 381:../Generated_Code/SM1.c **** }
 554              		.loc 1 381 0
 555 000c 181C     		mov	r0, r3
 556 000e BD46     		mov	sp, r7
 557 0010 02B0     		add	sp, sp, #8
 558              		@ sp needed for prologue
 559 0012 80BD     		pop	{r7, pc}
 560              		.cfi_endproc
 561              	.LFE5:
 563              		.section	.text.SM1_Interrupt,"ax",%progbits
 564              		.align	2
 565              		.global	SM1_Interrupt
 566              		.code	16
 567              		.thumb_func
 569              	SM1_Interrupt:
 570              	.LFB6:
 382:../Generated_Code/SM1.c **** 
 383:../Generated_Code/SM1.c **** /*
 384:../Generated_Code/SM1.c **** ** ===================================================================
 385:../Generated_Code/SM1.c **** **     Method      :  SM1_Interrupt (component SPIMaster_LDD)
 386:../Generated_Code/SM1.c **** **
 387:../Generated_Code/SM1.c **** **     Description :
 388:../Generated_Code/SM1.c **** **         The ISR function handling the device receive/transmit 
 389:../Generated_Code/SM1.c **** **         interrupt.
 390:../Generated_Code/SM1.c **** **         This method is internal. It is used by Processor Expert only.
 391:../Generated_Code/SM1.c **** ** ===================================================================
 392:../Generated_Code/SM1.c **** */
 393:../Generated_Code/SM1.c **** PE_ISR(SM1_Interrupt)
 394:../Generated_Code/SM1.c **** {
 571              		.loc 1 394 0
 572              		.cfi_startproc
 573 0000 80B5     		push	{r7, lr}
 574              	.LCFI18:
 575              		.cfi_def_cfa_offset 8
 576              		.cfi_offset 7, -8
 577              		.cfi_offset 14, -4
 578 0002 82B0     		sub	sp, sp, #8
 579              	.LCFI19:
 580              		.cfi_def_cfa_offset 16
 581 0004 00AF     		add	r7, sp, #0
 582              	.LCFI20:
 583              		.cfi_def_cfa_register 7
 395:../Generated_Code/SM1.c ****   /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
 396:../Generated_Code/SM1.c ****   SM1_TDeviceDataPtr DeviceDataPrv = INT_SPI0__DEFAULT_RTOS_ISRPARAM;
 584              		.loc 1 396 0
 585 0006 344B     		ldr	r3, .L31
 586 0008 1B68     		ldr	r3, [r3]
 587 000a 7B60     		str	r3, [r7, #4]
 397:../Generated_Code/SM1.c ****   uint8_t StatReg = SPI_PDD_ReadStatusReg(SPI0_BASE_PTR); /* Read status register */
 588              		.loc 1 397 0
 589 000c 334A     		ldr	r2, .L31+4
 590 000e FB1C     		add	r3, r7, #3
 591 0010 D278     		ldrb	r2, [r2, #3]
 592 0012 1A70     		strb	r2, [r3]
 398:../Generated_Code/SM1.c **** 
 399:../Generated_Code/SM1.c ****   (void)DeviceDataPrv;                 /* Supress unused variable warning if needed */
 400:../Generated_Code/SM1.c ****   if ((StatReg & SPI_PDD_RX_BUFFER_FULL) != 0U) { /* Is any char in HW Rx buffer? */
 593              		.loc 1 400 0
 594 0014 FB1C     		add	r3, r7, #3
 595 0016 1B78     		ldrb	r3, [r3]
 596 0018 5BB2     		sxtb	r3, r3
 597 001a 002B     		cmp	r3, #0
 598 001c 28DA     		bge	.L28
 401:../Generated_Code/SM1.c ****     if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
 599              		.loc 1 401 0
 600 001e 7B68     		ldr	r3, [r7, #4]
 601 0020 9B89     		ldrh	r3, [r3, #12]
 602 0022 002B     		cmp	r3, #0
 603 0024 24D0     		beq	.L28
 402:../Generated_Code/SM1.c ****       *(DeviceDataPrv->InpDataPtr++) = SPI_PDD_ReadData8bit(SPI0_BASE_PTR); /* Put a character to t
 604              		.loc 1 402 0
 605 0026 7B68     		ldr	r3, [r7, #4]
 606 0028 9B68     		ldr	r3, [r3, #8]
 607 002a 2C4A     		ldr	r2, .L31+4
 608 002c 5279     		ldrb	r2, [r2, #5]
 609 002e D2B2     		uxtb	r2, r2
 610 0030 1A70     		strb	r2, [r3]
 611 0032 5A1C     		add	r2, r3, #1
 612 0034 7B68     		ldr	r3, [r7, #4]
 613 0036 9A60     		str	r2, [r3, #8]
 403:../Generated_Code/SM1.c ****       DeviceDataPrv->InpRecvDataNum++; /* Increment received char. counter */
 614              		.loc 1 403 0
 615 0038 7B68     		ldr	r3, [r7, #4]
 616 003a 9B88     		ldrh	r3, [r3, #4]
 617 003c 0133     		add	r3, r3, #1
 618 003e 9AB2     		uxth	r2, r3
 619 0040 7B68     		ldr	r3, [r7, #4]
 620 0042 9A80     		strh	r2, [r3, #4]
 404:../Generated_Code/SM1.c ****       if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested numb
 621              		.loc 1 404 0
 622 0044 7B68     		ldr	r3, [r7, #4]
 623 0046 9A88     		ldrh	r2, [r3, #4]
 624 0048 7B68     		ldr	r3, [r7, #4]
 625 004a 9B89     		ldrh	r3, [r3, #12]
 626 004c 9A42     		cmp	r2, r3
 627 004e 0FD1     		bne	.L28
 405:../Generated_Code/SM1.c ****         SPI_PDD_DisableInterruptMask(SPI0_BASE_PTR, SPI_PDD_RX_BUFFER_FULL_OR_FAULT); /* Disable Rx
 628              		.loc 1 405 0
 629 0050 224B     		ldr	r3, .L31+4
 630 0052 224A     		ldr	r2, .L31+4
 631 0054 1278     		ldrb	r2, [r2]
 632 0056 D1B2     		uxtb	r1, r2
 633 0058 7F22     		mov	r2, #127
 634 005a 0A40     		and	r2, r1
 635 005c D2B2     		uxtb	r2, r2
 636 005e 1A70     		strb	r2, [r3]
 406:../Generated_Code/SM1.c ****         DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters t
 637              		.loc 1 406 0
 638 0060 7B68     		ldr	r3, [r7, #4]
 639 0062 0022     		mov	r2, #0
 640 0064 9A81     		strh	r2, [r3, #12]
 407:../Generated_Code/SM1.c ****         SM1_OnBlockReceived(DeviceDataPrv->UserData);
 641              		.loc 1 407 0
 642 0066 7B68     		ldr	r3, [r7, #4]
 643 0068 9B69     		ldr	r3, [r3, #24]
 644 006a 181C     		mov	r0, r3
 645 006c FFF7FEFF 		bl	SM1_OnBlockReceived
 646              	.L28:
 408:../Generated_Code/SM1.c ****       }
 409:../Generated_Code/SM1.c ****     }
 410:../Generated_Code/SM1.c ****   }
 411:../Generated_Code/SM1.c ****   if ((StatReg & SPI_PDD_TX_BUFFER_EMPTYG) != 0U) { /* Is HW Tx buffer empty? */
 647              		.loc 1 411 0
 648 0070 FB1C     		add	r3, r7, #3
 649 0072 1A78     		ldrb	r2, [r3]
 650 0074 2023     		mov	r3, #32
 651 0076 1340     		and	r3, r2
 652 0078 2AD0     		beq	.L27
 412:../Generated_Code/SM1.c ****     if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent charac
 653              		.loc 1 412 0
 654 007a 7B68     		ldr	r3, [r7, #4]
 655 007c DA89     		ldrh	r2, [r3, #14]
 656 007e 7B68     		ldr	r3, [r7, #4]
 657 0080 9B8A     		ldrh	r3, [r3, #20]
 658 0082 9A42     		cmp	r2, r3
 659 0084 1CD2     		bcs	.L30
 413:../Generated_Code/SM1.c ****       SPI_PDD_WriteData8Bit(SPI0_BASE_PTR, (*((uint8_t *)DeviceDataPrv->OutDataPtr++))); /* Put a c
 660              		.loc 1 413 0
 661 0086 154A     		ldr	r2, .L31+4
 662 0088 7B68     		ldr	r3, [r7, #4]
 663 008a 1B69     		ldr	r3, [r3, #16]
 664 008c 1978     		ldrb	r1, [r3]
 665 008e 5171     		strb	r1, [r2, #5]
 666 0090 5A1C     		add	r2, r3, #1
 667 0092 7B68     		ldr	r3, [r7, #4]
 668 0094 1A61     		str	r2, [r3, #16]
 414:../Generated_Code/SM1.c ****       DeviceDataPrv->OutSentDataNum++; /* Increment the counter of sent characters. */
 669              		.loc 1 414 0
 670 0096 7B68     		ldr	r3, [r7, #4]
 671 0098 DB89     		ldrh	r3, [r3, #14]
 672 009a 0133     		add	r3, r3, #1
 673 009c 9AB2     		uxth	r2, r3
 674 009e 7B68     		ldr	r3, [r7, #4]
 675 00a0 DA81     		strh	r2, [r3, #14]
 415:../Generated_Code/SM1.c ****       if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
 676              		.loc 1 415 0
 677 00a2 7B68     		ldr	r3, [r7, #4]
 678 00a4 DA89     		ldrh	r2, [r3, #14]
 679 00a6 7B68     		ldr	r3, [r7, #4]
 680 00a8 9B8A     		ldrh	r3, [r3, #20]
 681 00aa 9A42     		cmp	r2, r3
 682 00ac 10D1     		bne	.L27
 416:../Generated_Code/SM1.c ****         DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by Send
 683              		.loc 1 416 0
 684 00ae 7B68     		ldr	r3, [r7, #4]
 685 00b0 0022     		mov	r2, #0
 686 00b2 9A82     		strh	r2, [r3, #20]
 417:../Generated_Code/SM1.c ****         SM1_OnBlockSent(DeviceDataPrv->UserData);
 687              		.loc 1 417 0
 688 00b4 7B68     		ldr	r3, [r7, #4]
 689 00b6 9B69     		ldr	r3, [r3, #24]
 690 00b8 181C     		mov	r0, r3
 691 00ba FFF7FEFF 		bl	SM1_OnBlockSent
 692 00be 07E0     		b	.L27
 693              	.L30:
 418:../Generated_Code/SM1.c ****       }
 419:../Generated_Code/SM1.c ****     } else {
 420:../Generated_Code/SM1.c ****       SPI_PDD_DisableInterruptMask(SPI0_BASE_PTR, SPI_PDD_TX_BUFFER_EMPTY); /* Disable TX interrupt
 694              		.loc 1 420 0
 695 00c0 064B     		ldr	r3, .L31+4
 696 00c2 064A     		ldr	r2, .L31+4
 697 00c4 1278     		ldrb	r2, [r2]
 698 00c6 D2B2     		uxtb	r2, r2
 699 00c8 2021     		mov	r1, #32
 700 00ca 8A43     		bic	r2, r1
 701 00cc D2B2     		uxtb	r2, r2
 702 00ce 1A70     		strb	r2, [r3]
 703              	.L27:
 421:../Generated_Code/SM1.c ****     }
 422:../Generated_Code/SM1.c ****   }
 423:../Generated_Code/SM1.c **** }
 704              		.loc 1 423 0
 705 00d0 BD46     		mov	sp, r7
 706 00d2 02B0     		add	sp, sp, #8
 707              		@ sp needed for prologue
 708 00d4 80BD     		pop	{r7, pc}
 709              	.L32:
 710 00d6 C046     		.align	2
 711              	.L31:
 712 00d8 00000000 		.word	INT_SPI0__DEFAULT_RTOS_ISRPARAM
 713 00dc 00600740 		.word	1074225152
 714              		.cfi_endproc
 715              	.LFE6:
 717              		.text
 718              	.Letext0:
 719              		.file 2 "E:/Freescale/CW MCU v10.5/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 720              		.file 3 "D:/kuaipan/SEMG/MEMS_KL25_PIN32/spi_demo_master/Generated_Code/PE_Types.h"
 721              		.file 4 "D:/kuaipan/SEMG/MEMS_KL25_PIN32/spi_demo_master/Generated_Code/IO_Map.h"
 722              		.file 5 "D:/kuaipan/SEMG/MEMS_KL25_PIN32/spi_demo_master/Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 SM1.c
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:24     .bss.INT_SPI0__DEFAULT_RTOS_ISRPARAM:00000000 $d
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:27     .bss.INT_SPI0__DEFAULT_RTOS_ISRPARAM:00000000 INT_SPI0__DEFAULT_RTOS_ISRPARAM
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:30     .text.SM1_Init:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:35     .text.SM1_Init:00000000 SM1_Init
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:185    .text.SM1_Init:000000e0 $d
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:200    .text.SM1_Deinit:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:205    .text.SM1_Deinit:00000000 SM1_Deinit
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:246    .text.SM1_Deinit:0000002c $d
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:255    .text.SM1_ReceiveBlock:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:260    .text.SM1_ReceiveBlock:00000000 SM1_ReceiveBlock
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:375    .text.SM1_ReceiveBlock:00000098 $d
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:382    .text.SM1_SendBlock:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:387    .text.SM1_SendBlock:00000000 SM1_SendBlock
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:489    .text.SM1_SendBlock:00000084 $d
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:496    .text.SM1_GetReceivedDataNum:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:501    .text.SM1_GetReceivedDataNum:00000000 SM1_GetReceivedDataNum
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:530    .text.SM1_GetSentDataNum:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:535    .text.SM1_GetSentDataNum:00000000 SM1_GetSentDataNum
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:564    .text.SM1_Interrupt:00000000 $t
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:569    .text.SM1_Interrupt:00000000 SM1_Interrupt
C:\Users\lab\AppData\Local\Temp\cczwcWYu.s:712    .text.SM1_Interrupt:000000d8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
SR_lock
SR_reg
SM1_OnBlockReceived
SM1_OnBlockSent

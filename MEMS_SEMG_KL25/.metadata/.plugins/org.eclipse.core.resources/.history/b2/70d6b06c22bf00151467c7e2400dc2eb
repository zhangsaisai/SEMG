/*
 * Init.c
 *
 *  Created on: May 5, 2015
 *      Author: lab
 */
/* ###################################################################
 **     THIS COMPONENT MODULE IS GENERATED BY USER
 **     Filename    : Init.c
 **     Project     : semg_mkl15z128vlh4
 **     Processor   : MKL25Z128VLH4
 **     Component   :
 **     Version     :
 **     Datasheet   :
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2013-07-12, 15:40, # CodeGen: 0
 **     Author	    : Dong
 **     Abstract    :
 **			This file contains user initialization of data, on-chip and peripheral devices.
 **
 **			The followings will be initialized:
 **			    - User data
 **				- On-chip devices
 **					- SPI0, SPI1
 **					- SPI0_TX_DMA, SPI0_RX_DMA, SPI1_TX_DMA, SPI1_RX_DMA
 **					- DMA
 **					- UART0, UART2
 **					- PTA2
 **					- PTB1, PTB19
 **					- PTC1, PTC2
 **					- PTD4
 **					- PTE18, PTE19
 **				- Peripheral devices
 **					- ADC
 **     Settings    :
 **
 **     Contents    :
 **     			UserInit - UserInit(void);
 **
 **     Mail      	: pzdongdong@163.com
 **
 **     Revision    : No.  Name        Date/Time        Content
 ** ###################################################################*/
/*!
 * @file Init.c
 * @version 01.00
 * @brief
 *      This file contains user initialization of data, on-chip and peripheral devices.
 *      <p>The followings will be initialized:</p>
 *      <ul>
 *      <li> User data
 *      <li> On-chip devices
 *          <ul>
 *          <li> SPI0, SPI1
 *          <li> SPI0_TX_DMA, SPI0_RX_DMA, SPI1_TX_DMA, SPI1_RX_DMA
 *          <li> DMA
 *          <li> UART0, UART2
 *          <li> PTA2
 *          <li> PTB1, PTB19
 *          <li> PTC1, PTC2
 *          <li> PTD4
 *          <li> PTE18, PTE19
 *          </ul>
 *      <li> Peripheral devices
 *          <ul>
 *          <li> ADC
 *          </ul>
 *      </ul>
 */
/*!
 *  @addtogroup UserInitialization  User Initialization
 *      This module contains user initialization of data, on-chip and peripheral devices.
 *      <p>The followings will be initialized:</p>
 *      <ul>
 *      <li> User data
 *      <li> On-chip devices
 *          <ul>
 *          <li> SPI0, SPI1
 *          <li> SPI0_TX_DMA, SPI0_RX_DMA, SPI1_TX_DMA, SPI1_RX_DMA
 *          <li> DMA
 *          <li> UART0, UART2
 *          <li> PTA2
 *          <li> PTB1, PTB19
 *          <li> PTC1, PTC2
 *          <li> PTD4
 *          <li> PTE18, PTE19
 *          </ul>
 *      <li> Peripheral devices
 *          <ul>
 *          <li> ADC
 *          </ul>
 *      </ul>
 *  @{
 */

/* MODULE Init. */

/* {Default RTOS Adapter} No RTOS includes */
#include "SysTick.h"
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "Events.h"
#include "Cpu.h"
#include "string.h"
#include "Macros.h"
#include "Globals.h"
#include "PTD0_50HZ.h"

const byte DATA_FRAME_HEAD_BIT = 0xB8;                                     /*!< The head bit of data frame. */
const byte DATA_FRAME_TAIL_BIT = 0xED;                                     /*!< The tail bit of data frame. */

extern   uint8    MCU_NUMBER; 

//extern TSENSOR tSENSOR;
//extern TSENSORPtr tSENSORPtr;
//extern TMCU tMCU;
//extern TMCUPtr tMCUPtr;
//extern TARM tARM;
//extern TARMPtr tARMPtr;

void UserDataInit(void);
void SENSORDataInit(TSENSORPtr userDataPtr);
void MCUDataInit(TMCUDataPtr userDataPtr);
void ARMDataInit(TARMDataPtr userDataPtr);
void OnChipInit(void);
void PeripheralInit(void);
void GPIOInit(void);

/*
 * ===================================================================
 *     Method      :  UserInit (Component on-chip and peripheral devices)
 */
/*!
 *     @brief
 *          Initialize on-chip and peripheral devices.
 *          The method is called in the main function and will be called
 *          only once.
 *     @param
 *          void
 *     @return
 *          void
 */
/* ===================================================================*/
void UserInit(void)
{
    UserDataInit();     /* Initialize user data. */
#if DEBUG
    printf("| -UserDataInit finished.\n");
    printf("|-+OnChipInit begins...\n");
#endif
    __DI();
    OnChipInit();       /* Initialize on-chip devices. */
    __EI();
#if DEBUG
    printf("| -OnChipInit finished.\n");
    printf("|-+PeripheralInit begins...\n");
#endif
    PeripheralInit();   /* Initialize peripheral devices. */
#if DEBUG
    printf("| -PeripheralInit finished.\n");
#endif
}

/*
 * ===================================================================
 *     Method      :  UserDataInit ()
 */
/*!
 *     @brief
 *          Initialize user data.
 *          The method is called in the UserInit function and will be called
 *          only once.
 *          Function ADCDataInit is defined in ADC.h. Function MCUDataInit
 *          and function ARMDataInit is defined below.
 *     @param
 *          void
 *     @return
 *          void
 */
/* ===================================================================*/
void UserDataInit(void)
{
	SENSORDataInit(NULL);
    MCUDataInit(NULL);
    ARMDataInit(NULL);

    return;
}

/*
 * ===================================================================
 *     Method      : ADCDataInit(Module ADC)
 */
/*!
 *     @brief
 *         	This method initialize the ADC device structure, including
 *         	data, setting and status.
 *     @param[in]
 *         	userDataPtr     - Pointer to specific user data.
 *     @return
 *          void
 */
/* ===================================================================*/
void SENSORDataInit(TSENSORPtr userDataPtr)
{
	int i = 0;
    //TSENSOR sensor;

    memset(&tSENSOR, 0xFF, sizeof(TSENSOR));
    tSENSOR.sensorStatus.sensorDataStatus = eIdle;
    tSENSOR.sensorStatus.transmitionContent = eNothing;

    for(i = 0; i < CHANNEL_COUNT; i++)
    {
    	tSENSOR.sensorSetting.isChannelEnabled[i] = TRUE;
    }

    tSENSOR.sensorStatus.isDataReady = FALSE;
    
    //tSENSOR = sensor;
    tSENSORPtr = &tSENSOR;

    return;
}




/*
 * ===================================================================
 *     Method      :  MCUDataInit ()
 */
/*!
 *     @brief
 *         	Initialize MCU data, setting, status.
 *         	The method is called in the UserDataInit function and will be called
 *         	only once.
 *     @param
 *         	userDataPtr     - Pointer to specific user data.
 *     @return
 *          void
 */
/* ===================================================================*/
void MCUDataInit(TMCUDataPtr userDataPtr)
{


    memset(&tMCU, 0, sizeof(TMCU));
    tMCU.mcuStatus.isReceivingADCData = FALSE;
    tMCU.mcuStatus.isMasterReceived = FALSE;
    tMCU.mcuStatus.isMasterSent = FALSE;
    tMCU.mcuStatus.isSlaveReceived = FALSE;
    tMCU.mcuStatus.isSlaveSent = FALSE;
    tMCU.mcuStatus.isUartReceived = FALSE;
    tMCU.mcuStatus.isUartSent = FALSE;
    
    tMCUPtr = &tMCU;


    return;
}

/*
 * ===================================================================
 *     Method      :  ARMDataInit ()
 */
/*!
 *     @brief
 *          Initialize ARM data, setting, status.
 *          The method is called in the UserDataInit function and will be called
 *          only once.
 *     @param
 *          userDataPtr     - Pointer to specific user data.
 *     @return
 *          void
 */
/* ===================================================================*/
void ARMDataInit(TARMDataPtr userDataPtr)
{

    memset(&tARM, 0, sizeof(TARM));

    tARM.armStatus.isRequiringData = FALSE;
    tARM.armStatus.isUploadReady = FALSE;
    tARM.armStatus.isForeBufferEmpty = FALSE;
    tARM.armStatus.isForeBufferFull = FALSE;
    tARM.armStatus.isBackBufferEmpty = FALSE;
    tARM.armStatus.isBackBufferFull = FALSE;
    tARM.armStatus.transmitionContent = eNothing;
    tARM.armStatus.backBufferStatus = eNull;
    tARM.armStatus.foreBufferStatus = eNull;
    tARM.foreBuffer = NULL;
    tARM.backBuffer = NULL;

    tARM.armDataLeft.dataFrame[0] = DATA_FRAME_HEAD_BIT;                        /* Head bit */
    tARM.armDataLeft.dataFrame[1] = MCU_NUMBER;                                 /*branch number*/
    tARM.armDataLeft.dataFrame[2] = 0x00U;                                      /* Data length high bits;.92 bytes */
    tARM.armDataLeft.dataFrame[3] = 0x5CU;                                      /* Data length low bits;92 bytes */
    tARM.armDataLeft.dataFrame[4] = 0x00U;                                      /* expected frame number high bits */
    tARM.armDataLeft.dataFrame[5] = 0x00U;                                      /* expected frame number low bits */
    tARM.armDataLeft.dataFrame[6] = 0x00U;                                      /* wait_time */
    tARM.armDataLeft.dataFrame[7] = 0x01U & eLeftBuffer;                        /* Status high bits */
    tARM.armDataLeft.dataFrame[8] = 0x00U;                                      /* Status low bits */
    tARM.armDataLeft.dataFrame[9] = 0x12U;                                      /* 0x12 */    
    tARM.armDataLeft.dataFrame[10] = MCU_NUMBER;                                /* branch number */    
   

    //for(i = 0; i < USING_CHANNEL_COUNT * USING_ADC_COUNT; i++)//9 axis
    //{
    //    offset = i * CHANNEL_PACKAGE_LENGTH;
    //    tARM.armDataLeft.dataFrame[9 + offset] = CHANNEL_PACKAGE_HEAD_BIT;          /* Channel package head bit */
    //    tARM.armDataLeft.dataFrame[10 + offset] = MCU_NUMBER * USING_CHANNEL_COUNT  + i;   /* Channel number */
    //    tARM.armDataLeft.dataFrame[11 + offset] = 0x00U;                            /* Channel package status */
    //}

    tARM.armDataLeft.dataFrame[DATA_FRAME_LENGTH - 1] = DATA_FRAME_TAIL_BIT;

    tARM.armDataRight.dataFrame[0] = DATA_FRAME_HEAD_BIT;
    tARM.armDataRight.dataFrame[1] = MCU_NUMBER;                                 /*branch number*/
    tARM.armDataRight.dataFrame[2] = 0x00U;                                      /* Data length high bits */
    tARM.armDataRight.dataFrame[3] = 0x5CU;                                      /* Data length low bits */
    tARM.armDataRight.dataFrame[4] = 0x00U;                                      /* frame number high bits */
    tARM.armDataRight.dataFrame[5] = 0x00U;                                      /* frame number low bits */
    tARM.armDataRight.dataFrame[6] = 0x00U;                                      /* wait_time*/
    tARM.armDataRight.dataFrame[7] = 0x01U & eRightBuffer;                       /* Status high bits */
    tARM.armDataRight.dataFrame[8] = 0x00U;                                      /* Status low bits */
    tARM.armDataRight.dataFrame[9] = 0x012U;                                     /* 0x12 */
    tARM.armDataRight.dataFrame[10] = MCU_NUMBER;                                /* branch number */ 
    
    //for(i = 0; i < USING_CHANNEL_COUNT * USING_SENSOR_COUNT; i++)
    //{
    //   offset = i * CHANNEL_PACKAGE_LENGTH;
    //    tARM.armDataRight.dataFrame[9 + offset] = CHANNEL_PACKAGE_HEAD_BIT;                   /* Channel package head bit */
    //    tARM.armDataRight.dataFrame[10 + offset] = MCU_NUMBER * USING_CHANNEL_COUNT + i;  /* Channel number */
    //    tARM.armDataRight.dataFrame[11 + offset] = 0x00U;                                     /* Channel package status */
    //}

    tARM.armDataRight.dataFrame[DATA_FRAME_LENGTH - 1] = DATA_FRAME_TAIL_BIT;

    tARMPtr = &tARM;

    return;
}

/*
 * ===================================================================
 *     Method      :  OnChipInit (Component on-chip devices)
 */
/*!
 *     @brief
 *          Initialize on-chip devices.
 *          The method is called in the UserInit function and will be called
 *          only once.
 *     @param
 *          void
 *     @return
 *          void
 */
/* ===================================================================*/
void OnChipInit(void)
{
	GPIOInit();
	IIC_Init_G();
	IIC_Init_M();
	SysTick_Init();
}

/*
 * ===================================================================
 *     Method      :  PeripheralInit (Component Peripheral devices)
 */
/*!
 *     @brief
 *          Initialize Peripheral devices.
 *          The method is called in the UserInit function and will be called
 *          only once.
 *     @param
 *          void
 *     @return
 *          void
 */
/* ===================================================================*/
void PeripheralInit(void)
{
    /* Initialize MPU6050 and HMC5883. */
	time_delay_us(5);
	HMC5883_Init();
	MPU6050_Init();
}

/*
 * ===================================================================
 *     Method      :  GPIOInit (Component GPIO)
 */
/*!
 *     @brief
 *          Initialize GPIO.
 *          The method is called in the OnChipInit function and will be called
 *          only once.
 *     @param
 *          void
 *     @return
 *          void
 */
/* ===================================================================*/
void GPIOInit(void)
{
    //before pin out ,need to open the clock gate of GPIO
	//CPU.c:__init_hardware():Enable clock gate for ports to enable pin routing
	//SIM_SCGC5 |= (SIM_SCGC5_PORTE_MASK | SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTD_MASK); 
	/*
     * Initialize Port DRDY for input from MPU6050.
     * Low when mpu6050 is ready to be read.
     * Meanwhile, an interrupt will be triggered on falling edge
     * calling MCU to read data from mpu6050.
     */
	 MPU6050_DRDY_Init(NULL);
	 //test the mpu6050 interrupt sample whether 50HZ
	 PTD0_50HZ_Init(NULL);
}



    /* END Init. */

/*!
 * @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Dong
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */



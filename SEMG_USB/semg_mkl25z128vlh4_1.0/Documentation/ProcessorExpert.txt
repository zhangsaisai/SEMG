=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "SM_SPI0"   (component SPIMaster_LDD)
   - SM_SPI0_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SM_SPI0_Enable -This method enables SPI device. This method is intended to be used together with <Disable()> method to 
                temporary switch On/Off the device after the device is initialized. This method is required if the <Enabled in 
                init. code> property is set to "no" value.
   - SM_SPI0_Disable -Disables the SPI device. When the device is disabled, some component methods should not be called. If so, 
                error ERR_DISABLED may be reported. This method is intended to be used together with <Enable()> method to 
                temporary switch on/off the device after the device is initialized. This method is not required. The <Deinit()> 
                method can be used to switch off and uninstall the device.
   - SM_SPI0_SendBlock -This method sends a block of characters. The method returns ERR_BUSY when the previous block 
                transmission is not completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation.
   - SM_SPI0_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the specified 
                number of characters is received. The method <CancelBlockReception> can be used to cancel a running receive 
                operation.
   - SM_SPI0_GetSentDataNum -Returns the number of sent characters. This method is available only if method SendBlock is 
                enabled.
   - SM_SPI0_GetReceivedDataNum -Returns the number of received characters in the receive buffer. This method is available only 
                if the ReceiveBlock method is enabled.
   - SM_SPI0_GetBlockSentStatus -This method returns whether the transmitter is finished transmitting all data block. The 
                status flag is accumulated, after calling this method the status is returned and cleared (set to "false" state).
                This method is available only if method SendBlock is enabled.
   - SM_SPI0_GetBlockReceivedStatus -This method returns whether the receiver is finished reception of all data block. The 
                status flag is accumulated, after calling this method the status is returned and cleared (set to "false" state).
                This method is available only if method ReceiveBlock is enabled.
   - SM_SPI0_Main -This method is available only in the polling mode (Interrupt service/event = 'no'). If interrupt service is 
                disabled this method replaces the interrupt handler. This method should be called if Receive/SendBlock was 
                invoked before in order to run the reception/transmission. The end of the receiving/transmitting is indicated 
                by OnBlockSent or OnBlockReceived event.

Module "SS_SPI1"   (component SPISlave_LDD)
   - SS_SPI1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SS_SPI1_Enable -This method enables SPI device. This method is intended to be used together with <Disable()> method to 
                temporary switch On/Off the device after the device is initialized. This method is required if the <Enabled in 
                init. code> property is set to "no" value.
   - SS_SPI1_Disable -Disables the SPI device. When the device is disabled, some component methods should not be called. If so, 
                error ERR_DISABLED may be reported. This method is intended to be used together with <Enable()> method to 
                temporary switch on/off the device after the device is initialized. This method is not required. The <Deinit()> 
                method can be used to switch off and uninstall the device.
   - SS_SPI1_Main -This method is available only in the polling mode (Interrupt service/event = 'no'). If interrupt service is 
                disabled this method replaces the interrupt handler. This method should be called if Receive/SendBlock was 
                invoked before in order to run the reception/transmission. The end of the receiving/transmitting is indicated 
                by OnBlockSent or OnBlockReceived event.

Module "SysTick"   (component Init_SysTick_VAR0)
   - SysTick_Init -This method initializes registers of the SysTick module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "BitIO_AD_NOT_RESET0" (component BitIO_LDD)
   - BitIO_AD_NOT_RESET0_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt 
                vectors and sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set 
                to "yes" value then the device is also enabled(see the description of the Enable() method). In this case the 
                Enable() method is not necessary and needn't to be generated.
   - BitIO_AD_NOT_RESET0_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is read and returned (see <Safe 
                mode> property for limitations). This method cannot be disabled if direction is [input].
   - BitIO_AD_NOT_RESET0_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the 
                value to a memory or a register and this value will be written to the pin after switching to the output mode 
                (using <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for 
                limitations). If the direction is <b>output</b>, it writes the value to the pin. (Method is available only if 
                the direction = <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - BitIO_AD_NOT_RESET0_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - BitIO_AD_NOT_RESET0_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "BitIO_AD_START0" (component BitIO_LDD)
   - BitIO_AD_START0_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors 
                and sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - BitIO_AD_START0_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is read and returned (see <Safe 
                mode> property for limitations). This method cannot be disabled if direction is [input].
   - BitIO_AD_START0_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value 
                to a memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - BitIO_AD_START0_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - BitIO_AD_START0_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "BitIO_UPRDY" (component BitIO_LDD)
   - BitIO_UPRDY_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - BitIO_UPRDY_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - BitIO_UPRDY_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value to 
                a memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - BitIO_UPRDY_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - BitIO_UPRDY_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "BitIO_AD_NOT_CS0" (component BitIO_LDD)
   - BitIO_AD_NOT_CS0_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors 
                and sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - BitIO_AD_NOT_CS0_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is read and returned (see <Safe 
                mode> property for limitations). This method cannot be disabled if direction is [input].
   - BitIO_AD_NOT_CS0_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the 
                value to a memory or a register and this value will be written to the pin after switching to the output mode 
                (using <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for 
                limitations). If the direction is <b>output</b>, it writes the value to the pin. (Method is available only if 
                the direction = <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - BitIO_AD_NOT_CS0_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - BitIO_AD_NOT_CS0_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "EINT_AD_NOT_DRDY0" (component ExtInt_LDD)
   - EINT_AD_NOT_DRDY0_Init -This method initializes the associated peripheral(s) and the component internal variables. The 
                method is called automatically as a part of the application initialization code.
   - EINT_AD_NOT_DRDY0_Enable -Enable the component - the external events are accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.
   - EINT_AD_NOT_DRDY0_Disable -Disable the component - the external events are not accepted. This method is available only if 
                HW module allows enable/disable of the interrupt.

Module "EINT_SYNC_INT" (component ExtInt_LDD)
   - EINT_SYNC_INT_Init -This method initializes the associated peripheral(s) and the component internal variables. The method 
                is called automatically as a part of the application initialization code.
   - EINT_SYNC_INT_Enable -Enable the component - the external events are accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - EINT_SYNC_INT_Disable -Disable the component - the external events are not accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.

Module "DMAT_M_SPI_TX" (component DMATransfer_LDD)
   - DMAT_M_SPI_TX_Init -Initializes the DMATransfer component. Allocates memory for the device data structure.  This method 
                can be called only once. Before the second call of Init() the Deinit() must be called first.
   - DMAT_M_SPI_TX_Deinit -Deinitializes the DMATransfer component.
   - DMAT_M_SPI_TX_AllocateChannel -The method allocates DMA channel for the DMA transfer. This method must be called before 
                DMA channel is initialized. Otherwise ERR_NOTAVAIL error code is returned after call of DMA_LDD channel methods.
   - DMAT_M_SPI_TX_EnableChannel -The method initializes and/or enables the DMA channel allocated for the DMA transfer defined 
                by the transfer descriptor input parameter DescriptorPtr. First call of this method on given DMA channel 
                initializes it and enables HW requests if Peripheral device or Always enabled trigger source is selected in 
                transfer descriptor Trigger source type item. This method can be also used together with Disable method to 
                temporary switch On/Off the DMA channel HW requests. In such case DMA channel registers are not reinitialized 
                again. New initialization of DMA channel can be done via SetChannelDescriptorUpdate method which reinitializes 
                whole channel with new transfer descriptor.
   - DMAT_M_SPI_TX_DisableChannel -The method disables the DMA channel allocated for the DMA transfer. However, it is still 
                possible to start transfer explicitly as SW transfer requests via StartChannelTransfer method.
   - DMAT_M_SPI_TX_SetSourceAddress -The method sets an data source address for to be transferred by the DMA channel allocated 
                for the DMA transfer. This method can be used to update DMA transfer source address when DMA channel is enabled.
                New source address is stored in transfer descriptor and written to associated DMA channel registers. The new 
                source address can be optionally checked for consistency with rest of the transfer descriptor data.
   - DMAT_M_SPI_TX_SetDestinationAddress -The method sets an data destination address for to be transferred by the DMA channel 
                allocated for the DMA transfer.  This method can be used to update DMA transfer destination address when DMA 
                channel is enabled. New destination address is stored in transfer descriptor and written to associated DMA 
                channel registers. The new source address can be optionally checked for consistency with rest of the transfer 
                descriptor data.
   - DMAT_M_SPI_TX_SetByteCount -The method sets a byte count (size of data) to be transferred for the DMA transfer. This 
                method can be used to update DMA transfer byte count when DMA channel is enabled. New transfer byte count is 
                stored in transfer descriptor and written to associated DMA channel registers. The new transfer byte count can 
                be optionally checked for consistency with rest of the transfer descriptor data. If nested operation is used, 
                the method sets the minor (inner) loop byte count.

Module "DMA_CTRL"  (component DMA_LDD)
   - DMA_CTRL_Init -Initializes the device according to design-time configuration properties. Allocates memory for the device 
                data structure.   If the <Enable in init. code> is set to "yes" then the device is also enabled (see the 
                description of the Enable method).  This method can be called only once. Before the second call of Init the 
                Deinit method must be called first.
   - DMA_CTRL_Deinit -Deinitializes the associated peripheral(s) and frees the component internal data structure.
   - DMA_CTRL_Enable -Enables DMA device.  This method is intended to be used together with Disable method to temporary switch 
                On/Off the device after the device is initialized.  This method is required if the <Enable in init. code> 
                property is set to "no" value.
   - DMA_CTRL_Disable -Disables the DMA device. When the device is disabled, some component methods should not be called. If so,
                error ERR_DISABLED is reported.  This method is intended to be used together with Enable method to temporary 
                switch On/Off the device after the device is initialized.  This method is not required. The Deinit method can 
                be used to switch off and uninstall the device.
   - DMA_CTRL_AllocateChannel -The method allocates DMA channel for the DMA transfer defined by the transfer descriptor input 
                parameter DescriptorPtr. This method must be called before DMA channel is initialized. Otherwise ERR_NOTAVAIL 
                error code is returned after call of DMA_LDD channel methods.
   - DMA_CTRL_EnableChannel -The method initializes and/or enables the DMA channel allocated for the DMA transfer defined by 
                the transfer descriptor input parameter DescriptorPtr. First call of this method on given DMA channel 
                initializes it and enables HW requests if Peripheral device or Always enabled trigger source is selected in 
                transfer descriptor Trigger source type item. This method can be also used together with Disable method to 
                temporary switch On/Off the DMA channel HW requests. In such case DMA channel registers are not reinitialized 
                again. New initialization of DMA channel can be done via SetChannelDescriptorUpdate method which reinitializes 
                whole channel with new transfer descriptor. After calling of EnableChannel method channel status is set to 
                LDD_DMA_IDLE.
   - DMA_CTRL_DisableChannel -The method disables the DMA channel allocated for the DMA transfer defined by the transfer 
                descriptor input parameter DescriptorPtr and disables HW requests services. However, it is still possible to 
                start transfer explicitly as SW transfer requests via StartChannelTransfer method. After calling of 
                DisableChannel method channel status is set to LDD_DMA_IDLE.
   - DMA_CTRL_SetChannelSourceAddress -The method sets an source address for data to be transferred by the DMA channel 
                allocated for the DMA transfer defined by the transfer descriptor parameter DescriptorPtr. This method can be 
                used to update DMA transfer source address when DMA channel is enabled. New source address is stored in 
                transfer descriptor and written to associated DMA channel registers. The new source address can be optionally 
                checked for consistency with rest of the transfer descriptor data.
   - DMA_CTRL_SetChannelDestinationAddress -The method sets an destination address for data to be transferred by the DMA 
                channel allocated for the DMA transfer defined by the transfer descriptor parameter DescriptorPtr. This method 
                can be used to update DMA transfer destination address when DMA channel is enabled. New destination address is 
                stored in transfer descriptor and written to associated DMA channel registers. The new destination address can 
                be optionally checked for consistency with rest of the transfer descriptor data.
   - DMA_CTRL_SetChannelByteCount -The method sets a byte count (size of data) to be transferred by the DMA channel allocated 
                for the DMA transfer defined by the transfer descriptor input parameter DescriptorPtr. This method can be used 
                to update DMA transfer byte count when DMA channel is enabled. New transfer byte count is stored in transfer 
                descriptor and written to associated DMA channel registers. The new transfer byte count can be optionally 
                checked for consistency with rest of the transfer descriptor data. If nested operation is used, the method sets 
                the minor (inner) loop byte count.

Module "DMAT_M_SPI_RX" (component DMATransfer_LDD)
   - DMAT_M_SPI_RX_Init -Initializes the DMATransfer component. Allocates memory for the device data structure.  This method 
                can be called only once. Before the second call of Init() the Deinit() must be called first.
   - DMAT_M_SPI_RX_Deinit -Deinitializes the DMATransfer component.
   - DMAT_M_SPI_RX_AllocateChannel -The method allocates DMA channel for the DMA transfer. This method must be called before 
                DMA channel is initialized. Otherwise ERR_NOTAVAIL error code is returned after call of DMA_LDD channel methods.
   - DMAT_M_SPI_RX_EnableChannel -The method initializes and/or enables the DMA channel allocated for the DMA transfer defined 
                by the transfer descriptor input parameter DescriptorPtr. First call of this method on given DMA channel 
                initializes it and enables HW requests if Peripheral device or Always enabled trigger source is selected in 
                transfer descriptor Trigger source type item. This method can be also used together with Disable method to 
                temporary switch On/Off the DMA channel HW requests. In such case DMA channel registers are not reinitialized 
                again. New initialization of DMA channel can be done via SetChannelDescriptorUpdate method which reinitializes 
                whole channel with new transfer descriptor.
   - DMAT_M_SPI_RX_DisableChannel -The method disables the DMA channel allocated for the DMA transfer. However, it is still 
                possible to start transfer explicitly as SW transfer requests via StartChannelTransfer method.
   - DMAT_M_SPI_RX_SetSourceAddress -The method sets an data source address for to be transferred by the DMA channel allocated 
                for the DMA transfer. This method can be used to update DMA transfer source address when DMA channel is enabled.
                New source address is stored in transfer descriptor and written to associated DMA channel registers. The new 
                source address can be optionally checked for consistency with rest of the transfer descriptor data.
   - DMAT_M_SPI_RX_SetDestinationAddress -The method sets an data destination address for to be transferred by the DMA channel 
                allocated for the DMA transfer.  This method can be used to update DMA transfer destination address when DMA 
                channel is enabled. New destination address is stored in transfer descriptor and written to associated DMA 
                channel registers. The new source address can be optionally checked for consistency with rest of the transfer 
                descriptor data.
   - DMAT_M_SPI_RX_SetByteCount -The method sets a byte count (size of data) to be transferred for the DMA transfer. This 
                method can be used to update DMA transfer byte count when DMA channel is enabled. New transfer byte count is 
                stored in transfer descriptor and written to associated DMA channel registers. The new transfer byte count can 
                be optionally checked for consistency with rest of the transfer descriptor data. If nested operation is used, 
                the method sets the minor (inner) loop byte count.

Module "DMAT_S_SPI_TX" (component DMATransfer_LDD)
   - DMAT_S_SPI_TX_Init -Initializes the DMATransfer component. Allocates memory for the device data structure.  This method 
                can be called only once. Before the second call of Init() the Deinit() must be called first.
   - DMAT_S_SPI_TX_Deinit -Deinitializes the DMATransfer component.
   - DMAT_S_SPI_TX_AllocateChannel -The method allocates DMA channel for the DMA transfer. This method must be called before 
                DMA channel is initialized. Otherwise ERR_NOTAVAIL error code is returned after call of DMA_LDD channel methods.
   - DMAT_S_SPI_TX_EnableChannel -The method initializes and/or enables the DMA channel allocated for the DMA transfer defined 
                by the transfer descriptor input parameter DescriptorPtr. First call of this method on given DMA channel 
                initializes it and enables HW requests if Peripheral device or Always enabled trigger source is selected in 
                transfer descriptor Trigger source type item. This method can be also used together with Disable method to 
                temporary switch On/Off the DMA channel HW requests. In such case DMA channel registers are not reinitialized 
                again. New initialization of DMA channel can be done via SetChannelDescriptorUpdate method which reinitializes 
                whole channel with new transfer descriptor.
   - DMAT_S_SPI_TX_DisableChannel -The method disables the DMA channel allocated for the DMA transfer. However, it is still 
                possible to start transfer explicitly as SW transfer requests via StartChannelTransfer method.
   - DMAT_S_SPI_TX_SetSourceAddress -The method sets an data source address for to be transferred by the DMA channel allocated 
                for the DMA transfer. This method can be used to update DMA transfer source address when DMA channel is enabled.
                New source address is stored in transfer descriptor and written to associated DMA channel registers. The new 
                source address can be optionally checked for consistency with rest of the transfer descriptor data.
   - DMAT_S_SPI_TX_SetDestinationAddress -The method sets an data destination address for to be transferred by the DMA channel 
                allocated for the DMA transfer.  This method can be used to update DMA transfer destination address when DMA 
                channel is enabled. New destination address is stored in transfer descriptor and written to associated DMA 
                channel registers. The new source address can be optionally checked for consistency with rest of the transfer 
                descriptor data.
   - DMAT_S_SPI_TX_SetByteCount -The method sets a byte count (size of data) to be transferred for the DMA transfer. This 
                method can be used to update DMA transfer byte count when DMA channel is enabled. New transfer byte count is 
                stored in transfer descriptor and written to associated DMA channel registers. The new transfer byte count can 
                be optionally checked for consistency with rest of the transfer descriptor data. If nested operation is used, 
                the method sets the minor (inner) loop byte count.

Module "DMAT_S_SPI_RX" (component DMATransfer_LDD)
   - DMAT_S_SPI_RX_Init -Initializes the DMATransfer component. Allocates memory for the device data structure.  This method 
                can be called only once. Before the second call of Init() the Deinit() must be called first.
   - DMAT_S_SPI_RX_Deinit -Deinitializes the DMATransfer component.
   - DMAT_S_SPI_RX_AllocateChannel -The method allocates DMA channel for the DMA transfer. This method must be called before 
                DMA channel is initialized. Otherwise ERR_NOTAVAIL error code is returned after call of DMA_LDD channel methods.
   - DMAT_S_SPI_RX_EnableChannel -The method initializes and/or enables the DMA channel allocated for the DMA transfer defined 
                by the transfer descriptor input parameter DescriptorPtr. First call of this method on given DMA channel 
                initializes it and enables HW requests if Peripheral device or Always enabled trigger source is selected in 
                transfer descriptor Trigger source type item. This method can be also used together with Disable method to 
                temporary switch On/Off the DMA channel HW requests. In such case DMA channel registers are not reinitialized 
                again. New initialization of DMA channel can be done via SetChannelDescriptorUpdate method which reinitializes 
                whole channel with new transfer descriptor.
   - DMAT_S_SPI_RX_DisableChannel -The method disables the DMA channel allocated for the DMA transfer. However, it is still 
                possible to start transfer explicitly as SW transfer requests via StartChannelTransfer method.
   - DMAT_S_SPI_RX_SetSourceAddress -The method sets an data source address for to be transferred by the DMA channel allocated 
                for the DMA transfer. This method can be used to update DMA transfer source address when DMA channel is enabled.
                New source address is stored in transfer descriptor and written to associated DMA channel registers. The new 
                source address can be optionally checked for consistency with rest of the transfer descriptor data.
   - DMAT_S_SPI_RX_SetDestinationAddress -The method sets an data destination address for to be transferred by the DMA channel 
                allocated for the DMA transfer.  This method can be used to update DMA transfer destination address when DMA 
                channel is enabled. New destination address is stored in transfer descriptor and written to associated DMA 
                channel registers. The new source address can be optionally checked for consistency with rest of the transfer 
                descriptor data.
   - DMAT_S_SPI_RX_SetByteCount -The method sets a byte count (size of data) to be transferred for the DMA transfer. This 
                method can be used to update DMA transfer byte count when DMA channel is enabled. New transfer byte count is 
                stored in transfer descriptor and written to associated DMA channel registers. The new transfer byte count can 
                be optionally checked for consistency with rest of the transfer descriptor data. If nested operation is used, 
                the method sets the minor (inner) loop byte count.

Module "BitIO_AD_NOT_CS1" (component BitIO_LDD)
   - BitIO_AD_NOT_CS1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors 
                and sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - BitIO_AD_NOT_CS1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is read and returned (see <Safe 
                mode> property for limitations). This method cannot be disabled if direction is [input].
   - BitIO_AD_NOT_CS1_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the 
                value to a memory or a register and this value will be written to the pin after switching to the output mode 
                (using <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for 
                limitations). If the direction is <b>output</b>, it writes the value to the pin. (Method is available only if 
                the direction = <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - BitIO_AD_NOT_CS1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - BitIO_AD_NOT_CS1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "BitIO_AD_NOT_RESET1" (component BitIO_LDD)
   - BitIO_AD_NOT_RESET1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt 
                vectors and sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set 
                to "yes" value then the device is also enabled(see the description of the Enable() method). In this case the 
                Enable() method is not necessary and needn't to be generated.
   - BitIO_AD_NOT_RESET1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is read and returned (see <Safe 
                mode> property for limitations). This method cannot be disabled if direction is [input].
   - BitIO_AD_NOT_RESET1_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the 
                value to a memory or a register and this value will be written to the pin after switching to the output mode 
                (using <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for 
                limitations). If the direction is <b>output</b>, it writes the value to the pin. (Method is available only if 
                the direction = <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - BitIO_AD_NOT_RESET1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - BitIO_AD_NOT_RESET1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "usb_device" (component USB_DEVICE_STACK)
   - usb_device_USB_Class_Init -The function initializes the Class Module
   - usb_device_USB_Class_DeInit -This function De-initializes the Class Module
   - usb_device_USB_Class_Send_Data -This function calls the device to send data upon receiving an IN token
   - usb_device_USB_Class_Periodic_Task -This funtion calls for periodic tasks
   - usb_device__usb_device_init -This function initializes the Device layer and the Controller layer of the S08 USB stack. It 
                initialised the variables used for this layer and then calls the controller layer initialize function
   - usb_device__usb_device_deinit -This function de-initializes the Device layer and the Controller layer
   - usb_device__usb_device_init_endpoint -This function initializes an endpoint the Device layer and the Controller layer in 
                the S08 USB stack. It validate whether all endpoints have already been initialized or not and then calls the 
                controller layer endpoint initialize function
   - usb_device__usb_device_deinit_endpoint -This function deinitializes an endpoint the Device layer and the Controller layer 
                in the S08 USB stack. It validate whether all endpoints have already been deinitialized or not and then calls 
                the controller layer endpoint deinitialize function
   - usb_device__usb_device_get_status -This function retrieves the endpoint as well USB component status which is stored by 
                calling USB_Device_Set_Status. This function can be called by Application as well as the DCI layer.
   - usb_device__usb_device_set_status -This function sets the endpoint as well USB component status which can be retrieved by 
                calling _usb_device_get_status. This function can be called by Application as well as the DCI layer.
   - usb_device__usb_device_register_service -This function registers a callback function from the application if it is called 
                not already registered so that the regitered callback function can be if the event of that type occurs
   - usb_device__usb_device_unregister_service -This function un registers a callback function which has been previously 
                registered by the application layer
   - usb_device_USB_Device_Call_Service -This function calls the registered service callback function of the application layer 
                based on the type of event received. This function is called from the DCI layer.
   - usb_device_USB_Framework_Init -This fuction registers the service on the control endpoint
   - usb_device_USB_Framework_DeInit -The funtion De-initializes the Class Module
   - usb_device_USB_Framework_Reset -This function is used to reset the framework module
   - usb_device_USB_DCI_Bus_Reset_Handler -This functions is called when USB Bus Reset event is received on USB Bus.This 
                function clears all the errors conditions and reinit Global data structures. Also resets USB device controller.
   - usb_device_USB_DCI_Init -This function initializes the Controller layer
   - usb_device_USB_DCI_DeInit -This function de-initializes the Controller layer
   - usb_device_USB_DCI_Init_EndPoint -This function initializes an endpoint and the Bufffer Descriptor Table entry associated 
                with it. Incase the input parameters are invalid it will return USBERR_EP_INIT_FAILED error.
   - usb_device_USB_DCI_Deinit_EndPoint -This function un-intializes the endpoint by clearing the corresponding endpoint 
                control register and then clearing the bdt elem.
   - usb_device_USB_DCI_Cancel_Transfer -This function cancels any pending Transfers which ahve not been sent
   - usb_device_USB_DCI_Stall_EndPoint -This function stalls the endpoint by setting Endpoint BDT
   - usb_device_USB_DCI_Unstall_EndPoint -This function unstalls the endpoint by clearing Endpoint Control Register and BDT
   - usb_device_USB_DCI_Get_Setup_Data -This function copies Setup Packet from USB RAM to application buffer
   - usb_device_USB_DCI_Get_Transfer_Status -This function retrieves the transfer status of the endpoint by checking the BDT as 
                well as the endpoint control register
   - usb_device_USB_DCI_Recv_Data -This function retrieves data received data on a RECV endpoint by copying it from USB RAM to 
                application buffer
   - usb_device_USB_DCI_Send_Data -This function configures Controller to send data on an SEND endpoint by setting the BDT to 
                send data.
   - usb_device_USB_DCI_Assert_Resume -This function starts RESUME signalling and then stops it after some delay. In this delay 
                make sure that COP is reset.
   - usb_device_USB_DCI_Set_Address -This function configures Controller to send data on an SEND endpoint
   - usb_device_USB_DCI_OnDeviceSpeedDetect -This function is called after the device detects bus speed
   - usb_device_USB_DCI_OnDeviceSuspend -This function is called after the suspend condition is met
   - usb_device_USB_DCI_OnDeviceResume -This function is called after the resume signaling is done
   - usb_device_USB_DCI_OnDeviceSetupPacket -This function called after the setup packet is received into the internal buffer
   - usb_device_USB_DCI_OnDeviceError -This function is called after the Error is detected
   - usb_device_Clear_Mem -This function clears memory starting from start_addr till count bytes
   - usb_device_USB_Desc_Get_Descriptor -The function returns the correponding descriptor
   - usb_device_USB_Desc_Get_Interface -The function returns the alternate interface
   - usb_device_USB_Desc_Set_Interface -The function sets the alternate interface
   - usb_device_USB_Desc_Valid_Configation -This function checks whether the configuration is valid or not
   - usb_device_USB_Desc_Valid_Interface -This function checks whether the interface is valid or not
   - usb_device_USB_Desc_Remote_Wakeup -This function returns remote wakeup is supported or not
   - usb_device_USB_Desc_Get_Endpoints -This function returns the information about all the non control endpoints implemented

Module "Cpu"       (component MKL26Z256LH4)

===================================================================================
